#!/usr/bin/env ydsh

# lite-weight file checker

##############################
##     helper functions     ##
##############################

_usage() : Nothing {
    echo 1>&2 $@
    echo 1>&2 usage: litecheck [-b bin] file
    exit 2
}

_error() : Nothing {
    echo 1>&2 $@
    exit 1
}

function _lines($path : String) : [String] {
    # return IFS=$'\n' $(cat $path)
    return IFS="" "$(cat $path)".split($'\n')
}

#####################################
##     expose to target script     ##
#####################################

var cmd = ''
var self = ''

##############################
##     actual functions     ##
##############################

let RUN = "RUN"
let CHECK = "CHECK"
let CHECK_IF = "CHECK_IF"
let CHECK_RE = "CHECK_RE"
let CHECKERR = "CHECKERR"
let CHECKERR_IF = "CHECKERR_IF"
let CHECKERR_RE = "CHECKERR_RE"
let STATUS = "STATUS"
let REQUIRE = "REQUIRE"
let SHEBANG = "#!"

typedef Directive = (
    String, # directive type (RUN, CHECK, CHECKERR, STATUS, REQUIRES)
    String, # line
    Int,    # line number
)

function _parse_num($v : String) : Int! {
    var m = $/^ *(0|[1-9][0-9]*) *$/.match($v)
    var r : Int!
    if !$m.empty() {
        $r = $m[1]!.toInt()
    }
    return $r
}

function _parse_directives($path : String) : [String: [Directive]] {
    var map = [
        $RUN : new [Directive](),
        $REQUIRE : new [Directive](),
        $CHECK : new [Directive](),
        $CHECKERR : new [Directive](),
        $STATUS : new [Directive](),
    ]

    var lines = $_lines($path)
    if !$lines.empty() && $lines[0].startsWith($SHEBANG) {
        $map[$RUN].add(($SHEBANG, $lines[0], 1))
    }
    for(var i = 0; $i < $lines.size(); $i++) {
        var line = $lines[$i]
        var ln = $i + 1
        var matched = $/^# *(RUN|CHECK|CHECKERR|CHECK_IF|CHECKERR_IF|CHECK_RE|CHECKERR_RE|STATUS|REQUIRE): (.*)/.match($line)
        if !$matched.empty() {
            var type = $matched[1]!
            $line = $matched[2]!
            var key = $type
            if [$CHECK, $CHECK_IF, $CHECK_RE].contains($type) {
                $key = $CHECK
            }
            if [$CHECKERR, $CHECKERR_IF, $CHECKERR_RE].contains($type) {
                $key = $CHECKERR
            }
            $map[$key].add(($type, $line, $ln))
        }
    }

    ## check RUN directive or SHEBANG
    case $map[$RUN].size() {
        0 => _error require $RUN directive or shebang
        1 => if $map[$RUN][0]._0 == $SHEBANG {
                test -x $self || _error "must be executable: `$self'"
                $map[$RUN].shift()
            } else {
                assert $map[$RUN][0]._0 == $RUN
            }
        else => {
            if $map[$RUN][0]._0 == $SHEBANG {
                $map[$RUN].shift()
                assert $map[$RUN][0]._0 == $RUN
            }
            $map[$RUN].size() == 1 || _error $RUN directive has already defined
        }
    }

    ## check STATUS directive
    case $map[$STATUS].size() {
        0 => {}
        1 => {
            var d = $map[$STATUS][0]._1
            $_parse_num($d) ?? _error "invalid $STATUS directive: `$d'"
        }
        else => _error $STATUS directive has already defined
    }
    return $map
}

# split check directives into chunks
function _to_chunk($checks : [Directive]) : [[Directive]] {
    var ret : [[Directive]]
    if !$checks[0]._0.endsWith("_IF") && !$checks[0]._0.endsWith("_RE") {
        $ret.add(new [Directive]())
    }

    for $c in $checks {
        if $c._0.endsWith("_IF") || $c._0.endsWith("_RE") {
            $ret.add(new [Directive]())
        } elif !$ret.empty() && !$ret.peek().empty() && $ret.peek().peek()._0.endsWith("_RE") {
            $ret.add(new [Directive]())
        }
        $ret.peek().add($c)
    }
    return $ret
}

function _match_chunk_re($checks : [Directive], $output : [String]) : Bool {
    assert $checks.size() == 1
    assert $output.size() == 1

    var out = $output.join($'\n')
    var re = try { new Regex($checks[0]._1, ""); }
             catch $e : Error { echo 1>&2 ${$e.message()}; return $false; }
    if $re !~ $out {
        echo 1>&2 ${$checks[0]._0} on line ${$checks[0]._2},
        echo 1>&2 "    Expect: $re"
        echo 1>&2 "    Actual: $out"
        return $false
    }
    return $true
}

function _match_chunk($checks : [Directive], $output : [String]) : Bool {
    $checks[0]._0.endsWith("_RE") && return $_match_chunk_re($checks, $output)

    var eout = ""
    for $c in $checks {
        if !$eout.empty() {
            $eout += $'\n'
        }
        $eout += $c._1
    }
    $? = 0
    var o = IFS="" "$(diff 2>&1 <(cat <<< $eout) <(cat <<< ${$output.join($'\n')}))"
    var r = $? == 0
    if !$r {
        echo 1>&2 ${$checks[0]._0} on line ${$checks[0]._2},
        echo 1>&2 $o
    }
    return $r
}

function _skip_until($c : String, $output : [String], $index : Int) : Int {
    for(; $index < $output.size(); $index++) {
        $output[$index] == $c && break
    }
    return $index
}

function _check_output($checks : [Directive], $output : [String]) : Bool {
    var index = 0
    var chunks = $_to_chunk($checks)
    var matched = 0
    for $chunk in $chunks {
        if $chunk[0]._0.endsWith("_IF") {
            $index = $_skip_until($chunk[0]._1, $output, $index)
        }
        var limit = $index + $chunk.size()
        if $matched == $chunks.size() - 1 && $limit < $output.size() {
            $limit = $output.size() # match remain output
        }
        $_match_chunk($chunk, $output.slice($index, $limit)) || return $false
        $index = $limit
        $matched++
    }
    return $true
}

function _run_and_check($map : [String : [Directive]]) : Int {
    var run = case $map[$RUN].size() {
        0 => $MODULE.func("eval $self")
        else => {
            var d = $map[$RUN][0]._1
            try {
                $MODULE.func($d)
            } catch $e : Error {
                _error ${"invalid $RUN directive: `$d', caused by" + $'\n' + $e.message()}
            }
        }
    }

    assert command -v mktemp > /dev/null
    let outPath = "$(mktemp)" :- _error "mktemp failed"
    let errPath = "$(mktemp)" :- _error "mktemp failed"

    try {
        $? = 0
        var j = ($run() with 1> $outPath 2> $errPath) &
        var s = $j.wait()
        var outs = $_lines($outPath)
        var errs = $_lines($errPath)

        var ret = 0
        if !$map[$CHECK].empty() {
            if !$_check_output($map[$CHECK], $outs) { echo 1>&2 stdout is mismatched; $ret = 1; }
        }
        if !$map[$CHECKERR].empty() {
            if !$_check_output($map[$CHECKERR], $errs) { echo 1>&2 stderr is mismatched; $ret = 1; }
        }
        if !$map[$STATUS].empty() {
            var estatus = $_parse_num($map[$STATUS][0]._1)!
            $s == $estatus || _error "exit status is mismatched, expected: `$estatus', actual: `$s'"
        }
        return $ret
    } finally {
        rm -f $outPath
        rm -f $errPath
    }
}

# entry point
litecheck() {
    # parse command line arguments
    var bin : String!
    var file : String!
    for(var i = 0; $i < $#; $i++) {
        var arg = $@[$i]
        case $arg {
        "-b" => 
            if $i + 1 < $# {
                $i++
                $bin = $@[$i]
            } else {
                _usage "`$arg' option requires argument"
            }
        $/^-.*/ => _usage "invalid option: $arg"
        else => { $file = $arg; break; }
        }
    }

    ## check file existence
    $file ?? _usage "require file"
    $self = $file!.realpath() ?? _usage "file not found: `${$file!}'"
    test -f $self || _usage "require regular file: ${$file!}"

    ## check bin
    if $bin {
        $cmd = $bin!.realpath() ?? _usage "file not found: `${$bin!}'"
        (test -f $cmd && test -x $cmd) || _usage "must be executable: `${$bin!}'"
    }

    # read directive
    var map = $_parse_directives($self)

    # check pre-condition
    for $d in $map[$REQUIRE] {
        var cond = try { $MODULE.func($d._1)(); } 
                   catch $e : Error { _error ${"invalid $REQUIRE directive: `${$d._1}', caused by" + $'\n' + $e.message()}; }
        $cond is Bool || _error "$REQUIRE directive must be boolean expression: `${$d._1}'"
        $cond! as Bool || { echo skip "`$self'"; exit 125; }
    }

    # run command
    return $_run_and_check($map)
}

shctl is-sourced || litecheck $@