
source $SCRIPT_DIR/../modules/completion.arsh

function _cmd($ctx : Module, $t : [String], $c : Int) : Candidates? {
    if $t.size() == 1 || $c == 1{
        var actions = case $t[0] {
            'command' => ['-A', 'builtin', '-A', 'external']
            'exec' => ['-A', 'external']
            else => ['-A', 'command']
        }

        var prefix = $t.size() == 1 ? "" : $t.peek()
        if $prefix.contains('/') {
            $actions.add('-A').add('exec')
        }
        if $prefix.startsWith('~') {
            $actions.add('-A').add('tilde')
        }
        complete -q -m $ctx $actions $prefix
        return $COMPREPLY
    } else {
        $t.shift()
        return $compDelegate($ctx, $t, $c - 1)
    }
}

source $SCRIPT_DIR/../modules/fzf.arsh as _fzf

$compAdd("command", $_cmd)
$compAdd("call", $_cmd)
$compAdd("exec", $_cmd)


# defined by compdef

compdef --cmd help --arg-cmd "help | cut -d ' ' -f 1"
compdef --cmd help --short s --arg-cmd "help | cut -d ' ' -f 1"
compdef --cmd unsetenv --arg-action env
compdef --cmd cd --arg-action dir
compdef --cmd cd --short L --arg-action dir
compdef --cmd cd --short P --arg-action dir
compdef --cmd pwd --short L
compdef --cmd pwd --short P
compdef --cmd complete --short A \
        --arg-cmd "help complete | grep -E '^      [_a-z]+' | sed 's/^      //g' | cut -d ' ' -f 1"

## kill
{
    let ff = $addArgFunc(function() => new Candidates().add($_fzf.fzf_proc_select().join(' ')))
    for s in $SIG.list() {
        compdef --cmd kill --short ${$s.value()} --arg-func $ff --desc SIG${$s.name()}
    }
    compdef --cmd kill --short l
    compdef --cmd kill --short s --arg-action signal
    compdef --cmd kill --arg-func $ff
}
