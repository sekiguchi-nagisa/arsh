#!/usr/bin/env arsh

# for history manipulation

var HISTFILE = "$DATA_HOME/arsh_history"
var HISTSIZE = 1000
var HISTFILESIZE = 1000
var HISTIGNORE = $/^history/ as Regex?
let HISTORY : [String]

let _HISTLIMIT = 8192

function _sync() {
    if $HISTSIZE > $_HISTLIMIT {
        $HISTSIZE = $_HISTLIMIT
    }
    if $HISTORY.size() > $HISTSIZE {
        $HISTORY.removeRange(0, $HISTORY.size() - $HISTSIZE)
    }
}

function _error(s : String) {
    echo 1>&2 history: $s
}

[<CLI(desc: "Display or manipulate history list.")>]
typedef _HistParam() {
    [<Flag(short: "c", help: "clear the history list", stop: $true)>]
    var clear = $false

    [<Option(short: 'd', placeholder: 'offset', help: "delete the history entry at OFFSET")>]
    var del : Int?

    [<Flag(short: 's', stop: $true, help: "append the remain ARGs to history as single entry")>]
    var append = $false

    [<Option(short: 'r', long: "read", opt: $true, default: "", placeholder: "file", xor: 0,
            help: "read the history list from FILE")>]
    var load : String?

    [<Option(short: "w", long: "write", opt: $true, default: "", placeholder: "file", xor: 0,
            help: "write the history list to FILE")>]
    var save: String?

    [<Arg>]
    var args: [String]
}

function _show(argv : [String]) : Int {
    let histSize = $HISTORY.size()
    let size = $argv.size()
    var offset = $histSize

    if $size > 0 {
        if $size > 1 {
            $_error("too many arguments")
            return 1
        }

        $offset = $argv[0].toInt() ?? {
            $_error("${$argv[0]}: numeric argument required")
            return 1
        }

        if $offset > $histSize {
            $offset = $histSize
        }
    }

    for(var i = $histSize - $offset; $i < $histSize; $i++) {
        printf -- "%s\n" $HISTORY[$i]
    }
    return 0
}

function _add(s : String) {
    $HISTSIZE == 0 && return;
    if !$HISTORY.empty() && $HISTORY.peek() == $s { return; }

    $s.empty() && return;
    if $s.startsWith(" ") || $s.startsWith($'\t') { return; }
    if $HISTIGNORE && $HISTIGNORE! =~ $s { return; }
    $s.contains($'\n') && return

    if $HISTORY.size() + 1 > $HISTSIZE {
        $HISTORY.removeRange(0, $HISTORY.size() + 1 - $HISTSIZE)
    }
    $HISTORY.add($s)
}

function _add_and_save(s : String) {
    $HISTSIZE == 0 && return;
    $s.empty() && return;
    if !$HISTORY.empty() && $HISTORY.peek() == $s { return; }

    if $s.startsWith(" ") || $s.startsWith($'\t') { return; }
    if $HISTIGNORE && $HISTIGNORE! =~ $s { return; }

    if $HISTORY.size() + 1> $HISTSIZE {
        $HISTORY.removeRange(0, $HISTORY.size() + 1 - $HISTSIZE)
    }
    $HISTORY.add($s)

    # save new entry
    $HISTFILESIZE == 0 && return
    $s.contains($'\n') && return
    if $HISTFILESIZE > $_HISTLIMIT {
        $HISTFILESIZE = $_HISTLIMIT
    }
    $HISTFILE.empty() && return
    try {
        if !(test -e $HISTFILE) {
            touch $HISTFILE 2>> /dev/null &&
            chmod g-rw,o-rw $HISTFILE
        }
        var lines : [String]
        for line in new FD($HISTFILE).lock() {
            $lines.add($line)
        }
        if $lines.size() + 1 > $HISTFILESIZE {
            $lines.removeRange(0, $lines.size() + 1 - $HISTFILESIZE)
        }
        $lines.add($s)
        printf -- "%s\n" $lines >| $HISTFILE
    } catch e {
        return # ignore io error
    }
}

function _load(path : String) {
    $HISTSIZE == 0 && return;
    if $path.empty() { $path = $HISTFILE; }
    $path = try { $path.realpath() } catch e { return; }
    for $line in $STDIN {
        $_add($line)
    } with < $path
    $PIPESTATUS.clear()
}

function _save(path : String) {
    if $HISTFILESIZE > $_HISTLIMIT {
        $HISTFILESIZE = $_HISTLIMIT
    }

    if $HISTFILESIZE == 0 || $HISTORY.empty() {
        return;
    }

    if $path.empty() { $path = $HISTFILE; }
    let size = $HISTORY.size()
    var offset = $size < $HISTFILESIZE ? 0 : $size - $HISTFILESIZE
    $offset < $size || return

    var histFile = new FD($path).lock()
    for(var i = $offset; $i < $size; $i++) {
        var line = $HISTORY[$i]
        $line.contains($'\n') && continue
        printf -- "%s\n" $HISTORY[$i]
    } with >& $histFile
    chmod g-rw,o-rw $path
}

history(param : _HistParam) {
    $_sync()

    if($# == 0 || $@[0][0] != '-') {
        return $_show($@)
    }

    if $param.clear {
        $HISTORY.clear()
        return 0
    }
    if $param.append {
        var line = $param.args.join(" ")
        $_add($line)
        return 0
    }
    if let offset = $param.del {
        if $offset < 1 || $offset > $HISTORY.size() {
            echo 1>&2 ${$param.usage("$offset: history offset out of range", $false)}
            return 1
        }
        $HISTORY.remove($offset - 1)
        return 0
    }
    if let target = $param.load {
        $_load($target)
    } elif let target = $param.save {
        $_save($target)
    }
    return 0
}

$LINE_EDIT.setHistory($HISTORY)
$LINE_EDIT.setHistSync(function(line, buf) => {
    $_sync()
    $_add_and_save($line)
})
