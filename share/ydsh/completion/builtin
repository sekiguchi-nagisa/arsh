source completion

function _help($t : [String], $c : Int) : [String] {
    var p = ".*"
    if $c < $t.size() {
        $p = $t.peek()
    }
    return $(help | cut -d ' ' -f 1 | grep "^$p")
}

function _cmd($t : [String], $c : Int) : [String] {
    if $t.size() == 1 {
        complete &> /dev/null -A command
        return $COMPREPLY
    } elif $c == 1 {
        complete &> /dev/null -A command ${$t.peek()}
        return $COMPREPLY
    } else {
        $t.shift()
        return $COMP_HOOK!($t, $c - 1)
    }
}

function _unsetenv($t : [String], $c : Int) : [String] {
    complete &> /dev/null -A env
    if($t.size() == $c) {
        return $COMPREPLY
    } else {
        return $compFilter($t.peek(), $COMPREPLY)
    }
}

function _shctl($t : [String], $c : Int) : [String] {
    if $c == 1 {
        var p = ".*"
        if $c < $t.size() {
            $p = $t.peek()
        }
        return $(help shctl | grep '^        ' | sed 's/        //g' | cut -d ' ' -f 1 | grep "^$p")
    }
    assert $t.size() > 1
    var sub = $t[1]
    case $t[1] {
    'show'|'set'|'unset' => {
        var p = ".*"
        if $c < $t.size() {
            $p = $t.peek()
        }
        return $(shctl show | cut -d ' ' -f 1 | grep "^$p")
    }
    else => return new [String]()
    }
}

function _cd($t : [String], $c : Int) : [String] {
    if $c == $t.size() {
        complete &> /dev/null -A dir
    } else {
        complete &> /dev/null -A dir ${$t.peek()}
    }
    return $COMPREPLY
}

$compAdd("help", $_help)
$compAdd("command", $_cmd)
$compAdd("eval", $_cmd)
$compAdd("exec", $_cmd)

$compAdd('unsetenv', $_unsetenv)
$compAdd('shctl', $_shctl)
$compAdd('cd', $_cd)
