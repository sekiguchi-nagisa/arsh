#!/usr/bin/env ydsh

source $SCRIPT_DIR/../module/completion

function _cmd($ctx : Module, $t : [String], $c : Int) : [String]? {
    if $t.size() == 1 || $c == 1{
        var actions = case $t[0] {
            'command' => ['-A', 'builtin', '-A', 'external']
            'exec' => ['-A', 'external']
            else => ['-A', 'command']
        }
        complete -q -m $ctx $actions ${$t.size() == 1 ? "" : $t.peek()}
        return $COMPREPLY
    } else {
        $t.shift()
        return $compDelegate($ctx, $t, $c - 1)
    }
}

_extract_sub() {
    for $line in $STDIN {
        var matched = $/^      ([-a-z]+) +.+/.match($line)
        if !$matched.empty() {
            echo ${$matched[1]!}
        }
    }
}

function _shctl($ctx : Module, $t : [String], $c : Int) : [String] {
    if $c == 1 {
        var p = ""
        if $c < $t.size() {
            $p = $t.peek()
        }
        var ret : [String]
        for line in <(help shctl | _extract_sub) {
            if $line.startsWith($p) {
                $ret.add($line)
            }
        }
        return $ret
    }
    assert $t.size() > 1
    case $t[1] {
    'set'|'unset' => {
        var p = ""
        if $c < $t.size() {
            $p = $t.peek()
        }
        var ret : [String]
        for line in <(shctl set | cut -d ' ' -f 1) {
            if $line.startsWith($p) {
                $ret.add($line)
            }
        }
        return $ret
    }
    else => return new [String]()
    }
}


$compAdd("command", $_cmd)
$compAdd("eval", $_cmd)
$compAdd("exec", $_cmd)
$compAdd('shctl', $_shctl)


# defined by compdef

compdef --cmd help --arg-cmd "help | cut -d ' ' -f 1"
compdef --cmd help --short s --arg-cmd "help | cut -d ' ' -f 1"
compdef --cmd unsetenv --arg-action env
compdef --cmd cd --arg-action dir
compdef --cmd cd --short L --arg-action dir
compdef --cmd cd --short P --arg-action dir
compdef --cmd pwd --short L
compdef --cmd pwd --short P
compdef --cmd complete --short A \
        --arg-cmd "help complete | grep -E '^      [_a-z]+' | sed 's/^      //g' | cut -d ' ' -f 1"
compdef --cmd kill --short s --arg-action signal
compdef --cmd kill --short l