
source ../../../../share/arsh/modules/repl_impl/bind.arsh

# -l option
assert diff <(bind -l) <(for a in $LINE_EDIT.actions().sort() { echo $a; })

# -p option
var bindings: [(String,String)]
for a in $LINE_EDIT.bindings() {
    $bindings.add($a)
}
$bindings.sortBy(function(a,b) => $a._0.compare($b._0))
assert diff <(bind -p) <(for a in $bindings{ echo "\"${a._0}\": ${a._1}"; })

# -q option
assert "$(bind -q backward-word)" == '"alt+b"
"alt+left"'
assert "$(bind -q hogehoge)".empty()

# add
assert !(bind -p | grep 'ctrl+g')
assert bind "ctrl+g" backward-word
assert "$(bind -q backward-word)" == '"alt+b"
"alt+left"
"ctrl+g"'
assert bind -p | grep 'ctrl+g'

# -r option
assert bind -r "ctrl+g"
assert !(bind -p | grep 'ctrl+g')
assert "$(bind -q backward-word)" == '"alt+b"
"alt+left"'
assert bind -r "ctrl+g"  # remove already removed keycode


# invalid option
assert "$(bind -W 2>&1)" == "bind: invalid option: -W
See \`bind --help' for more information."
assert $? == 2

assert "$(bind -r 2>&1)" == "bind: -r option needs argument
See \`bind --help' for more information."
assert $? == 2

assert "$(bind -pl 2>&1)" == "bind: -l option is not allowed after -p option
See \`bind --help' for more information."
assert $? == 1

assert "$(bind ^G 2>&1)" == "bind: require ACTION argument after KEYCODE argument
See \`bind --help' for more information."
assert $? == 1

assert "$(bind ^G "" 2>&1)" == "bind: ACTION argument must not be empty
See \`bind --help' for more information."
assert $? == 1


# error
assert "$(bind ^G hogehoge 2>&1)" == "bind: undefined edit action: \`hogehoge'
See \`bind --help' for more information."

true