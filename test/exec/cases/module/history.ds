
source ../../../../share/arsh/modules/repl_impl/history
$HISTORY.clear()


# default value
assert $HISTFILE == "$DATA_HOME/ydsh_history"

# invalid option
history -x
assert $? == 2

assert "$(history -xz 2>&1)" == "history: -xz: invalid option
usage: history [-h] [-c] [-d offset] or history -s ARGs or history -rw [file]"

# append
$HISTSIZE = 100

assert $HISTORY.empty()
history -s hello world
assert $HISTORY.size() == 1
assert $HISTORY[0] == 'hello world'

# ignore history starts with space
history -s '  hoge'
assert $HISTORY.size() == 1
assert $HISTORY[0] == 'hello world'

history -s $'\thoge'
assert $HISTORY.size() == 1
assert $HISTORY[0] == 'hello world'

# ignore history match HISTIGNORE
assert $HISTIGNORE! =~ 'history | nl'
history -s 'history | nl'
assert $HISTORY.size() == 1
assert $HISTORY[0] == 'hello world'

# clear
history -c
assert $HISTORY.empty()

# print all
let OLD_IFS = $IFS
function assertEach($expect : [String], $actual : [String]) {
    assert $expect.size() == $actual.size() : "size: ${$expect.size()} != ${$actual.size()}"
    let size = $expect.size()
    for(var i = 0; $i < $size; $i++) {
        assert $expect[$i] == $actual[$i] : "expect[$i] = ${$expect[$i]}, actual[$i] = ${$actual[$i]}"
    }
}

for $s in "abcde" {
    history -s $s
}

$IFS = $'\n'
$assertEach(["a",
             "b",
             "c",
             "d",
             "e"], $(history))

# print latest entry
for $s in "abcde" {
    history -s ${s}@
}

$assertEach(["a@",
             "b@",
             "c@",
             "d@",
             "e@"], $(history 5))

# print out of range
$assertEach(["a",
             "b",
             "c",
             "d",
             "e",
             "a@",
             "b@",
             "c@",
             "d@",
             "e@"], $(history 500))

# invalid number
history hoge
assert $? == 1
assert "$(history hoge 2>&1)" == "history: hoge: numeric argument required"
true

# too many arg
history hoge
assert $? == 1
assert "$(history hoge 2 2>&1)" == "history: too many arguments"
true

# delete
$HISTSIZE = 10
history -c

for $s in "abcdefghij" {
    history -s $s
}

history -d 3 -d 5
$assertEach(["a",
             "b",
             "c",
             "d",
             "f",
             "g",
             "h",
             "i",
             "j"], $(history))

# delete history, but missing number
history -d 3 -d
assert $? == 2
assert "$(history -d 2>&1)" == "history: -d: option requires argument"
true

# delete history, but invalid number
history -d hoge
assert $? == 1
assert "$(history -d hoge 2>&1)" == "history: hoge: history offset out of range"
true

# delete history, but out of range
history -d 999999
assert $? == 1
assert "$(history -d 999999 2>&1)" == "history: 999999: history offset out of range"
true

# delete history, but out of range
history -d 0
assert $? == 1
assert "$(history -d 0 2>&1)" == "history: 0: history offset out of range"
true


# load history
source ../../_module4test/temp.ds as temp
history -c
$HISTFILE = $temp.file()

var prefix = $RANDOM
for $e in 'abcde' {
    echo $prefix $e >> $HISTFILE
}

history -r
$assertEach(["$prefix a",
             "$prefix b",
             "$prefix c",
             "$prefix d",
             "$prefix e"], $(history))

# load invalid file
history -c
history -r hfurehfurefewafzxc
$assertEach(new [String](), $(history))

# load specified file
var fileName = $temp.file()
for $e in 'abcde' {
    echo @@ $e >> $fileName
}

history -c
history -r $fileName
$assertEach(["@@ a",
             "@@ b",
             "@@ c",
             "@@ d",
             "@@ e"], $(history))

# save to specified file
history -c
echo -n > $fileName
history -s hello history $prefix
history -w $fileName
history -c
history -r $fileName
assert $HISTORY.size() == 1
assert $HISTORY[0] == "hello history $prefix"

# save to default file
history -c
echo -n > $HISTFILE
history -s hello history $prefix 1
history -s hello history $prefix 2
history -w
history -c
history -r
assert $HISTORY.size() == 2
assert $HISTORY[0] == "hello history $prefix 1"
assert $HISTORY[1] == "hello history $prefix 2"

# save and load
history -c
history -w -r
assert $? == 1
assert "$(history -w -r 2>&1)" == "history: cannot use more than one of -rw"
true
