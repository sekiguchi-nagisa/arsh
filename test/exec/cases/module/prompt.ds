# for prompt string

source ../../../../share/arsh/modules/prompt

function dirname($s : String) : String {
    if $s.startsWith($HOME) {
        var d = '~'
        $d += $s.slice($HOME.size())
        return $d
    }
    return $s;
}

# preserve reply
$reply['aaaaa'] = '1234567'
assert $reply.size() == 1
$renderPrompt('\u')
assert $reply.size() == 1
$reply['aaaaa'] == '1234567'


# interpret
assert $renderPrompt('hello\!!') == "hello\!!"
assert $renderPrompt('hello\cworld') == "hello\cworld"
assert $renderPrompt('\H') == "$(uname -n)"
assert $renderPrompt('\\H') == '\H'
assert $renderPrompt('\h') == "$(uname -n)".split('.')[0]
assert $renderPrompt('\n') == $'\n'
assert $renderPrompt('\\n') == '\n'
assert $renderPrompt('\\\n') == $'\\\n'
assert $renderPrompt('\r') == "$(echo -e '\r')"
assert $renderPrompt('\s') == "$(basename $0)"
assert $renderPrompt('\u') == "$(whoami)"
let OLD_USER = $USER
$USER=""
assert($renderPrompt('\u') == "$(whoami)")
$USER = $OLD_USER

assert($renderPrompt('\w') == $dirname($PWD))
assert $renderPrompt('\\w') == '\w'

$PWD = '/'
assert($renderPrompt('\w') == "/")
assert($renderPrompt('\W') == "/")
assert($renderPrompt('\\W') == "\W")
unsetenv PWD
cd ~
assert($renderPrompt('\w') == "~")
assert($renderPrompt('\W') == "~")
cd ~
assert($renderPrompt('\w') == "~")
assert($renderPrompt('\W') == "~")

assert($renderPrompt('\0101\066') == "A6")    # octal number
assert($renderPrompt('\x09\x7E') == $'\t~')   # hex number
assert($renderPrompt('\x9\x7e') == $'\t~')    # hex number
assert($renderPrompt('\xX') == '\xX')         # invalid hex number

let V = $renderPrompt('\V')
let v = $renderPrompt('\v')
assert($V.startsWith($v))
assert($V.startsWith($v + "."))

var u = $renderPrompt('\$')
if("$(id -u)" == "$(id -u root)") { # root
    assert($u == '#')
} else {    # non-root
    assert($u == '$')
}

assert($renderPrompt('\\') == '\')
assert $renderPrompt( '\a') == $'\a'   # bell
assert($renderPrompt('hoge') == "hoge")
assert($renderPrompt('\|') == "\|")    # meaningless backslash

{
    var ss = $renderPrompt('\D{%N}=\D{%N}').split('=')
    assert $ss.size() == 2
    assert $ss[0] == $ss[1]
    $ss = $renderPrompt('\D{%N)T%N}').split(')T')
    assert $ss.size() == 2
    assert $ss[0] == $ss[1]

    assert $renderPrompt('\D{)T}') == ')T'
    assert $renderPrompt('\D{%1}') == '%1'
}

# escape sequence
var e = $renderPrompt('\[\e[32m\]')
assert($e.size() == 5)
assert($e[0] == $'\033')
assert($e[1] == '[')
assert($e[2] == '3')
assert($e[3] == '2')
assert($e[4] == 'm')

# prompt command
assert prompt
assert prompt ''
assert !prompt -g
assert $? == 2

assert prompt -h | grep 'usage: prompt \[-h\] \[--help\] \[prompt\]'
assert prompt --help | grep 'usage: prompt \[-h\] \[--help\] \[prompt\]'
assert prompt -g 2>&1 > /dev/null | grep 'usage: prompt \[-h\] \[--help\] \[prompt\]'

assert "$(prompt '\H')" == "$(uname -n)"
assert "$(prompt -- -h)" == "-h"
assert "$(prompt -- --help)" == "--help"