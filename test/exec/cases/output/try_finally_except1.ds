# RUN: exec $cmd $self
# STATUS: 127

# throw in finally/defer
function h() {
    try {
        1 / 0   # ArithmeticError
    } finally {
        [12][34] # not ignore previously raised error
        assert($false)
    }
}
var ex = 34 as Any
try {
    $h()
} catch(e) {
    $ex = $e
}
assert($ex is ArithmeticError)
assert ($ex as Error).suppressed().size() == 1
assert ($ex as Error).suppressed()[0] is OutOfRangeError
assert ($ex as Error).suppressed()[0].lineno() == 9

var count = 0
function g() {
    try {
        1%0
    } finally {
        try {
            [34][45]
        } catch e : OutOfRangeError { # catch error within finally
            $count++
        }
    }
}
$ex = 34
try {
    assert $count == 0
    $g()
} catch e {
    $ex = $e
}
assert $ex is ArithmeticError
assert $count == 1
assert ($ex as ArithmeticError).suppressed().empty()

function f() {
    try {
        jfeifjreifjeir
    } finally {
        (function() : Int => exit)()  # ignore error in finally, even if exit
    }
}
$ex = 45
try {
    $f()
} catch e {
    $ex = $e
}
assert $ex is SystemError
assert ($ex as SystemError).suppressed().size() == 1
assert ($ex as SystemError).suppressed()[0] is ShellExit
assert ($ex as SystemError).suppressed()[0].lineno() == 51

function ff() {
        try {
        echo ~fjerifejrif
    } finally {
        assert $false  # ignore error in finally, even if assertion failure
    }
}
$ex = 45
try {
    $ff()
} catch e {
    $ex = $e
}
assert $ex is TildeError
assert ($ex as Error).suppressed().size() == 1
assert ($ex as Error).suppressed()[0] is AssertionFailed
assert ($ex as Error).suppressed()[0].lineno() == 69

# ignore in subshell
assert $({
    shctl set errraise
    defer {
        false
    }
    /fejfar/fejir
}).empty()

# CHECKERR: [runtime error at subshell=1]
# CHECKERR: SystemError: execution error: /fejfar/fejir: command not found
# CHECKERR_RE:     from .+/test/exec/cases/output/try_finally_except1\.ds:89 '<toplevel>\(\)'
# CHECKERR: [note] the following exceptions are suppressed
# CHECKERR: ExecError: `false' command exits with non-zero status: `1'
# CHECKERR_RE:     from .+/test/exec/cases/output/try_finally_except1\.ds:87 '<toplevel>\(\)'