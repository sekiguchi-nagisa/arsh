
source expect.ds

$expect("$(ds -e echo hello 2>&1)", 0, "hello")

# invalid name
assert !exec $'ps\x00'
assert $? == 1
assert "$(exec $'ps\x00' 2>&1)" == "ydsh: exec: contains null characters: ps\x00"


# not found builtin command
$expect("$(ds -e hoghrere hello 2>&1)", 1, $'[runtime error]\nSystemError: execution error: hoghrere: command not found')

# sourced
$expect("$(ds -e shctl is-sourced 2>&1)", 1, "")

# fullname
$expect("$(ds -e shctl fullname exit)", 0, "")
$expect("$(ds -e shctl fullname ps)", 0, "")
$expect("$(ds -e shctl fullname _cmd_fallback_handler)", 1, "")

# command
$expect("$(ds -e command hoghrere hello 2>&1)", 1, $'[runtime error]\nSystemError: execution error: hoghrere: command not found')
$expect("$(ds -e command exit 999 2>&1)", 231, $'')

# eval
$expect("$(ds -e eval hoghrere hello 2>&1)", 1, $'[runtime error]\nSystemError: execution error: hoghrere: command not found')
$expect("$(ds -e eval exit 45 2>&1)", 45, $'')

# exit
$expect("$(ds -e exit 34 2>&1)", 34, $'')
$expect("$(ds -e exit 999 2>&1)", 231, $'')

# exec
$expect("$(ds -e exec 2>&1)", 0, '')
$expect("$(ds -e exec echo hello 2>&1)", 0, $'hello')
$expect("$(ds -e exec -a echo echo hello 2>&1)", 0, 'hello')  # -a PROGNAME

# default env
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv SHLVL)" == "1"' 2>&1)", 0, '')
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv PATH)" == "/bin:/usr/bin:/usr/local/bin"' 2>&1)", 0, '')
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv LOGNAME)" == "$(basename ~)"' 2>&1)", 0, '')
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv USER)" == "$(basename ~)"' 2>&1)", 0, '')
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv HOME)" == "$(echo ~)"' 2>&1)", 0, '')
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv _)" == "$(command -v printenv)"' 2>&1)", 0, '')
$expect("$(ds -e exec -c $YDSH_BIN -c 'assert "$(printenv PWD)" == "$(printenv OLDPWD)"' 2>&1)", 0, '')

if $OSTYPE =~ $/cygwin/i {
    $expect("$(ds -e exec -c $YDSH_BIN -c 'assert (checkenv WINDIR)' 2>&1)", 0, '')
    $expect("$(ds -e exec -c $YDSH_BIN -c 'assert (checkenv SYSTEMROOT)' 2>&1)", 0, '')
    $expect("$(ds -e exec -c $YDSH_BIN -c 'assert $(printenv).size() == 10' 2>&1)", 0, '')
} else {
    $expect("$(ds -e exec -c $YDSH_BIN -c 'assert $(printenv).size() == 8' 2>&1)", 0, '')
}

# invalid option
$expect("$(ds -e exec -u 2>&1)", 2, $'ydsh: exec: -u: invalid option\nexec: exec [-c] [-a name] file [args ...]')