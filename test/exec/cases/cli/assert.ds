
source $SCRIPT_DIR/expect.ds

# no assert
assert ds --disable-assertion -c 'assert (12/0 == 12)'
assert ds -c 'shctl unset assert; assert $false'

# assert with message
var cmd = "assert
(false)    :
    \"hello assertion\""

var msg = "[runtime error]
Assertion Error: hello assertion
    from (string):2 '<toplevel>()'"

$expect("$(ds -c $cmd 2>&1)", 1, $msg)

# assert with message (power assert)
$msg = "[runtime error]
Assertion Error: failed
binary expression \`<LHS> =~ <RHS>' is false
  <LHS>: String = $OSTYPE
  <RHS>: Regex = mac
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert $OSTYPE =~ $/mac/ : "failed"' 2>&1)", 1, $msg)

$msg = "[runtime error]
Assertion Error: not Error type
binary expression \`<EXPR> is <TYPE>' is false
  <EXPR>: Int
  <TYPE>: Error
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert 23 is Error : "not Error type"' 2>&1)", 1, $msg)


# assert without message
$msg = "[runtime error]
Assertion Error: \`\$false'
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert $false' 2>&1)", 1, $msg)

# assert without message (power assert)
$msg = "[runtime error]
Assertion Error: \`34 == 43'
binary expression \`<LHS> == <RHS>' is false
  <LHS>: Int = 34
  <RHS>: Int = 43
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert 34 == 43' 2>&1)", 1, $msg)

$msg = "[runtime error]
Assertion Error: \`\$SIG_DFL == \$SIG_IGN'
binary expression \`<LHS> == <RHS>' is false
  <LHS>: (Signal) -> Void = function(SIG_DFL)
  <RHS>: (Signal) -> Void = function(SIG_IGN)
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert $SIG_DFL == $SIG_IGN' 2>&1)", 1, $msg)

$msg = "[runtime error]
Assertion Error: \`(\"\") as Any is Float'
binary expression \`<EXPR> is <TYPE>' is false
  <EXPR>: String
  <TYPE>: Float
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert ("") as Any is Float' 2>&1)", 1, $msg)

$msg = "[runtime error]
Assertion Error: \`\"faf\".toFloat() is Float'
binary expression \`<EXPR> is <TYPE>' is false
  <EXPR>: (invalid)
  <TYPE>: Float
    from (string):1 '<toplevel>()'"

$expect("$(ds -c 'assert "faf".toFloat() is Float' 2>&1)", 1, $msg)