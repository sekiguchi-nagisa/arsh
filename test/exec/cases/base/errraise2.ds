
fail() {
    var s = $1.toInt() ?? 
      { false; 255; }
    return $s
}

function assertStatus($s : Int, $e : Any, $ln : Int) {
    assert $e is ExecError
    var m = ($e as ExecError).message()
    var lineno = ($e as ExecError).lineno()
    var r = $/\d+/.match($m)
    var actual = $r!.group(0)!.toInt()!
    assert $s == $actual
    assert $lineno == $ln
}





shctl set errraise

## defer
var ex = 34 as Any
try {
    defer {
        sh -c 'exit 99'
    }
} catch $e { $ex = $e; }
$assertStatus(99, $ex, 28)

## finally
$ex = 34
try {
    try {
        true
    } finally {
        fail 123
    }
} catch $e { $ex = $e; }
$assertStatus(123, $ex, 39)

## job
var j1 = sh -c 'exit 56' &
assert $j1.wait() == 56

$j1 = {
    true
    fail 123
    exit 0
} &
assert $j1.wait() == 123

$j1 = {
    true
    fail 188
    exit 0
} &!
assert $j1.wait() == 188

$j1 = coproc {
    true
    sh -c 'exit 10'
    fail 0
}
assert $j1.wait() == 10

## job-builtin
$ex = 34
try {
    sh -c 'exit 56' &
    wait
} catch $e { $ex = $e; }
$assertStatus(56, $ex, 73)

## proc-sub
$ex = 34
try {
    $? = 0
    <(exit 145)
    >(exit 167)
} catch $e { $ex = $e; }
assert $ex is Int
assert $? == 0

## command sub
$ex = 34
try {
    var aa = "$(false)".size() + 435
} catch $e { $ex = $e; }
$assertStatus(1, $ex, 90)

$ex = 34
try {
    $(
        sh -c 'exit 145').size()
    assert $false
} catch $e { $ex = $e; }
$assertStatus(145, $ex, 96)

$ex = 34
try {
    $({
        $? = 111;
    }).size()
        assert $false
} catch $e { $ex = $e; }
$assertStatus(111, $ex, 104)

$ex = 34
try {
    $({
        true
        call exit 88
        true
    }).size()
        assert $false
} catch $e { $ex = $e; }
$assertStatus(88, $ex, 113)

## pipeline
$ex = 34
try {
    true | 
      false
} catch $e { $ex = $e; }
$assertStatus(1, $ex, 125)

$ex = 34
try {
    true | 
      false |
        true
} catch $e { $ex = $e; }
$assertStatus(1, $ex, 132)

$ex = 34
try {
    true | false || true 
} catch $e { $ex = $e; }
assert $ex is Int
assert $? == 0

$ex = 34
try {
    false | true || true 
} catch $e { $ex = $e; }
assert $ex is Int
assert $? == 0

$ex = 34
try {
    true | 
      false |
        { true; }
} catch $e { $ex = $e; }
$assertStatus(1, $ex, 156)
assert $? == 0

## command sub with pipeline
$ex = 34
try {
    $(
        exit 67 | true)
} catch $e { $ex = $e; }
$assertStatus(67, $ex, 164)

$ex = 34
try {
    $(true | 
       sh -c "exit 167")
} catch $e { $ex = $e; }
$assertStatus(167, $ex, 171)

## background pipeline
var jj = { sh -c "exit 156"; true; } | false &
assert $jj.wait() == 1
assert $jj.status(0)! == 156
assert $jj.status(1)! == 1

true