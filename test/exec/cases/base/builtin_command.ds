# execute builtin command
assert(command echo "")

# execute external command
assert(command ls)

# execute external command using default path
hash -r
var OLD_PATH = $PATH

$PATH = ""

try {
    command ls
    assert $false
} catch $e {
    assert $? == 0
    assert $e is SystemError
}
##assert($? != 0)

assert(command -p ls)

$PATH = $OLD_PATH

hoge() {
    echo $@
}

# execute invalid command
var ex = 34 as Any
try {
    command hoge
} catch $e {
    $ex = $e
}
assert $ex is SystemError
assert ($ex as Error).message() == 'execution error: hoge: command not found'

command $'ls\x00A'
assert $? == 1
assert "$(command $'ls\x00A' 2>&1)" == 'builtin_command.ds:42: command: contains null characters: ls\x00A'

# show command information
hash -r
assert("$(command -v env)" == "/usr/bin/env") # external command
assert command -v ls
assert("$(command -v cd)" == "cd")          # builtin
assert command -v cd
assert("$(command -v hoge)" == "hoge")      # user-defined-command
assert command -v hoge

assert("$(command -v hfiureaf)" == "")      # invalid
command -v hfueirf
assert($? == 1)

assert(command -v hferure cd hoge fjer)     # multiple
command -v hferure fhaueirnv
assert($? == 1)

# show detailed information
hash -r
assert("$(command -V env)" == "env is /usr/bin/env")                   # external
assert("$(command -V cd)" == "cd is a shell builtin command")       # builtin
assert "$(command -V call)" == "call is a shell builtin command"
assert "$(command -V eval)" == "eval is a shell builtin command"
assert "$(command -V exec)" == "exec is a shell builtin command"
assert "$(command -V command)" == "command is a shell builtin command"
assert("$(command -V hoge)" == "hoge is a user-defined command")   # user-defined
env 2>&1 > /dev/null
assert("$(command -V env)" == "env is hashed (/usr/bin/env)")          # hashed

assert("$(command -V hfiureaf 2>&1)" ==
       "builtin_command.ds:73: command: hfiureaf: not found")       # invalid
command -V hfueirf
assert($? != 0)

assert("$(command -V . 2>&1)" ==
       "builtin_command.ds:78: command: .: not found")       # invalid
command -V .
assert($? != 0)

assert "$(command -V $'ls\x00' 2>&1)" == 'builtin_command.ds:83: command: ls\x00: not found' # invalid

assert(command -V hferure cd hoge fjer)                             # multiple
command -V hferure fhaueirnv
assert($? != 0)

# io error
if $OSTYPE == 'linux' {
    ## external
    assert "$(command -V ls 2>&1 > /dev/full)" =~ $/command: io error:.+/
    assert $? == 1
    ## builtin
    assert "$(command -V exit 2>&1 > /dev/full)" =~ $/command: io error:.+/
    assert $? == 1
    assert "$(command -V printf 2>&1 > /dev/full)" =~ $/command: io error:.+/
    assert $? == 1
    ## user-defined
    assert "$(command -V hoge 2>&1 > /dev/full)" =~ $/command: io error:.+/
    assert $? == 1
    ## dynamic registered
    assert "$({ $DYNA_UDCS['@@@'] = (){}; command -V @@@ 2>&1 > /dev/full; })" =~ $/command: io error:.+/
    assert $? == 1
}

# invalid option
assert(command -i 2>&1 | grep 'command: -i: invalid option$')
assert(command) # do nothing, but success

# help
assert help command | grep '^command: command \[-pVv] command \[arg ...]'
assert $PIPESTATUS[0] == 0 && $PIPESTATUS[1] == 0

assert command -h | grep '^command: command \[-pVv] command \[arg ...]'
assert command -h | grep 'Execute COMMAND with ARGs excepting user defined command.'
assert $PIPESTATUS[0] == 2 && $PIPESTATUS[1] == 0

assert command --help | grep '^command: command \[-pVv] command \[arg ...]'
assert command --help | grep 'Execute COMMAND with ARGs excepting user defined command.'
assert $PIPESTATUS[0] == 2 && $PIPESTATUS[1] == 0