
# for sortBy method

function rev($x : Int, $y : Int) : Boolean {
    return $x >= $y
}

var a = [5,1,3,2,4]
assert $a.sortBy($rev) is [Int]
assert $a[0] == 5
assert $a[1] == 4
assert $a[2] == 3
assert $a[3] == 2
assert $a[4] == 1

function rev2($x : Int?, $y : Int?) : Boolean {
    return $x! >= $y!
}

var b = [4 as Int?, new Int?(), -1 as Int?]
var ex = 2 as Any
try { $b.sortBy($rev2); assert $false; } catch $e { $ex = $e; }
assert $ex is UnwrapError


var c = [3, -1, 2, 5, 1]

function rev3($x : Int, $y : Int) : Boolean {
    $c.sortBy($rev3)
    return $x < $y
}

$ex = 0
try { $c.sortBy($rev3); assert $false; } catch $e { $ex = $e; }
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'cannot modify array object during sortBy method'

# stable sort
function comp1($x : (Int, String), $y : (Int, String)) : Boolean {
    return $x._0 < $y._0
}

function comp2($x : (Int, String), $y : (Int, String)) : Boolean {
    return $x._1 < $y._1
}

var d = [
    (9, 'b'),
    (4, 'a'),
    (9, 'c'),
    (-1, 'a'),
]
$d.reverse()
$d.sortBy($comp2)
$d.sortBy($comp1)

assert $d[0]._0 == -1
assert $d[0]._1 == 'a'
assert $d[1]._0 == 4
assert $d[1]._1 == 'a'
assert $d[2]._0 == 9
assert $d[2]._1 == 'b'

# modify array size during sortBy
var aa = $(seq 1 100)
$ex = 34
try { $aa.sortBy(function(x,y)=> { $aa.add("ws"); $x < $y; }); }
catch e { $ex = $e;  }
assert ($ex as InvalidOperationError).message() == "cannot modify array object during sortBy method"

true