# builtin command
# redirect

var a = 'fjeir4g'
try {
    __gets < $a
    assert($false)
} catch($e : Error) {   # not found file
    assert($e is SystemError)   # derived from errno
    assert(echo ${$e.message()} | grep "io redirection error: $a, caused by")
}


# external command
# execution error

try {
    hfjhei94fg
    assert($false)
} catch($e : Error) {
    assert($e is SystemError)
    assert($e.message() == "execution error: hfjhei94fg: command not found")
}

try {
    ~/
    assert $false
} catch $e : Error {
    assert $e is SystemError
    import-env HOME
    assert echo ${$e.message()} | grep "execution error: $HOME/: Permission denied"
}

try {
    hfjhei94fg | grep ds
#    assert($false)
} catch($e : Error) {
    assert($e is SystemError)
    assert(echo ${$e.message()} | grep "execution error: hfjhei94fg:")
}

try {
    ls | grepfe4
#    assert($false)
} catch($e : Error) {
    assert($e is SystemError)
    assert(echo ${$e.message()} | grep "execution error: grepfe4:")
}


# redirect

try {
    cat < $a
    assert($false)
} catch($e : Error) {
    assert($e is SystemError)
    assert(echo ${$e.message()} | grep "io redirection error: $a, caused by")
}

var ex = 34 as Any
try {
    echo hello >> $'hello\x00world'
} catch $e {
    $ex = $e
}
assert $ex is SystemError


# command fallback
function fallback($a : String, $s : [String]) {
    echo fallback $a: $s
}
$CMD_FALLBACK = $fallback

hogehuga
assert $? == 0
assert hogehuga12 a b c | grep 'fallback hogehuga12: a b c'

..
assert $? == 0
assert .. 1 | grep 'fallback ..: 1'

assert "$(command -V hgoe)" == ""

true