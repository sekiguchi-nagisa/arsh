
# test for -A action

## variable
assert diff <(complete -A var) <(complete '$')
assert diff <(complete -A var 'C') <(complete '$C')
assert diff <(complete -A variable 'T') <(complete '$T')
assert diff <(complete -A variable '') <(complete '$')
assert complete -A var '$C' > /dev/null && $COMPREPLY.empty()   # not starts with '$'

## env
assert diff <(complete -A env 'X') <(complete 'importenv X')
assert diff <(complete -A env '') <(complete 'importenv ')

## signal
assert diff <(complete -A signal 'TT') <(echo TTIN && echo TTOU)

## user
assert diff <(complete -A user) <(complete 'echo ~' | sed -e 's/~//' | sed -e 's/\///' | LANG=C sort)

## group
export-env LC_ALL = 'C'
if $OSTYPE.lower() == "linux" {
    assert diff <(complete -A group) <(cat /etc/group | grep -v '^#' | cut -d : -f 1 | sort)
} elif $OSTYPE.lower() == "darwin" {
    assert diff <(complete -A group) <(dscacheutil -q group | grep name | cut -d " " -f 2 | sort | uniq)
}

## file
assert diff <(complete -A file) <(complete 'ls ')
assert diff <(complete -A file '') <(complete 'ls ')
assert diff <(complete -A file '.') <(complete 'ls .')
assert diff <(complete -A file -A tilde '~') <(complete 'ls ~')
assert $(complete -A file /fjafifafoifare/).empty()

## exec
assert diff <(complete -A exec /usr/bin/) <(complete '/usr/bin/')

## directory
assert diff <(complete -A dir /usr/) <(complete '/usr/' | grep '.*/$')
assert diff <(complete -A dir './') <(complete 'ls ./' | grep '.*/$')

## module
assert diff <(cd ~/ && complete -A module '') <(cd ~/ && complete 'source ')
assert diff <(complete -A module '/') <(cd ~/ && complete 'source /')
assert diff <(complete -A tilde -A module '~/') <(cd ~/ && complete 'source ~/')

## keyword
let stmt = ['new', '"', '$(', '>(', '<(', '@(', '(', '[', '{',
            'do', 'for', 'if', 'case', 'try', 'while', 'function',
            'break', 'continue', 'return', 'time',
            '!', '+', '-', 'throw', 'coproc',

            'typedef', 'assert', 'defer',
            'exportenv', 'importenv',
            'let', 'source', 'source!', 'var', ';']

let expr = ['new', '"', '$(', '>(', '<(', '@(', '(', '[', '{',
            'do', 'for', 'if', 'case', 'try', 'while', 'function',
            'break', 'continue', 'return', 'time',
            '!', '+', '-', 'throw', 'coproc']

assert diff <(complete -A expr_kw '') <(for $e in $expr { echo $e; } | sort)
assert diff <(complete -A expr_kw 'c') <(for $e in $expr { echo $e; } | grep '^c' | sort)
assert diff <(complete -A stmt_kw ) <(for $e in $stmt { echo $e; } | sort)
assert diff <(complete -A stmt_kw i) <(for $e in $stmt { echo $e; } | grep '^i' | sort)

## command
assert $(unsetenv PATH && complete -A external).empty()
assert $(setenv PATH= && complete -A external).empty()

assert diff <(complete -A builtin) <(help | cut -d ' ' -f 1 | sort)
assert diff <(complete -A builtin e) <(help | cut -d ' ' -f 1 | grep '^e' | sort)

hogehogehuga(){}
\{\}() {}
a\	b(){}

var udc = ["\\{\\}","a\$'\x09'b", "hogehogehuga", 'mod']
assert diff <(complete -A udc) <(for $e in $udc { echo $e; } | sort)
assert diff <(complete -A udc 'h') <(for $e in $udc { echo $e; } | grep '^h'| sort)
assert "$(complete -A udc 'e')".empty()
assert "$(complete -A dyna 'zz')".empty()
assert {complete -q -A cmd -- 'zzzzzzzzzaaaaaa'; $COMPREPLY; }.empty()
$DYNA_UDCS["zzzzzzzzzaaaaaa"] = (){}
$DYNA_UDCS["zzzzzzzzzaaaaaa@@@"] = (){}
assert diff <(complete -A cmd -- 'zzzzzzzzzaaaaaa') <(echo zzzzzzzzzaaaaaa && echo zzzzzzzzzaaaaaa@@@)
assert diff <(complete -A dyna -- 'zzzzzzzzzaaaaaa') <(echo zzzzzzzzzaaaaaa && echo zzzzzzzzzaaaaaa@@@)

assert diff <(complete -A command -A stmt_kw) <(complete ';')
assert diff <(complete -A command -A stmt_kw l) <(complete 'l')
assert diff <(complete -A command -A stmt_kw c) <(complete 'c')
assert diff <(complete -A type) <(complete '34 as ')
assert diff <(complete -A type S) <(complete '34 as S')

## specify module
source $SCRIPT_DIR/../../_module4test/comp.ds as mod
assert diff <(complete -m $mod -A udc ) <(for $e in ['hogehoge', 'zzzaaa123'] { echo $e; })
assert diff <(complete -m $mod -A var 'u') <(for $e in ['udc'] { echo $e; })
assert diff <(complete -m $mod -A var 'g') <(for $e in ['global'] { echo $e; })
assert diff <(complete -m $mod '$g' ) <(for $e in ['global'] { echo $e; })
assert diff <(complete -m $MODULE  -A udc) <(for $e in $udc { echo $e; } | sort)
assert $(complete -m '' '$g').empty()  # if specify empty string, use current module
assert diff <(complete -m '' -A udc) <(for $e in $udc { echo $e; } | sort)

### complete module from SCRIPT_DIR
assert diff <(cd && complete -m $mod "source ../_module4test/inli") \
            <(for $e in @(inlined{1,2,3,4}.ds) { echo $e; })
assert diff <(cd && complete -m $mod "source ../_module4test/cycle.ds as mod_cycle; \$mod_cy") \
            <(echo mod_cycle)   # recovery error in module, and complete

### if has no valid script dir(builtin, root module), use CWD
assert $(cd && complete -m ${$/\d+/.replace($mod as String, "1")} 
        "source ../_module4test/inli").empty()
assert $? == 0
assert diff <(cd $SCRIPT_DIR/../ && complete -m ${$/\d+/.replace($mod as String, "1")} 
              "source ../_module4test/inli") \
            <(for $e in @(inlined{1,2,3,4}.ds) { echo $e; })

## options
assert "$({ complete -q ';'; assert !$COMPREPLY.empty(); })".empty();
assert complete -s 'var';
assert $COMPREPLY.size() == 1 && $COMPREPLY[0] == 'var '

## -s option
### variable
assert diff <(complete -s '$OSTYP') <(echo 'OSTYPE')
assert diff <(complete -s '"$OSTYP') <(echo 'OSTYPE')
assert diff <(complete -s 'echo $OSTY') <(echo 'OSTYPE ')
### env
assert diff <(complete -s 'importenv SHLVL') <(echo 'SHLVL ')
### member
assert diff <(complete -s '1234.ab') <(echo 'abs')
assert diff <(complete -s '(34,)._0') <(echo '_0')
### type
assert diff <(complete -s '1234 as Stri') <(echo 'String')
### keyword
assert diff <(complete -s 'whil') <(echo 'while ')
assert diff <(complete -s 'for aaa i') <(echo 'in ')
### file name
assert diff <(complete -s '/bi') <(echo 'bin/')
assert diff <(complete -s 'echo /bi') <(echo 'bin/')
if $OSTYPE !~ $/cygwin/i {
    assert diff <(complete -s '~roo') <(echo '~root/')
    assert diff <(complete -s 'echo ~roo') <(echo '~root/')
}
### user-defined comp
#### nospace
$COMP_HOOK = function(m,s,c) => ['echo ']
complete -s -- "echo " &> /dev/null;
assert $COMPREPLY.size() == 1
assert $COMPREPLY[0] == "echo "

$COMP_HOOK = function(m,s,c) => ['echo \\ ']
complete -s -- "echo " &> /dev/null;
assert $COMPREPLY.size() == 1
assert $COMPREPLY[0] == 'echo \\ '

#### space
$COMP_HOOK = function(m,s,c) => ['echo\ ']
complete -s -- "echo " &> /dev/null;
assert $COMPREPLY.size() == 1
assert $COMPREPLY[0] == 'echo\  ' : $COMPREPLY[0]

$COMP_HOOK = function(m,s,c) => ['echo\\\\\ ']
complete -s -- "echo " &> /dev/null;
assert $COMPREPLY.size() == 1
assert $COMPREPLY[0] == 'echo\\\\\  '


## invalid
assert "$(complete -A 2>&1)" == "ydsh: complete: -A: option requires argument"
assert !complete -A
assert $? == 1

assert "$(complete -A hgorahe 2>&1)" == "ydsh: complete: hgorahe: invalid action
complete: complete [-A action] [-m descriptor] [-qs] line"
assert !complete -A fjairfaj
assert $? == 2

assert "$(complete -m $MODULE$'\000' 2>&1)" == "ydsh: complete: ${MODULE}\x00: unrecognized module descriptor"
assert "$(complete -m $MODULE"3q4324" 2>&1)" == 
    "ydsh: complete: ${MODULE}3q4324: unrecognized module descriptor"
assert !complete -m ${MODULE}3q4324
assert $? == 1
assert "$(complete -m 'TMD(34)' 2>&1)" == "ydsh: complete: TMD(34): unrecognized module descriptor"
assert "$(complete -m 'TMD(hoge)' 2>&1)" == "ydsh: complete: TMD(hoge): unrecognized module descriptor"

## help
assert help complete | grep '^complete: complete \[-A action] \[-m descriptor] \[-qs] line'
assert $PIPESTATUS[0] == 0 && $PIPESTATUS[1] == 0

assert complete -h| grep '^complete: complete \[-A action] \[-m descriptor] \[-qs] line'
assert $PIPESTATUS[0] == 2 && $PIPESTATUS[1] == 0

assert complete --help| grep '^complete: complete \[-A action] \[-m descriptor] \[-qs] line'
assert $PIPESTATUS[0] == 2 && $PIPESTATUS[1] == 0

true