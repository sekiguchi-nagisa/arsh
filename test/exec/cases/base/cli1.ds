
## empty options
[<CLI(verbose: $true)>]
typedef AAA() {
    var a = ""
}

assert (new AAA()) is CLI

var aa = new AAA()
assert $aa.name() == ''
$aa.setName("cmd1")
assert $aa.name() == 'cmd1'
assert $aa.usage() == "Usage: cmd1

Options:
  -h, --help  show this help message"

var ex = 24 as Any
$aa.setName('cmd1')
try { $aa.parse(['--help']); } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 0
assert ($ex as CLIError).message() == "Usage: cmd1

Options:
  -h, --help  show this help message"

## Flag/Option
[<CLI(verbose: $true)>]
typedef BBB() {
  [<Flag(
      short: "d", long: "debug", 
      help: "enable debug mode",
      stop: $false
  )>]
  var d = $false

  let tmp = "this is a temp"

  [<Option(help: "set output target", opt: $true, default: "/dev/stdout")>]
  var output : String?

  [<Option(help: "set timeout (default is 0)",
    placeholder: "MSEC")>]
  var timeout = 0

  [<Flag(short: 'v', long: 'version', stop: $true, help: 'show version')>]
  var version = $false
}

assert (new BBB()) is CLI

var bb = new BBB()
$bb.setName('cmd2')
assert $bb.usage() == "Usage: cmd2 [OPTIONS]

Options:
  -d, --debug        enable debug mode
  --output[=OUTPUT]  set output target
  --timeout MSEC     set timeout (default is 0)
  -v, --version      show version
  -h, --help         show this help message"

$bb.setName('cmd2')
assert $bb.parse(['-d', '--output=']) == 2
assert $bb.d
assert $bb.output! == ''
assert $bb.timeout == 0
assert !$bb.version

$bb = new BBB()
$bb.setName('cmd2')
assert $bb.parse(['--debug', '--output']) == 2
assert $bb.d
assert $bb.output! == '/dev/stdout'
assert $bb.timeout == 0
assert !$bb.version

$bb = new BBB()
$bb.setName('cmd2')
assert $bb.parse(['--output=./log.txt', '--timeout', '999', "reset"]) == 3
assert ! $bb.d
assert $bb.output! == './log.txt'
assert $bb.timeout == 999
assert !$bb.version

$bb = new BBB()
$bb.setName("cmd3")
assert $bb.parse(['--version', '--output=./log.txt', '--timeout', '999', "reset"]) == 1
assert !$bb.d
assert !$bb.output
assert $bb.timeout == 0
assert $bb.version

## Arg
[<CLI(verbose: $true)>]
typedef CCC() {
  [<Arg(required: $true, range:(120,-10))>]
  var aaa : Int?

  [<Arg>]
  var bbb : String?

  var dummy = "dummy"

  [<Arg(required: $true)>]
  var ccc : [String]

  [<Flag(short: 'd', long: "debug", help: "enable debug mode", store: $true)>]
  [<Flag(short: 'n', long: "no-debug", help: "disable debug mode", store: $false)>]
  var d = $false
}

assert (new CCC()) is CLI
var cc = new CCC()
$cc.setName("cmd3")
assert $cc.usage() == "Usage: cmd3 [OPTIONS] AAA [BBB] CCC...

Options:
  -d, --debug     enable debug mode
  -n, --no-debug  disable debug mode
  -h, --help      show this help message"

$cc.setName('cmd3')
assert $cc.parse(['-d', '--', '-2', '-3', '-4', '-5']) == 6
assert $cc.aaa! == -2
assert $cc.bbb! == '-3'
assert $cc.ccc.size() == 2
assert $cc.ccc[0] == '-4'
assert $cc.ccc[1] == '-5'

$cc = new CCC()
assert $cc.parse(['-d', '-n', '1', '@@', 'qqq']) == 5
assert !$cc.d
assert $cc.aaa! == 1
assert $cc.bbb! == '@@'
assert $cc.ccc.size() == 1
assert $cc.ccc[0] == 'qqq'

## short-usage
[<CLI(name: 'example', verbose: $false)>]
typedef DDD() {
    [<Option(required: $true, range:(120,-10))>]
  var aaa : Int?
}

var dd = new DDD()
assert $dd.name() == 'example'
assert $dd.usage('error', $true) == "error
Usage: example [OPTIONS]

Options:
  --aaa AAA
  -h, --help  show this help message"

assert $dd.usage('error', $false) == "error
See \`example --help' for more information."

$ex = 23
try { $dd.parse(['-h']); } catch e { $ex = $e; }  # get verbose help message even if verbose == $false
assert ($ex as CLIError).message() == "Usage: example [OPTIONS]

Options:
  --aaa AAA
  -h, --help  show this help message"

$ex = 34
try { $dd.parse(['-q']); } catch e { $ex = $e; }
assert ($ex as CLIError).message() == "invalid option: -q
See \`example --help' for more information."

[<CLI(name: "www")>]
typedef EEE() {
    [<Arg(required: $true, range:(120,-10))>]
  var aaa : Int?
}

$ex = 34
try { new EEE().parse(new [String]()); } catch e { $ex = $e; }
assert ($ex as CLIError).message() == "require \`AAA' argument
See \`www --help' for more information."