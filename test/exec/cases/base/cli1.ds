
## empty options
[<CLI()>]
typedef AAA() {
    var a = ""
}

assert (new AAA()) is CLI

var aa = new AAA()
assert $aa.name() == ''
$aa.setName("cmd1")
assert $aa.name() == 'cmd1'
assert $aa.usage() == "Usage: cmd1

Options:
  -h, --help  show this help message"

var ex = 24 as Any
try { $aa.parse(['--help']); } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 0
assert ($ex as CLIError).message() == "Usage: cmd1

Options:
  -h, --help  show this help message"

## Flag/Option
[<CLI>]
typedef BBB() {
  [<Flag(
      short: "d", long: "debug", 
      help: "enable debug mode"
  )>]
  var d = $false

  let tmp = "this is a temp"

  [<Option(help: "set output target", opt: $true, default: "/dev/stdout")>]
  var output : String?

  [<Option(help: "set timeout (default is 0)",
    placeholder: "MSEC")>]
  var timeout = 0
}

assert (new BBB()) is CLI

var bb = new BBB()
$bb.setName('cmd2')
assert $bb.usage() == "Usage: cmd2 [OPTIONS]

Options:
  -d, --debug        enable debug mode
  --output[=OUTPUT]  set output target
  --timeout MSEC     set timeout (default is 0)
  -h, --help         show this help message"

$bb.parse(['-d', '--output='])
assert $bb.d
assert $bb.output! == ''
assert $bb.timeout == 0

$bb = new BBB()
$bb.setName('cmd2')
$bb.parse(['--debug', '--output'])
assert $bb.d
assert $bb.output! == '/dev/stdout'
assert $bb.timeout == 0

$bb = new BBB()
$bb.setName('cmd2')
$bb.parse(['--output=./log.txt', '--timeout', '999'])
assert ! $bb.d
assert $bb.output! == './log.txt'
assert $bb.timeout == 999

## Arg
[<CLI>]
typedef CCC() {
  [<Arg(required: $true, range:(120,-10))>]
  var aaa : Int?

  [<Arg>]
  var bbb : String?

  var dummy = "dummy"

  [<Arg(required: $true)>]
  var ccc : [String]

  [<Flag(short: 'd', long: "debug", help: "enable debug mode")>]
  var d = $false
}

assert (new CCC()) is CLI
var cc = new CCC()
$cc.setName("cmd3")
assert $cc.usage() == "Usage: cmd3 [OPTIONS] AAA [BBB] CCC...

Options:
  -d, --debug  enable debug mode
  -h, --help   show this help message"

$cc.parse(['-d', '--', '-2', '-3', '-4', '-5'])
assert $cc.aaa! == -2
assert $cc.bbb! == '-3'
assert $cc.ccc.size() == 2
assert $cc.ccc[0] == '-4'
assert $cc.ccc[1] == '-5'