#$test($status = 0)

#var a = ["3", "43", "d"]
var a = ["43"]
$a.insert(0, "3")
$a.insert(2, "d")
assert($a.add("hello") is Array<String>)

assert($a[0] is String)
assert($a[0] == "3")
assert($a[1] == "43")
assert($a[2] == "d")
assert($a[3] == "hello")
var ex = 34 as Any
try { $a[5]; assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

try { $ex = 34; $a.insert(34, "1"); assert $false; } catch($e) { $ex = $e; }
assert($ex is OutOfRangeError)
$a.insert(-1, "1");
assert $a.size() == 5
assert $a[3] == "1"

$a[2] = "ho"
assert($a[2] == "ho")
$ex = 34
try { $a[5] = "hoge"; assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

assert $a.get(2)
assert ! $a.get(5)
assert $a.get(2)! == "ho"

assert($a.empty() == $false)
assert($a.size() is Int)
assert($a.size() == 5)


var b = new Array<Boolean>()

assert($b.size() == 0)
assert($b.empty() == $true)

$b.add($true)
assert($b.size() == 1)
assert($b[0])

assert($b.swap(0, $false))
assert($b[0] != $true)
$ex = 1
try { $b.swap(3, $true); assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

$b.clear()
assert($b.empty())

# stack op
$b.push($true)
assert($b.size() == 1)
assert($b.peek())
assert($b.pop())
assert($b.empty())
$ex = 34
try { $b.pop(); assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)
$ex = 2
try { $b.peek(); assert($false) } catch($e) { $ex = $e }
assert($ex is OutOfRangeError)

$b = new [Boolean]()
$b.unshift($true)
$b.unshift($false)
assert $b.size() == 2
assert !$b.shift()
assert $b.shift()
assert $b.empty()
$ex = 100
try { $b.shift(); assert $false; } catch $e { $ex = $e; }
assert $ex is OutOfRangeError


# slice
$b = [$true, $false, $false]
var bb = $b.slice(0, $b.size())
$b.clear()
assert $bb.size() == 3 && $b.size() == 0
{
    var r = [1,2,3].slice(3, 3)
    assert $r.empty()
}

var ee = 34 as Any
assert $bb.slice(0, 4).size() == 3
assert $bb[0]
assert !$bb[1]
assert !$bb[2]

assert $bb.slice(1) as String == [$false, $false] as String
assert $bb.slice(4).size() == 0

{
    var r = [1,2,3].slice(3)
    assert $r.empty()
}

assert [0, 1, 2, 3].slice(0, 2) as String == [0, 1] as String
assert [0].slice(0, -3).size() == 0

{
    var c = [1]
    var d = [2, 3]
    $c.addAll($d)
    assert $c.size() == 3
    assert $c[0] == 1
    assert $c[1] == 2
    assert $c[2] == 3

    $c.addAll($c)
    assert $c.size() == 3
}


# reverse
var rr = [1, 2, 3, 4, 5]
assert $rr.reverse() is [Int]
assert $rr.size() == 5
assert $rr[0] == 5
assert $rr[1] == 4
assert $rr[2] == 3
assert $rr[3] == 2
assert $rr[4] == 1
$rr.clear()
$rr.reverse()
assert $rr.empty()


# sort
var s1 = [4, 8, -9, -1, 78, 0, 2]
assert $s1.sort() is [Int]
assert $s1[0] == -9
assert $s1[1] == -1
assert $s1[2] == 0
assert $s1[3] == 2
assert $s1[4] == 4
assert $s1[5] == 8
assert $s1[6] == 78

var s2 = [$false, $true, $false]
$s2.sort()
assert !$s2[0]
assert !$s2[1]
assert $s2[2]

var s3 = ["a", "AA", "1"]
$s3.sort()
assert $s3[0] == "1"
assert $s3[1] == "AA"
assert $s3[2] == "a"

var s4 = [3.14, 0.0, -23.5, (0.0/0.0), 34.1/0.0, -0.0, -1000.0/0.0]
$s4.sort()
echo ${$s4}
# assert $s4[0].isInf()
# assert $s4[0] == -12.0/0.0
assert $s4[1] == -23.5
assert $s4[2] == -0.0
assert $s4[3] == 0.0
assert $s4[4] == 3.14
assert $s4[5] == 23.0/0.0
assert $s4[6].isNan()

var s5 = [$SIGINT, $SIGKILL, $SIGHUP]
$s5.sort()
assert $s5[0] == $SIGHUP
assert $s5[1] == $SIGINT
assert $s5[2] == $SIGKILL


# remove
var r2 = [3,4,5,6]
assert $r2.remove(2) == 5
assert $r2.remove(0) == 3
$ex = 34
try { $r2.remove(-10); assert false; } catch $e { $ex = $e; }
assert $ex is OutOfRangeError
$ex = 34
try { $r2.remove(5); assert false; } catch $e { $ex = $e; }
assert $ex is OutOfRangeError
assert $r2.remove(-1) == 6

# join
assert "1,2,".split(",").join(",") == "1,2,"
assert [[["h", "l"].join("e"), "lo"].join(), "world", "!!"].join(" ") == "hello world !!"
$ex = 12
try { ["hoge".toInt()].join("a"); assert false; } catch $e { $ex = $e; }
assert $ex is UnwrappingError

# copy
var cc1 = [3, 4, 6]
var cc2 = $cc1.copy()
$cc1.clear()
assert $cc1.empty()
assert $cc2.size() == 3
assert $cc2[0] == 3
assert $cc2[1] == 4
assert $cc2[2] == 6

# inheritance
assert([34, 43] is Array<Int>)
assert([34] is Any)

assert(new Array<Any>() is Array<Any>)
