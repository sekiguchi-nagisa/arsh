
# for error

[<CLI>]
typedef AAA() {
    [<Option(range: (10,-10), help: "count")>]
    var Call_Limit = 0

    [<Option(choice: ["error", "warn", "info", "debug"], 
      short: 'l', long: "level", opt: $true)>]
    var Level : String?
}

## range
var aa = new AAA()
assert $aa.parseOrExit("cmd1", ["--call-limit=10", "rest", "reset2"]) == 1
assert $aa.Call_Limit == 10

$aa = new AAA()
assert $aa.parseOrExit("cmd1", ["--call-limit", "-10"]) == 2
assert $aa.Call_Limit == -10

var ex = 34 as Any
$aa = new AAA()
try { $aa.parse("cmd1", ["--call-limit=11"]); } catch e { $ex = $e;}
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "invalid argument: \`11' for --call-limit option, must be [-10, 10]
Usage: cmd1 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message" : ($ex as CLIError).message()

$ex = 234
$aa = new AAA()
try { $aa.parse("cmd2", ["--call-limit=-11"]); } catch e { $ex = $e;}
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "invalid argument: \`-11' for --call-limit option, must be [-10, 10]
Usage: cmd2 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message" : ($ex as CLIError).message()

## choice
$aa = new AAA()
assert $aa.parse("cmd3", ["--level=debug"]) == 1
assert $aa.Level! == "debug"

$aa = new AAA()
$ex = 234
try { $aa.parse("cmd3", ["-ldebuG"]); } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "invalid argument: \`debuG' for -l option, must be {error, warn, info, debug}
Usage: cmd3 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message" : ($ex as CLIError).message()

# parseOrExit
## usage
assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--huga"])
  12/0  # always raise
} with 2>&1)" == "invalid option: --huga
Usage: cmd1 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 2

assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--call-limit"])
  12/0  # always raise
} with 2>&1)" == "--call-limit option needs argument
Usage: cmd1 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 2

## help
assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--help"])
  12/0  # always raise
} with 2>&1)" == "Usage: cmd1 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 0

## invalid
assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--call-limit=111"])
  12/0  # always raise
} with 2>&1)" == "invalid argument: \`111' for --call-limit option, must be [-10, 10]
Usage: cmd1 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 1

true