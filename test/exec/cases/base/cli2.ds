
# for error

[<CLI>]
typedef AAA() {
    [<Option(range: (10,-10), help: "count")>]
    var count = 0

    [<Option(choice: ["error", "warn", "info", "debug"], 
      short: 'l', long: "level", opt: $true)>]
    var level : String?
}

## range
var aa = new AAA()
$aa.parse("cmd1", ["--count=10"])
assert $aa.count == 10

$aa = new AAA()
$aa.parse("cmd1", ["--count", "-10"])
assert $aa.count == -10

var ex = 34 as Any
$aa = new AAA()
try { $aa.parse("cmd1", ["--count=11"]); } catch e { $ex = $e;}
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "invalid argument: \`11', must be [-10, 10]
Usage: cmd1 [OPTIONS]" : ($ex as CLIError).message()

$ex = 234
$aa = new AAA()
try { $aa.parse("cmd2", ["--count=-11"]); } catch e { $ex = $e;}
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "invalid argument: \`-11', must be [-10, 10]
Usage: cmd2 [OPTIONS]" : ($ex as CLIError).message()

## choice
$aa = new AAA()
$aa.parse("cmd3", ["--level=debug"])
assert $aa.level! == "debug"

$aa = new AAA()
$ex = 234
try { $aa.parse("cmd3", ["-ldebuG"]); } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "invalid argument: \`debuG', must be {error, warn, info, debug}
Usage: cmd3 [OPTIONS]" : ($ex as CLIError).message()

# parseOrExit
## usage
assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--huga"])
  12/0  # always raise
} with 2>&1)" == "invalid option: --huga
Usage: cmd1 [OPTIONS]"
assert $? == 2

assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--count"])
  12/0  # always raise
} with 2>&1)" == "need argument: --count
Usage: cmd1 [OPTIONS]"
assert $? == 2

## help
assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--help"])
  12/0  # always raise
} with 2>&1)" == "Usage: cmd1 [OPTIONS]

Options:
  --count COUNT               count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 0

## invalid
assert "$({
  var cli = new AAA()
  $cli.parseOrExit("cmd1", ["--count=111"])
  12/0  # always raise
} with 2>&1)" == "invalid argument: \`111', must be [-10, 10]
Usage: cmd1 [OPTIONS]"
assert $? == 1

true