
# for error

[<CLI(verbose: $true)>]
typedef AAA() {
    [<Option(range: (10,-10), help: "count")>]
    var Call_Limit = 0

    [<Option(choice: ["error", "warn", "info", "debug"], 
      short: 'l', long: "level", opt: $true)>]
    var Level : String?
}

## range
var aa = new AAA()
assert $aa.parseOrExit(["--call-limit=10", "rest", "reset2"]) == 1
assert $aa.Call_Limit == 10

$aa = new AAA()
assert $aa.parseOrExit(["--call-limit", "-10"]) == 2
assert $aa.Call_Limit == -10

var ex = 34 as Any
$aa = new AAA()
$aa.setName('cmd1')
try { $aa.parse(["--call-limit=11"]); } catch e { $ex = $e;}
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "cmd1: invalid argument: \`11' for --call-limit option, must be [-10, 10]
Usage: cmd1 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message" : ($ex as CLIError).message()

$ex = 234
$aa = new AAA()
$aa.setName('cmd2')
try { $aa.parse(["--call-limit=-11"]); } catch e { $ex = $e;}
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "cmd2: invalid argument: \`-11' for --call-limit option, must be [-10, 10]
Usage: cmd2 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message" : ($ex as CLIError).message()

## choice
$aa = new AAA()
assert $aa.parse(["--level=debug"]) == 1
assert $aa.Level! == "debug"

$aa = new AAA()
$ex = 234
$aa.setName('cmd3')
try { $aa.parse(["-ldebuG"]); } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "cmd3: invalid argument: \`debuG' for -l option, must be {error, warn, info, debug}
Usage: cmd3 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message" : ($ex as CLIError).message()

## xor
[<CLI>]
typedef BBB() {
  [<Flag(xor: 0)>]
  var aaa = $false

  [<Flag(xor: 0)>]
  var bbb = $false

  [<Option(xor: 63, required: $true)>]
  var count = 0

  [<Option(required: $true, xor: 63, default: $'aaa\x00bbb', opt: $true)>]
  var dir : String?
}
var bb = new BBB()
$bb.setName('cmd4')
$ex = 45
try { $bb.parse(['--count=12', '--aaa', '--dir']) } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "cmd4: --dir option is not allowed after --count option
See \`cmd4 --help' for more information."

$ex = 45
try { $bb.parse(['--count=12', '--bbb', '--count=999', '--aaa']) } catch e { $ex = $e; }
assert $ex is CLIError
assert ($ex as CLIError).status() == 1
assert ($ex as CLIError).message() == "cmd4: --aaa option is not allowed after --bbb option
See \`cmd4 --help' for more information."

$bb = new BBB()
$bb.setName('cmd5')
$ex = 45
try { $bb.parse(['--dir=12', '--aaa', '--dir']) } catch e { $ex = $e; }
assert $ex is Int
assert $bb.aaa
assert !$bb.bbb
assert $bb.count == 0
assert $bb.dir! == $'aaa\x00bbb'


# auto-gen option/arg name
[<CLI(verbose: $true)>]
typedef _AAA() {
    [<Option>]
    var camelCase = ""

    [<Option>]
    var Upper0C1Amel0Case = ""
}
assert new _AAA().usage() == "Usage: $0 [OPTIONS]

Options:
  --camel-case CAMEL_CASE
  --upper0-c1-amel0-case UPPER0_C1_AMEL0_CASE
  -h, --help                                   show this help message" : new _AAA().usage()


# parseOrExit
## usage
assert "$({
  var cli = new AAA()
  $cli.setName($'cmd1\x00@@')
  $cli.parseOrExit(["--huga"])
  12/0  # always raise
} with 2>&1)" == "cmd1${$'\x00'}@@: invalid option: --huga
Usage: cmd1${$'\x00'}@@ [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 2

assert "$({
  var cli = new AAA()
  $cli.parseOrExit(["--call-limit"])
  12/0  # always raise
} with 2>&1)" == "$ARG0: --call-limit option needs argument
Usage: $ARG0 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 2

## help
assert "$({
  var cli = new AAA()
  $cli.setName('cmd12')
  $cli.parseOrExit(["--help"])
  12/0  # always raise
} with 2>&1)" == "Usage: cmd12 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 0

## invalid
assert "$({
  var cli = new AAA()
  $cli.setName('cmd13')
  $cli.parseOrExit(["--call-limit=111"])
  12/0  # always raise
} with 2>&1)" == "cmd13: invalid argument: \`111' for --call-limit option, must be [-10, 10]
Usage: cmd13 [OPTIONS]

Options:
  --call-limit CALL_LIMIT     count
  -l[LEVEL], --level[=LEVEL]
  -h, --help                  show this help message"
assert $? == 1

true