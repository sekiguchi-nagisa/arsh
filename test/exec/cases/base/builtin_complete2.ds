
function assertArray($x : Array<String>, $y : Array<String>) {
    assert diff <(for $a in $x { echo $a; }) <(for $a in $y { echo $a; })
}

{ import-env _ : "a" }    # force set env '_'

# complete global variable name
{
    var gvars = [
        '#', '$',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '?', '@', 'CMD_FALLBACK', 'COMPREPLY', 'COMP_HOOK', 'DATA_DIR', 'EDIT_HOOK',
        'EUID', 'FALSE', 'False', 'IFS', 'MACHTYPE', 'MODULE', 'MODULE_DIR',
         'ON_ASSERT', 'ON_ERR', 'ON_EXIT', 'OSTYPE', 'PID', 'PIPESTATUS', 'PPID',
        'RANDOM', 'REPLY', 'SCRIPT_DIR', 'SCRIPT_NAME', 'SECONDS', 'SIG', 'SIG_DFL', 'SIG_IGN',
        'STDERR', 'STDIN', 'STDOUT', 'TERM_HOOK',
        'TRUE', 'True', 'UID', 'YDSH_BIN', 'YDSH_VERSION',
        'assertArray', 'false', 'reply', 'true', 'types',
    ]

    $assertArray($gvars, $(complete '$'))

    var gvars2 = [
        'PID', 'PIPESTATUS', 'PPID',
    ]

    $assertArray($gvars2, $(complete '$P'))
    $assertArray(new Array<String>(), $(complete '$P '))
    $assertArray($gvars, $(complete '$($'))
    $assertArray($gvars2, $(complete '$($P'))
    $assertArray($gvars, $(complete '"$'))
    $assertArray($gvars2, $(complete '"$P'))
    $assertArray($gvars, $(complete '"1234$'))
    $assertArray($gvars2, $(complete '"sss$P'))
    $assertArray($gvars, $(complete 'echo $'))
    $assertArray($gvars2, $(complete 'echo $P'))
    $assertArray($gvars, $(complete 'echo hoge$'))
    $assertArray($gvars2, $(complete 'echo hoge$P'))
    $assertArray($gvars2, $(complete '($P'))
    $assertArray($gvars2, $(complete '{$P'))
    $assertArray($gvars2, $(complete '$f($P'))

    # scope
    var gvar3 = [
        'PID', 'PIPESTATUS', 'PPID', 'PZ0', 'PZ1', 'PZ2'
    ]
    $assertArray($gvar3, $(complete '
        var PZ2 = ls -la && $true
        {
            var PZ0 = 34 + 34 / 34
            {
                var PZ1 = "hello"
                echo hello$P'))

    $assertArray($gvar3, $(complete '
        function f($PZ0 : String, $PZ1 : Int) {
            var PID = "he;;p"
            { var PZ34 = 34; $PZ34; }
            { export-env PZ2 = "xterm"; $P'))

    $assertArray($gvar3, $(complete '
        hoge() {
            var PID = "he;;p"
            var PZ0 = 34.1
            var PZ1 = $false
            { export-env PZ2 = "xterm"; 
                {  var PZ3 = 34 + $P'))

    $assertArray(['e', 'ee'], $(complete '
        try {
            throw 34 / 0;
        } catch $ex : String {
            throw new Error($ex)
        } catch($e : ArithmeticError) {
            var ee = 34 as Any
            var eee = $e'))

    $assertArray($gvar3, $(complete '
        for(var PZ2 = 0; $PZ2 < 100; $PZ2++) {
            let PZ0 = $false
            {
                import-env PZ1 : "dummy"
                var PZ4 = 45 * $P'))
    
    $assertArray(['a', 'aa', 'assertArray'], $(complete '
        for $a in $(seq 1 100) {
            var aa = 34
            $aa + $a'))

    $assertArray(['AA', 'AAA'], $(complete '
        AAA=1234 AA=$false BBB=$A'))

    $assertArray($gvar3, $(complete '
        PZ0=1234 PZ1=$false \
        PZ2=${PZ0}hger \
        {
            $P'))
}

# env name
unsetenv COMP_WORDBREAKS
setenv 'ZZZ(23)=hello'

$assertArray($(env | while(read -r) {
                        var ss = $REPLY.split('=');
                        $REPLY.indexOf('=') > -1 && echo $ss[0];
                     } | sed 's/(/\\(/' | sed 's/)/\\)/' ).sort(), $(complete 'import-env '))
$assertArray($(env | grep ^P | while(read -r) {
                                    var ss = $REPLY.split('=');
                                    $REPLY.indexOf('=') > -1 && echo $ss[0];
                               } | sed 's/(/\\(/' | sed 's/)/\\)/' ).sort(), $(complete 'import-env P'))


# field/method
$assertArray(["_0", "_1"], $(complete "(1,2)."))
$assertArray(["sort", "sortWith"], $(complete '$@.so'))
$assertArray(["compAdd", 'compDelegate', 'load', 'scriptDir', 'scriptName'], $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/completion as CP; \$CP."))
$assertArray(["hello", "hey", "hey2", "hey3", 'load', 'scriptDir', 'scriptName'],
             $(complete "source $SCRIPT_DIR/../../_module4test/inlined2.ds as mod; \$mod."))
$assertArray(['abs', "toFloat"], $(complete '
    var a = 334.4 as Any
    if $a is Float {
        echo $a is Float
    } elif $a is Int {
        var b = 45.0
        $b * $a.'))
$assertArray(['close', 'dup'], { complete '$STDIN.' > /dev/null; $COMPREPLY; })
$assertArray(['abs', 'toFloat'], $(complete 'var a = try { 34; } finally { return ; 34.'))
$assertArray(['abs', 'toFloat'], $(complete 'function f($a: Int) { $a.'))
$assertArray(['abs', 'toFloat'], $(complete 'var b = function ($a: Int) => $a.'))

# type
var types = [
    'Any', 'ArithmeticError', 'Bool', 'Boolean', 'Error', 'Float',
    'Func', 'GlobbingError', 'IllegalAccessError', 'Int', 'InvalidOperationError', 'Job', 'KeyNotFoundError', 'Module', 'Nothing',
    'OutOfRangeError', 'Regex', 'RegexSyntaxError', 'Signal', 'Signals', 
    'StackOverflowError', 'String', 'SystemError', 'TypeCastError',
    'UnixFD', 'UnwrappingError', 'Void'
]

$assertArray(['Bool', 'Boolean'], $(complete '34 is [B'))
assert $(complete '34 is').empty()
assert $(complete '34 as').empty()
$assertArray(['StackOverflowError', 'String'], $(complete 'var a :St'))
$assertArray($types, $(complete 'var a :'))
$assertArray($types, $(complete '234 as '))
$assertArray(['Dot'], $(complete 'typedef Dot = [[String]]; function f($a : D'))
$assertArray(['typeof', 'typeof0'], $(complete 'typedef typeof = [[String]]; typedef typeof0 = Int; function f($a : typeof'))
$assertArray(['Func','Func0'], $(complete '
    typedef Dot0 = [[String]]
    if(test -f 34) {
        typedef Func0 = [String:[Any]]
        assert 45 is Func'))
$assertArray(["Completer"], $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/completion as CP; 23 is CP."))
$assertArray(["Completer"], $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/completion as CP; 23 is CP . C"))
$assertArray(["BoolArray", "FloatArray", "StrArray"],
             $(complete "source $SCRIPT_DIR/../../_module4test/inlined2.ds as mod; 23 is mod."))

# subcommand
$assertArray(["compdef", 'startwith'], $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/completion as CP; CP "))
$assertArray(["compdef"], $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/completion as CP; CP c"))
$assertArray(["startwith"], $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/completion as CP; CP > /dev/null s"))
assert $(complete "source $SCRIPT_DIR/../../../../share/ydsh/module/path as P; P ").empty()
$assertArray(["say0", "say1", "say2"],
             $(complete "source $SCRIPT_DIR/../../_module4test/inlined2.ds as mod; mod "))

# no completion candidate
assert($(complete '34').empty())
assert($(complete '34 ').empty())
assert($(complete 'echo hello ${45}').empty())
assert($(complete 'echo hello ${45}./').empty())
assert($(complete 'var a = ;').empty())
assert($(complete 'var 23').empty())
assert($(complete 'var ').empty())
assert($(complete '[  )').empty())
assert($(complete 'var 23').empty())
assert($(complete 'function f($').empty())
assert($(complete '{ $T ').empty())
assert $(complete 'ls # this is a comment ').empty()
assert $(complete 'var a : Int.').empty()
# assert $(complete 'coproc { break 34.').empty()
# assert $(complete '{ return 34.').empty()

complete '#jerijf' > /dev/null
assert $COMPREPLY.empty()

complete '' > /dev/null
assert $COMPREPLY.empty()