
function assertArray($x : Array<String>, $y : Array<String>) {
    assert diff <(for $a in $x { echo $a; }) <(for $a in $y { echo $a; })
}

{ import-env _ : "a" }    # force set env '_'

# complete global variable name
{
    var gvars = [
        '#', '$',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        '?', '@', 'CMD_FALLBACK', 'COMPREPLY', 'COMP_HOOK', 'DATA_DIR', 'EDIT_HOOK',
        'EUID', 'FALSE', 'False', 'IFS', 'MACHTYPE', 'MODULE_DIR', 'ON_ASSERT', 'ON_ERR', 'ON_EXIT',
        'OSTYPE', 'PID', 'PIPESTATUS', 'PPID',
        'RANDOM', 'REPLY', 'SCRIPT_DIR', 'SCRIPT_NAME', 'SECONDS', 'SIG', 'SIG_DFL', 'SIG_IGN',
        'STDERR', 'STDIN', 'STDOUT', 'TERM_HOOK',
        'TRUE', 'True', 'UID', 'YDSH_BIN', 'YDSH_VERSION', '_DEF_SIGINT',
        'assertArray', 'false', 'reply', 'true',
    ]

    $assertArray($gvars, $(complete '$'))

    var gvars2 = [
        'PID', 'PIPESTATUS', 'PPID',
    ]

    $assertArray($gvars2, $(complete '$P'))
    $assertArray(new Array<String>(), $(complete '$P '))
    $assertArray($gvars, $(complete '$($'))
    $assertArray($gvars2, $(complete '$($P'))
    $assertArray($gvars, $(complete '"$'))
    $assertArray($gvars2, $(complete '"$P'))
    $assertArray($gvars, $(complete '"1234$'))
    $assertArray($gvars2, $(complete '"sss$P'))
    $assertArray($gvars, $(complete 'echo $'))
    $assertArray($gvars2, $(complete 'echo $P'))
    $assertArray($gvars, $(complete 'echo hoge$'))
    $assertArray($gvars2, $(complete 'echo hoge$P'))
    $assertArray($gvars2, $(complete '($P'))
    $assertArray($gvars2, $(complete '{$P'))
    $assertArray($gvars2, $(complete '$f($P'))
}

# env name
unsetenv COMP_WORDBREAKS
setenv 'ZZZ(23)=hello'

$assertArray($(env | while(read -r) {
                        var ss = $REPLY.split('=');
                        $REPLY.indexOf('=') > -1 && echo $ss[0];
                     } | sed 's/(/\\(/' | sed 's/)/\\)/' ).sort(), $(complete 'import-env '))
$assertArray($(env | grep ^P | while(read -r) {
                                    var ss = $REPLY.split('=');
                                    $REPLY.indexOf('=') > -1 && echo $ss[0];
                               } | sed 's/(/\\(/' | sed 's/)/\\)/' ).sort(), $(complete 'import-env P'))


# field/method
$assertArray(["_0", "_1"], $(complete "(1,2)."))
$assertArray(["sort", "sortWith"], $(complete '$@.so'))
# $assertArray(["compAdd"], $(complete 'source ../../../../share/ydsh/module/completion as CP; $CP.'))

# no completion candidate
assert($(complete '34').empty())
assert($(complete '34 ').empty())
assert($(complete 'echo hello ${45}').empty())
assert($(complete 'echo hello ${45}./').empty())
assert($(complete 'var a = ;').empty())
assert($(complete 'var 23').empty())
assert($(complete 'var ').empty())
assert($(complete '[  )').empty())
assert($(complete 'var 23').empty())
assert($(complete 'function f($').empty())
assert($(complete '{ $T ').empty())

complete '#jerijf' > /dev/null
assert $COMPREPLY.empty()

complete '' > /dev/null
assert $COMPREPLY.empty()