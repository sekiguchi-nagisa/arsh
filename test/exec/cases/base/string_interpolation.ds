
# string interpolation
## Int
var a = "西暦${1900 + 114}年"
var b = "西暦\${1900 + 114}年"

assert($a == "西暦2014年")
assert($b == '西暦${1900 + 114}年')

var pair = (1,2)
assert "20${pair._0}${pair._1}" == '2012'

var pair2 = (34, $pair)
assert "${pair2._1._0}${pair2._1._1}${pair2._0}" == '1234'

## Boolean
var d = $true
assert("this is true" == "this is $d")
assert("this is true" == "this is $true")
assert("this is false" == "this is $false")

assert("this is true" == "this is ${d}")
assert("this is true" == "this is ${true}")
assert("this is false" == "this is ${false}")

## Float
assert "${ 3.14 }" == 3.14 as String
assert "${3.14/0.0}" == (3.14/0.0) as String
assert "${-3.1/0.0}" == (-3.1/0.0) as String
assert "${0.0/0.0}" == (0.0/0.0) as String

## String
assert "${$'AA\0BB'}".size() == 5
assert "${$'AA\x00BB'}" == $'AA\x00BB'
assert "${"ab cd " } " == 'ab cd  '

## Signal
assert "$SIGINT" == $SIGINT as String

## Error
assert "${new Error("hello")}" == (new Error("hello")) as String

## Regex
assert "${$/34/}" == $/34/ as String

## RegexMatch
{
    var m = $/(12(?<a>34))/.match('1234')!
    assert "$m" == '1234 1234 34'
    assert $m as String == "[1234, 1234, 34]"
    $m = $/(\d+)(a|(b))(c)/.match('343445ac')!
    assert "$m" == "343445ac 343445 a c"
    assert $m as String == '[343445ac, 343445, a, (invalid), c]'
}

## UnixFD
assert "$STDIN" == $STDIN as String

## Array
assert "${[12,34]}" == "12 34"
assert "${[['a','b'],['c','d','e']]}" == "a b c d e"
assert "${[34 as Int?, new Int?(), 89]}" == "34 89"

## Map
assert "${[23:34 as Int?, 900: new Int?()]}" == "23 34"
assert "${[34:12, 900:45,-9: -99]}" == "34 12 900 45 -9 -99"
{
    var m = ['aa': 1, 'bbb': 22, 'ccc': 333, 'ddd': 444]
    $m.remove('bbb')
    $m.remove('aa')
    assert "$m" == 'ccc 333 ddd 444'
}

## Tuple
assert "${(23,'a',(1,$false),[0,3])}" == '23 a 1 false 0 3'

## Record
typedef AAA($a : Int, $b : String) {
    var aaa = $a
    var bbb = $b
}
assert "${new AAA(-90, 'hey')}" == '-90 hey'
assert "${new AAA(-90, '')}" == '-90 '

typedef List($a : String, $n : List?) {
    let value = $a
    let next = $n
}
var list = new List("a b", new List("cc", new List?()))
assert "$list" == 'a b cc'