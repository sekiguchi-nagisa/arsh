
function raise($s : String) {
    /bin/kill -s ${$SIG.get($s)!.name()} $PID
    #echo $?
}

var raised = 0
var a = new [(Signal, Int)]()
function g1($s : Signal) {
    $raised++
    $a.add(($s, $raised))
    $raise('term')
    $raised--
}

function g2($s : Signal) {
    $raised++
    $a.add(($s, $raised))
    $raised--
}

$SIG['HUP'].trap($g1)
$SIG['term'].trap($g2)

# recursive signal handler invocation is not allowed
$raise('hup')
assert $a.size() == 2
assert $a[0]._0.name() == 'HUP'
assert $a[0]._0 == %'hup'
assert $a[0]._1 == 1
assert $a[1]._0.name() == 'TERM'
assert $a[1]._0 != %'hup'
assert $a[1]._0 == %'terM'
assert $a[1]._1 == 1
