
function assertArray($x : Array<String>, $y : Array<String>) {
    assert diff <(for $a in $x { echo $a; }) <(for $a in $y { echo $a; })
}

function assertEmptyComp($s : String) {
    assert complete $s > /dev/null
    assert $COMPREPLY.size() == 1
    assert $COMPREPLY[0].empty()
}

assert1() {}
alias2() {}
break3() {}
case4() {}
continue5(){}
coproc6(){}
exportenv7(){}
for8(){}
function9(){}
ifnames(){}
importenv10(){}
return11(){}
source!12(){}
tryaffix(){}
throw13(){}
var14(){}
while15(){}
typed16(){}
AAAA() {}

# complete expected token
$assertArray([')'], $(complete 'for(var i = 0; $i < 23; $i++ '))
$assertArray([':', '='], $(complete '34; var a '))
# $assertArray([";"], $(complete '(ls) '))
$assertArray([',', ':', ']'], $(complete '[3 '))
$assertArray([',', ']'], $(complete '[3, 23 '))
$assertArray([':'], $(complete '[3 : 34, 23 '))
$assertArray([',', ']'], $(complete '[3 : 34 '))
$assertArray([')', ','], $(complete '(3 '))
$assertArray([')', ','], $(complete '$func(3 '))
$assertArray(['&>', '&>>', '1>', '1>&2',  '1>>', '2>', '2>&1',  '2>>', '<', '<<<'], $(complete '34 with '))
$assertArray(['&>', '&>>', '1>', '1>&2',  '1>>', '2>', '2>&1',  '2>>', '<', '<<<'], $(complete '34 with 1> hoge '))
$assertArray([')', ','], $(complete 'function hoge($a : Int '))
$assertArray([':'], $(complete 'function hoge($a '))
$assertArray(['"', '$(', '${'], $(complete 'var a = "AAA'))
$assertArray(['->'], $(complete 'var a : ()'))
$assertArray(['=>'], $(complete 'function ()'))
$assertArray(['=>'], $(complete 'case 234 { 34 '))

# complete keyword
## perform sort command with 'C' locale
export-env LC_ALL = 'C'

# $assertArray(["{"], $(complete '{'))
# $assertArray(["alias", "alias2"], $(complete 'alia'))
# $assertArray(["alias", "alias2"], $(complete 'alias'))
$assertArray(["assert", "assert1"], $(complete 'asser'))
$assertArray(["assert", "assert1"], $(complete 'assert'))
$assertArray(["break", "break3"], $(complete 'brea'))
$assertArray(["break", "break3"], $(complete 'break'))
$assertArray($({complete -A cmd 'cas'; echo 'case'; } | sort | uniq ), $(complete 'cas'))
$assertArray($({complete -A cmd 'case'; echo 'case'; } | sort | uniq ), $(complete 'case'))
$assertArray(["continue", "continue5"], $(complete 'continu'))
$assertArray(["continue", "continue5"], $(complete 'continue'))
$assertArray(["coproc", "coproc6"], $(complete 'copro'))
$assertArray(["coproc", "coproc6"], $(complete 'coproc'))
$assertArray($({complete -A cmd 'd'; echo 'defer' && echo 'do'; } | sort | uniq ), $(complete 'd'))
$assertArray($({complete -A cmd 'do'; echo 'do'; } | sort | uniq ), $(complete 'do'))
$assertArray(["exportenv", "exportenv7"], $(complete 'exporten'))
$assertArray(["exportenv", "exportenv7"], $(complete 'exportenv'))
$assertArray($({complete -A cmd 'fo'; echo 'for'; } | sort | uniq ), $(complete 'fo'))
$assertArray($({complete -A cmd 'for'; echo 'for'; } | sort | uniq ), $(complete 'for'))
$assertArray(["function", "function9"], $(complete 'functio'))
$assertArray(["function", "function9"], $(complete 'function'))
$assertArray($({complete -A cmd 'if'; echo 'if'; } | sort | uniq ), $(complete 'if'))
$assertArray(["importenv", "importenv10"], $(complete 'importen'))
$assertArray(["importenv", "importenv10"], $(complete 'importenv'))
$assertArray($({complete -A cmd 'le'; echo 'let'; } | sort | uniq ), $(complete 'le'))
$assertArray($({complete -A cmd 'let'; echo 'let'; } | sort | uniq ), $(complete 'let'))
$assertArray($({complete -A cmd 'ne'; echo 'new'; } | sort | uniq ), $(complete 'ne'))
$assertArray($({complete -A cmd 'new'; echo 'new'; } | sort | uniq ), $(complete 'new'))
$assertArray(["return", "return11"], $(complete 'retur'))
$assertArray(["return", "return11"], $(complete 'return'))
$assertArray(["source", "source!", "source!12"].addAll({complete -A external 'source' &> /dev/null; $COMPREPLY; }).sort(), $(complete 'sourc'))
$assertArray(["source", "source!", "source!12"].addAll({complete -A external 'source' &> /dev/null; $COMPREPLY; }).sort(), $(complete 'source'))
$assertArray(["source!", "source!12"], $(complete 'source!'))
$assertArray($({complete -A cmd 'tr'; echo 'try'; } | sort | uniq ), $(complete 'tr'))
$assertArray($({complete -A cmd 'try'; echo 'try'; } | sort | uniq ), $(complete 'try'))
$assertArray(["throw", "throw13"], $(complete 'thro'))
$assertArray(["throw", "throw13"], $(complete 'throw'))
$assertArray($({complete -A cmd 'va'; echo 'var'; } | sort | uniq ), $(complete 'va'))
$assertArray($({complete -A cmd 'var'; echo 'var'; } | sort | uniq ), $(complete 'var'))
$assertArray(["while", "while15"], $(complete 'whil'))
$assertArray(["while", "while15"], $(complete 'while'))
$assertArray(["typed16", "typedef"], $(complete 'typed'))

# compelte infix keyword
$assertArray(['in'], $(complete 'for $a i'))
$assertArray(['while'], $(complete 'do {} '))
$assertArray(['while'], $(complete 'do {} w'))
$assertArray(['while'], $(complete 'do {} wh'))
$assertArray(['while'], $(complete 'do {} whi'))
$assertArray(['while'], $(complete 'do {} whil'))
$assertArray(['catch', 'finally'], $(complete 'try {}'))
$assertArray(['catch'], $(complete 'try {} c'))
$assertArray(['catch'], $(complete 'try {} ca'))
$assertArray(['finally'], $(complete 'try {} f'))
$assertArray(['finally'], $(complete 'try {} fin'))
$assertArray(['finally'], $(complete 'try {} catch $e {} f'))
$assertArray(['elif', 'else'], $(complete 'if $true {} e'))
$assertArray(['elif', 'else'], $(complete 'if $true {} el'))
$assertArray(['elif'], $(complete 'if $true {} eli'))
$assertArray(['else'], $(complete 'if $true {} els'))
$assertArray(['and', 'as'], $(complete '34 a'))
$assertArray(['and'], $(complete '34 an'))
$assertArray(['is'], $(complete '34 i'))
$assertArray(['or'], $(complete '34 o'))
$assertArray(['xor'], $(complete '34 x'))
$assertArray(['xor'], $(complete '34 xo'))
$assertArray(['with'], $(complete '34 w'))
$assertArray(['with'], $(complete 'if $true{} wi'))
$assertArray(['as'], $(complete 'source ./ a'))
$assertArray(['inlined'], $(complete 'source ./ i'))
$assertArray(['inlined'], $(complete 'source ./ inl'))
$assertArray(['for'], $(complete 'function f() : Int f'))
$assertArray(['for', '{'], $(complete 'function f() : Int '))

assert $(complete 'source ./ ').empty()
assert $(complete 'source! ./ a').empty()
assert $(complete 'for $a inn').empty()
assert $(complete 'do {} whilee').empty()
assert $(complete 'do {} whileA').empty()

# complete empty token
$assertArray([")"], $(complete 'for(var i = 0; $i < 23; $i++'))
# $assertEmptyComp('34; var a')
# $assertEmptyComp('echo &&')
# $assertEmptyComp('echo >')