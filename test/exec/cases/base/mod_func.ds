
var AAA = 'aaa'

BBB() { echo BBB: $@; }

var aaa = $MODULE._func('$AAA')
assert $aaa is () -> Any?
assert $aaa()! as String == 'aaa'

var bbb = $MODULE._func('BBB a b c')
assert $bbb is () -> Any?
assert $bbb()! as Bool
assert "$($bbb())" == 'BBB: a b c'

var ccc = $MODULE._func('$bbb() as Void')
assert $ccc is () -> Any?
assert ! $ccc()
assert "$($ccc())" == 'BBB: a b c'

# module
source ../../_module4test/module1.ds
assert "$($MODULE._func('say0 1234')())" == "_say!! 1234"

source ../../_module4test/module1.ds as mod
assert $mod._func('$hello')()! as String == 'hello module!!'


# compile error
var ex = 34 as Any
try { $MODULE._func('var _vvv = 34')(); } catch $e { $ex = $e; }
assert $ex is ArgumentError
assert $/expected expression/ =~ ($ex as Error).message()

$ex = 234
try { $MODULE._func('echo $WWW')(); } catch $e { $ex = $e; }
assert $ex is ArgumentError
assert $/undefined/ =~ ($ex as Error).message()

$ex = 234
try { $MODULE._func('')(); } catch $e { $ex = $e; }
assert $ex is ArgumentError
assert $/require expression/ =~ ($ex as Error).message()

$ex = 234
try { $MODULE._func('# echo hello')(); } catch $e { $ex = $e; }
assert $ex is ArgumentError
assert $/require expression/ =~ ($ex as Error).message()


# runtime error
$ex = 234
try { $mod._func('34 as Any as StrArray')(); } catch $e { $ex = $e; }
assert $ex is TypeCastError

true