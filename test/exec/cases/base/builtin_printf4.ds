
# for time format `%(fmt)T'

## invalid format
assert "$(printf -v var '% (T' -2147483648 @@@@@@@@@@@@ 2>&1)" ==
    "ydsh: printf: \`(' specifier must end with \`)T'"

## invalid argument
assert "$(printf -v var '% ()T' @@@@@@@@@@@@ 2>&1)" ==
    "ydsh: printf: \`@@@@@@@@@@@@': \`(' specifier needs valid INT64 (decimal, octal or hex number)"

assert "$(printf -v var '% (aaa)T' @@@@@@@@@@@@ 2>&1)" ==  # always check argument even if no valid time specifier
    "ydsh: printf: \`@@@@@@@@@@@@': \`(' specifier needs valid INT64 (decimal, octal or hex number)"

assert "$(printf -v var '%(%&)T' @@@@@@@@@@@@ 2>&1)" ==  # always check argument even if no valid time specifier
    "ydsh: printf: \`@@@@@@@@@@@@': \`(' specifier needs valid INT64 (decimal, octal or hex number)"

assert "$(printf -v var '%(%c)T' -999 2>&1)" ==  # always check argument even if no valid time specifier
    "ydsh: printf: \`-999': \`(' specifier does not accept negative numbers (except for -1, -2)"

## invalid specifier
assert "$(printf -v var '%(%)T' 2>&1)" == 
    "ydsh: printf: require at-least one conversion specifier after %"

assert "$(printf -v var '%(%@)T' 2>&1)" == 
    "ydsh: printf: \`@': invalid time conversion specifier"

assert "$(printf -v var $'%(%\x00)T' 2>&1)" == 
    "ydsh: printf: \`\x00': invalid time conversion specifier"

## invalid specifier (only glibc support)
for invalid in "P_-0^#" {
    assert "$(printf -v var "%(%${invalid}X)T" 2>&1)" == 
        "ydsh: printf: \`$invalid': invalid time conversion specifier" : "for invalid \`%$invalid'"
}


## no-arg, -1, -2
$reply.clear()
printf '%  ()T+)T'
LANG=C printf -v time '%  ()T+)T'   # nested )T
assert $reply['time'] =~ $/[0-9]{2}:[0-9]{2}:[0-9]{2}\+\)T/
assert $/[0-9]{2}:[0-9]{2}:[0-9]{2}\+\)T/ =~ "$(LANG=C printf '%  ()T+)T')"

$reply.clear()
assert "$(printf '%(\t\n)T')" == "\t\n"  # no interpret escape

printf -v now1 '%()T'    # current time
printf -v now2 '%()T' -1    # current time
printf -v startup1 '%()T' -2 # startup time (always indicate same time)
sleep 1
printf -v startup2 '%()T' -2
printf -v now3 '%()T' -1

assert $reply['startup1'] == $reply['startup2']
assert $reply['now1'] == $reply['now2']
assert $reply['now1'] != $reply['now3']
assert $reply['startup1'] != $reply['now3']

## conversion specifier
let epoch = "2147483647"

assert "$(printf '%()T' $epoch)" == "$(printf '%(%X)T' $epoch)"  # default format is `%X`
assert "$(printf '%(%t%n)T@')" == "$(date +%t%n@)"

function passEpoch(epoch : String) : [String] {
    return if $OSTYPE == "darwin" {
        ["-r", $epoch]
    } else {
        ["--date=@$epoch"]
    }
}

let conversions = 'aAbBcCdDeFGghHIjklmMnprRsStTuUVwWxXyYzZ%'
for converion in $conversions {
    let expect = "$(date $passEpoch($epoch) +%$converion=@@)"
    assert $? == 0 && !$expect.empty() : "for %$converion"

    let out1 = "$(printf "%(%$converion=@@)T" $epoch 2>&1)"
    assert $? == 0 && !$out1.empty() : "for %$converion"

    printf -v var "%(%$converion=@@)T" $epoch
    let out2 = $reply['var']
    assert $? == 0 && !$out2.empty() : "for %$converion"

    assert $expect == $out1 : "for %$converion
    expect: $expect
    actual: $out1"

    assert $expect == $out2 : "for %$converion
    expect: $expect
    actual: $out2"
}

## '+' specifier (may be equivalent to date command default format)
assert "$(printf '%(%+)T' $epoch)" == "$(date $passEpoch($epoch))"

true