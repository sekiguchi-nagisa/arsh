var str = "うずまきナルト"
assert($str == "うずまきナルト")
$str = 'hello world'
assert($str == 'hello world')
assert($str != "fer")

# string literal
assert('a\nb' == $'a\\nb')
assert('a\rb' == $'a\\rb')
assert('a\tb' == $'a\\tb')
assert('a\o' == $'a\o')
assert " $ " == ' $ '
assert "$" == '$'
assert($'\101\066' == "A6")     # octal
assert($'\x09\x7E' == $'\t~')  # hex
assert($'\x09\x7e' == $'\t~')  # hex
assert($'\r' == $'\x0D')    # hex
assert $'\xC2\xA3' == '£'  # hex (utf-8)
assert $'\x00' != ''        # nul character
assert $'\a' == $'\x07'
assert $'\b' == $'\x08'
assert $'\e' == $'\x1b'
assert $'\E' == $'\x1b'
assert $'\f' == $'\x0C'
assert $'\'' == "'"
assert '`' == "\`"

assert $'\u7058' == '灘'
assert $'\U20118' == '𠄘'
assert $'\u00A3' == '£'
assert $'\u00A3' == $'\xC2\xA3'

assert('a
b' == "a
b")  # allow new line
assert('a\nb' == "a\nb")
assert('a\rb' == "a\rb")
assert "\
hello" == "hello"

# string concatenation
assert '12he' == 12 + 'h' + 'e'
assert 'he12' == 'he' + '' + 12 + ''

# string method
assert("".empty())
assert("".size() == 0)
assert("".size() is Int)
assert("hello".count() is Int)
assert("hello".count() == "hello".size())
assert "👨‍👨‍👦".count() == 1
assert("あい🌏うえお90🇯🇵".count() == 9)

$str = "はるのサクラ"
$str = $str.replace("はるの", "うずまき")
assert($str == "うずまきサクラ")

var a = "hello world"
assert($a.size() == 11)
assert($a == "hello" + ' ' + "world")

assert("12あ90灘"[0] == "1")
assert("12あ90灘"[1] == "2")
assert "12345"[-1] == '5'
assert "12345"[-2] == '4'
try { "12あ90灘"[123]; assert($false); } catch($e) { assert($e is OutOfRangeError); }
try { "12あ90灘"[-123]; assert($false); } catch($e) { assert($e is OutOfRangeError); }
assert("12あ90灘"[2] != 'あ')  # get ascii character encoding
assert("12あ90灘".charAt(2) == "あ")   # get UTF8 character
assert("12あ90灘"[5] != '灘')  # get get ascii character encoding
assert("12あ90灘".charAt(5) == '灘')   # get UTF8 character
try { "12あ90灘".charAt(6); assert($false); } catch($e) { assert($e is OutOfRangeError); }

assert($a.slice(0, 4) == "hell");
assert "1234".slice(4, 4).empty()
assert($a.slice(-3, -1) == "rl");
assert("01234".slice(4, 3) == "");
assert("01234".slice(2, 100) == "234");
assert("01234".slice(5, 6) == "");
assert("01234".slice(-1, 2) == "");
assert("01234".slice(-134, -4) == "0");
assert("012345".slice(0, 3) == "012")
assert("012345".slice(0, -4) == "01")
assert("012345".slice(0, -9) == "");
assert("012345".slice(0, 9) == "012345");

assert("012345".slice(3) == "345")
assert("012345".slice(-4) == "2345")
assert "01234".slice(5) == ""
assert("012345".slice(-9) == "012345");
assert("012345".slice(7) == "");

assert(! $a.startsWith("hoge"))
assert("あ345".startsWith("あ"))
assert("".startsWith(""))
assert ! "".startsWith('a')
assert("a".startsWith(""))
assert ! $'a\x00b'.startsWith($'a\x00c')
assert ! "".startsWith($'\x00')

assert($a.endsWith("rld"))
assert("あ345空".endsWith("5空"))
assert("".endsWith(""))
assert !"".endsWith($'\x00')
assert("a".endsWith(""))
assert ! "a".endsWith($'\x00')

assert($a.indexOf("q") == -1)
assert("0123ああ".indexOf("あ") == 4)
assert("0123ああ".indexOf("") == 0)
assert $'a\x00b'.indexOf($'\x00') == 1
assert("".indexOf("") == 0)
assert("".indexOf($'\x00') == -1)
assert("".indexOf("aaa") == -1)

assert "12341234".indexOf("1", 0) == 0
assert "12341234".indexOf("1", 1) == 4
assert "12341234".indexOf("1", 8) == -1
assert "12341234".indexOf("2", -4) == 5
assert "12341234".indexOf("23", 0) == 1
assert "12341234".indexOf("23", 2) == 5
assert("".indexOf("", 0) == 0)
var ex = 34 as Any
try { "1234".indexOf('1', 5); } catch $e { $ex = $e; }
assert $ex is OutOfRangeError
$ex = 34
try { "1234".indexOf('1', -5); } catch $e { $ex = $e; }
assert $ex is OutOfRangeError

assert($a.lastIndexOf("l") == 9)
assert("00000".lastIndexOf("00") == 3)
assert("00000".lastIndexOf("6") == -1)
assert("0123".lastIndexOf("") == 4)
assert($'a\x00b'.lastIndexOf("") == 3)
assert($'a\x00b'.lastIndexOf($'\x00') == 1)
assert("".lastIndexOf("") == 0)
assert("".lastIndexOf("aaadd") == -1)
assert "".lastIndexOf($'\x00') == -1

assert "".contains("")
assert ! "".contains("a")
assert ! "".contains($'\0')
assert "aaa".contains("a")
assert ! "a12o0いs".contains("あ")
assert "a12o0いs".contains("")
assert "fer230👨‍👨‍👦ｆれｆ".contains("👨")
assert "fer230👨‍👨‍👦ｆれｆ".contains("👨‍👨‍👦")
assert 'aa🇯🇵ss'.contains('🇯')

var sa = "hello world !!".split(" ")
assert($sa.size() == 3)
assert($sa[0] == "hello")
assert($sa[1] == "world")
assert($sa[2] == "!!")

$sa = 'hell'.split('l')
assert $sa.size() == 3
assert $sa[0] == 'he'
assert $sa[1] == ''
assert $sa[2] == ''

$sa = 'hell'.split('h')
assert $sa.size() == 2
assert $sa[0] == ''
assert $sa[1] == 'ell'

$sa = "こんばんわ".split("ん")
assert($sa.size() == 3)
assert($sa[0] == "こ")
assert($sa[1] == "ば")
assert($sa[2] == "わ")

$sa = "hello".split("@")
assert($sa.size() == 1)
assert($sa[0] == "hello")

$sa = "hello".split("")
assert($sa.size() == 1)
assert($sa[0] == "hello")

$sa = "".split("")
assert($sa.size() == 1)
assert($sa[0] == "")

$sa = $'a\x00b\x00'.split($'\x00')
assert $sa.size() == 3
assert $sa[0] == 'a'
assert $sa[1] == 'b'
assert $sa[2] == ''

$sa = "".split($'\x00')
assert $sa.size() == 1
assert $sa[0] == ""

$sa = $'\x00'.split("")
assert $sa.size() == 1
assert $sa[0] == $'\x00'

$sa = $'a\x00b\x00c'.split('b')
assert $sa.size() == 2
assert $sa[0] == $'a\x00'
assert $sa[1] == $'\x00c'

assert "hello".replace("e", "@") == "h@llo"
assert "hello".replace("ll", "") == "heo"
assert "hello".replace("", "123") == "hello"

assert "あいあう2".replace("あ", "お") == "おいおう2"
assert "あいあう2".replace("い", "") == "ああう2"
assert "あいあう2".replace("", "間") == "あいあう2"

assert "".replace("a", "34") == ""
assert "".replace("", "") == ""
assert "".replace("", "hoge") == ""

assert "a12bbb1234ccc12".replace('12', '@') == 'a@bbb@34ccc@'
assert "a12bbb1234ccc12".replace('12', '@', $false) == 'a@bbb@34ccc@'
assert "a12bbb1234ccc12".replace('12', '@', $true) == 'a@bbb1234ccc12'
assert "a12bbb1234ccc12".replace('c12', '@', $once: $true) == 'a12bbb1234cc@'
assert "a12bbb1234ccc12".replace('hogeo', '@', $once: $true) == 'a12bbb1234ccc12'

var bytes = "".bytes()
assert $bytes.size() == 0
$bytes = $'@\x00'.bytes()
assert $bytes.size() == 2
assert $bytes[0] == 64
assert $bytes[1] == 0
$bytes = $'l\U3042\u8822'.bytes() # lあ蠢
assert $bytes.size() == 7
assert $bytes == [108, 0xE3,0x81,0x82, 0xE8, 0xA0, 0xA2]
assert ! $'\xFE\xFA'.validate()
$bytes = $'\xFE\xFA'.bytes() # get raw bytes even if bad encoding
assert $bytes.size() == 2
assert $bytes == [0xFE, 0xFA]

var gca = "あ👨‍👨‍👦い🌏う90🇯🇵".chars()
assert $gca.size() == 8
assert $gca[0] == 'あ'
assert $gca[1] == '👨‍👨‍👦'
assert $gca[2] == 'い'
assert $gca[3] == '🌏'
assert $gca[4] == 'う'
assert $gca[5] == '9'
assert $gca[6] == '0'
assert $gca[7] == '🇯🇵'

var words = $'\r1234\n🇯🇵3.14あい👨‍👨‍👦/カナ'.words()
assert $words.size() == 10
assert $words[0] == $'\r'
assert $words[1] == '1234'
assert $words[2] == $'\n'
assert $words[3] == '🇯🇵'
assert $words[4] == '3.14'
assert $words[5] == 'あ'
assert $words[6] == 'い'
assert $words[7] == '👨‍👨‍👦'
assert $words[8] == '/'
assert $words[9] == 'カナ'

assert '🇯🇵'.width() == 2
assert '4334 '.width() == 5
assert $'\n\t'.width() == 0
assert "あ2い".width() == 5
assert '👨‍👨‍👦'.width() == 2 # emoji zwj sequence
assert '👩'.width() == 2  # emoji
assert $'\U1F3FB'.width() == 2 # emoji modifier (skin tone)
assert $'👩\U1F3FB'.width() == 2 # emoji modifier sequence
assert $'\u00A9'.width() == 1
assert $'\uFE0E'.width() == 0
assert $'\u00A9\uFE0E'.width() == 1 # VS15 (text style) is origianl width
assert $'\u0023'.width() == 1
assert $'\uFE0F'.width() == 0
assert $'\u0023\uFE0F'.width() == 2 # VS16 (emoji style) is always 2 width
assert $'\u0023\uFE0F\u20E3'.width() == 2 # emoji keycap sequence, VS16 (emoji style) is always 2 width
assert $'\U1F3F4\UE0067\UE0062\UE0073\UE0063\UE0074\UE007F'.width() == 2 # emoji tag sequence

## east-asian width
assert "$(LANG=ja_JP.UTF-8 LC_ALL=ja_JP.UTF-8 LC_CTYPE=ja_JP.UTF-8 call $BIN_NAME -c 'echo ${"○".width()}')" == "2"
assert "$(LANG=C LC_ALL=C LC_CTYPE=C call $BIN_NAME -c 'echo ${"○".width()}')" == "1"

## explicitly specify east-asian width
assert "○".width(1) == 1
assert "○".width(2) == 2
assert "あ".width(1) == 2
assert "あ".width(2) == 2
assert $'\U2640'.width(1) == 1
assert $'\U2640'.width(2) == 2
assert $'\U2640\uFE0F'.width(1) == 2  # VS16 (emoji style) is always 2 width
assert $'\U2640\uFE0F'.width(2) == 2

## broken encoded string
let invalid = $'\xC2\x24\xE0\xA4\xC2\xE0\xB8\xB3'
assert $invalid.count() == 6
$gca = $invalid.chars()
assert $gca.size() == 6
assert $gca[0] == $'\uFFFD' # replace invalid byte with replacement char (U+FFFD)
assert $gca[1] == $'\x24'
assert $gca[2] == $'\uFFFD'
assert $gca[3] == $'\uFFFD'
assert $gca[4] == $'\uFFFD'
assert $gca[5] == $'\u0E33'
assert $gca[0] == $invalid.charAt(0)
assert $gca[1] == $invalid.charAt(1)
assert $gca[2] == $invalid.charAt(2)
assert $gca[3] == $invalid.charAt(3)
assert $gca[4] == $invalid.charAt(4)
assert $gca[5] == $invalid.charAt(5)
assert $invalid.width(2) == 10
assert $invalid.width(1) == 6
assert $invalid.width() == 
{ 
    var aa = 0 
    for a in $gca { $aa += $a.width(); }
    $aa
}

$words = $invalid.words()
assert $words.size() == 6
assert $words[0] == $'\uFFFD' # replace invalid byte with replacement char (U+FFFD)
assert $words[1] == $'\x24'
assert $words[2] == $'\uFFFD'
assert $words[3] == $'\uFFFD'
assert $words[4] == $'\uFFFD'
assert $words[5] == $'\u0E33'

## validate
assert ''.validate()
assert $'\x00'.validate()
assert ! $invalid.validate()
assert 'あいうえお'.validate()
assert $'\uFFFD'.validate()

## sanitize
assert $invalid.sanitize() == $'\x24\u0E33'
assert $invalid.sanitize("") == $'\x24\u0E33'
assert $invalid.sanitize($'\uFFFD') == $'\uFFFD\x24\uFFFD\uFFFD\uFFFD\u0E33'
assert ($'@@\x00' + $invalid + $'\x00#\x00\x00').sanitize() == $'@@\x00\x24\u0E33\x00#\x00\x00'  # not replace null

# toInt
assert("-2147483648".toInt()! == -1 - 2147483647)
assert("-2147483649".toInt())
assert("+2147483647".toInt()! == 2147483647)
assert("2147483648".toInt())
assert "+0xFFFFfaec".toInt()!  == 0xFFFFfaec
assert "+0xFFFFfaec".toInt(0)!  == 0xFFFFfaec
assert "0XFFFFfaec".toInt()!  == 0XFFFFfaec
assert "0XFFFFFFFF".toInt()!  == 0XFFFFFFFF
assert "0XFFFFFFFF".toInt(0)!  == 0XFFFFFFFF
assert "-0XFa".toInt()! == -0xFA
assert "0XFFFFFFFFa".toInt()
assert "-0xFFFFFFF".toInt()! == -0xFFFFFFF
assert "+0012345".toInt()!  == 0012345
assert "0o12345".toInt()!  == 0o12345
assert "0O12345".toInt()!  == 0O12345
assert "-0O12345".toInt()! == -0O12345

assert("-9223372036854775808".toInt()! == -1 - 9223372036854775807)
assert("-9223372036854775808".toInt(0)! == -1 - 9223372036854775807)
assert(! "-9223372036854775809".toInt())
assert("9223372036854775807".toInt()! == 9223372036854775807)
assert(!"9223372036854775808".toInt())
assert(!"9223372036854775L".toInt())
assert ! '0XFFFFFFFFFFFFFFFF'.toInt()   # unlike int literal, result is out-of-range
assert '-0O222222'.toInt()! == -0222222
assert '0222222'.toInt()! == 0222222
assert '0O2222234'.toInt()! == 02222234
assert '0O2222234'.toInt(0)! == 02222234
assert '0o2222234'.toInt()! == 0o2222234

## toInt with radix
assert ! "-Zz".toInt()
assert ! "-Zz".toInt(0)
assert "-Zz".toInt(36)! == -35 * 36 - 35
assert ! "009".toInt()
assert ! "009".toInt(8)
assert  "009".toInt(10)! == 9
assert ! "0".toInt(-1)
assert ! "0".toInt(1)
assert ! "0".toInt(37)
assert ! "0".toInt(370)
assert "0".toInt(0)! == 0
assert "0".toInt(2)! == 0
assert ! "0XFFFFFFFF".toInt(16)
assert ! "0XFFFFFFFF".toInt(10)
assert ! "0o1234".toInt(8)

# toFloat
assert("3".toFloat()! == 3.0)
assert("-3.14e+3".toFloat()! == -3.14E+3)
assert '+3.14E-12'.toFloat()! == 3.14e-12
assert("Nan".toFloat()!.isNaN())
assert("NaN".toFloat()!.isNaN())
assert("-nan".toFloat()!.isNaN())
assert("INF".toFloat()!.isInf())
assert("Infinity".toFloat()!.isInf())
assert("-Infinity".toFloat()!.isInf())
assert ! '+3.14E-12#####'.toFloat()
assert ! $'+3.14E-12\x00#####'.toFloat()
assert ! '   3.14'.toFloat()
assert ! '3.14  '.toFloat()
assert ! "3.14e100000000000000000000000000".toFloat()

# string compare
var b = "aaa"
var c = 'ccc'

assert($b < $c)
assert($b <= $c)
assert(!($b > $c))
assert(!($b >= $c))
assert !($'a\x00b' <= $'a\x00a')
assert $'a\x00b' != $'a\x00c'
assert $'a\x00b' != $'a'
assert "A" < "AB"
assert !("A" >= "AB")
assert "AB" > "A"
assert !("AB" <= "A")

# ifEmpty
assert $'あ'.ifEmpty('aa')! == $'あ'
assert $'\0'.ifEmpty('aa')! == $'\0'
assert "".ifEmpty('aa')! == 'aa'
assert "".ifEmpty('')! == ''
assert ! "".ifEmpty()

# case
assert "AbcDEf".lower() == "abcdef"
assert "AbcDEf".upper() == "ABCDEF"

assert "0AbcDEf".foldCase() == '0abcdef'
assert "0AbcDEfG".foldCase() == '0abcdefg'
assert "0AbcDEfG".foldCase($full:$true) == '0abcdefg'
assert 'あああ'.foldCase() == 'あああ'
assert ''.foldCase() == ''
assert $'\x00'.foldCase() == $'\x00'
assert $'\u1fcc\u1fD3'.foldCase() == $'\u1fc3\u0390'
assert $'\u1fcc\u1fD3'.foldCase($full:$false) == $'\u1fc3\u0390'
assert $'\u1fcc\u1fD3@'.foldCase($full:$true) == $'\u03b7\u03b9\u03b9\u0308\u0301@'
assert $'\u0049'.foldCase() == $'\u0069'
assert $'\u0049'.foldCase($full:$true) == $'\u0069'
assert $'\u0049'.foldCase($turkic:$false) == $'\u0069'
assert $'\u0049'.foldCase($turkic:$true) == $'\u0131'
assert $'\u0049'.foldCase($turkic:$true, $full:$true) == $'\u0131'
assert $'\u0130'.foldCase() == $'\u0130'
assert $'#A\u0130'.foldCase($full:$true) == $'#a\u0069\u0307'
assert $'\u0130'.foldCase($turkic:$false) == $'\u0130'
assert $'\u0130'.foldCase($turkic:$true) == $'\u0069'
assert $'\u0130'.foldCase($turkic:$true, $full:$true) == $'\u0069'
assert $'\U10400'.foldCase() == $'\U10428'
assert $'\U10500'.foldCase() == $'\U10500'

# assert ''
$ex = 234
try { $invalid.foldCase(); } catch e{ $ex = $e; }
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'must be UTF-8 encoded'

# string cast
assert(("fre" + 3.14) is String)
assert("hey" + $true == 'heytrue')
assert("" + $False == "false")

## compare
assert "AA".compare("AA") == 0
assert "AA".compare("AB") < 0
assert "AB".compare("AA") > 0