
var ret : [String]

## end with newline
{ echo aaa && echo bbb && echo && echo ccc; } | for $e in $STDIN { $ret.add($e); }

assert $ret.size() == 4
assert $ret[0] == 'aaa'
assert $ret[1] == 'bbb'
assert $ret[2] == ''
assert $ret[3] == 'ccc'
$ret.clear()

## not end with newline
{ echo aaa && echo 'bbb' && echo -en '\nccc'; } | for $e in $STDIN { $ret.add($e); }

assert $ret.size() == 4
assert $ret[0] == 'aaa'
assert $ret[1] == 'bbb'
assert $ret[2] == ''
assert $ret[3] == 'ccc'
$ret.clear()

## invalid fd
for $e in { var a = $STDIN.dup(); $a.close(); $a; } { $ret.add($e); }
assert $ret.size() == 0

{
    var fd = <(echo -e '123\n456')
    for $e in $fd { if $fd { $fd.close(); }; $ret.add($e); }
}
assert $ret.size() == 2 : "${$ret.size()}"   # closed, but still read all
assert $ret[0] == '123'
assert $ret[1] == '456'
$ret.clear()

## error from read callback
function raise($s : String) {
    $s :- throw new InvalidOperationError("must not be empty")
    $ret.add($s)
}

var ex = 34 as Any
try {
    { echo aaa && echo 'bbb' && echo -en '\nccc'; } | for $e in $STDIN { $raise($e); }
} catch $e {
    $ex = $e
}
assert ($ex as InvalidOperationError).message() == 'must not be empty'
assert $ret.size() == 2
assert $ret[0] == 'aaa'
assert $ret[1] == 'bbb'
$ret.clear()
$ex = 34

## large input
diff \
    <(for(var i = 0; $i < 4096; $i++) { echo 0123456789abcdef; }) \
    <(for(var i = 0; $i < 4096; $i++) { echo 0123456789abcdef; } | for $e in $STDIN { echo $e; })
