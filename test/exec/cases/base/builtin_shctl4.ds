
source $SCRIPT_DIR/../../_module4test/fullname.ds as f


say!!() {
    echo not say!! $@
}

## resolve by level
shctl fullname say!!
assert $? == 0
assert $REPLY == $'%mod2\x00say!!' : $REPLY
assert "$(eval "$REPLY" 123)" == 'not say!! 123'

shctl fullname -l 0 say!!
assert $? == 0
assert $REPLY == $'%mod2\x00say!!' : $REPLY
assert "$(eval "$REPLY" 123)" == 'not say!! 123'

assert $f.say_(0) == $'%mod3\x00say!!'
assert "$(eval "${$f.say_(0)}" 000)" == 'say!! 000'

assert $f.say_(1) == $'%mod2\x00say!!'
assert "$(eval "${$f.say_(1)}" 000)" == 'not say!! 000'

assert $f.say_(2) == ''

assert $f.say__(0) == $'%mod3\x00_say!!'
assert "$(eval "${$f.say__(0)}" 000)" == '_say!! 000'

assert $f.say__(1) == ''

## resolve by module name
shctl fullname -m $f say!!
assert $? == 0
assert $REPLY == $'%mod3\x00say!!'
assert "$(eval "$REPLY" 456)" == 'say!! 456'

shctl fullname -m $f _say!!
assert $? == 0
assert $REPLY == $'%mod3\x00_say!!'
assert "$(eval "$REPLY" 456)" == '_say!! 456'

assert $f.hey_() == $'%mod4\x00say0' : $f.hey_()
assert "$(eval "$REPLY" 9)" == '_say!! 9'

assert $f.hey__() == $'%mod4\x00_say0' : $f.hey__()
assert "$(eval "$REPLY" 909)" == '_say!! 909'

shctl fullname -m $f m
assert $? == 0
assert $REPLY == $'%mod3\x00m'
assert "$(eval "$REPLY" say0 456)" == '_say!! 456'

shctl fullname -m $f m
assert $? == 0
assert $REPLY == $'%mod3\x00m'
assert "$(eval "$REPLY" _say0 456 2>&1)" == 'ydsh: %mod3: cannot resolve private subcommand: _say0'
assert $? == 1

function cnf($s : String, $ss : [String]) {
    echo fallback: $ss
}
$CMD_FALLBACK = $cnf

assert shctl fullname -m 'module(%mod0)' _cmd_fallback_handler
assert $REPLY == $'%mod0\x00_cmd_fallback_handler'
assert "$(eval "$REPLY" 1 2 3)" == 'fallback: 1 2 3'


# resolve builtin, external
shctl fullname exit
assert $? == 0
assert $REPLY == 'exit'

shctl fullname -l 0 exit
assert $? == 0
assert $REPLY == 'exit'

shctl fullname cd
assert $? == 0
assert $REPLY == 'cd'

shctl fullname -l 0 cd
assert $? == 0
assert $REPLY == 'cd'

shctl fullname env
assert $? == 0
assert $REPLY == "/usr/bin/env"


# invalud
## level
shctl fullname _cmd_fallback_handler
assert $? == 1
assert $REPLY.empty()

shctl fullname -l 345 say!!
assert $? == 1
assert "$(shctl fullname -l 345 say!! 2>&1)" == 'ydsh: shctl: too large call level: 345'

shctl fullname -l 2 exit
assert $? == 1
assert "$(shctl fullname -l 2 exit 2>&1)" == 'ydsh: shctl: too large call level: 2'

shctl fullname -l 2 cd
assert $? == 1
assert "$(shctl fullname -l 2 cd 2>&1)" == 'ydsh: shctl: too large call level: 2'

shctl fullname -l 2 ls
assert $? == 1
assert "$(shctl fullname -l 2 ls 2>&1)" == 'ydsh: shctl: too large call level: 2'

shctl fullname -l def say!!
assert $? == 1
assert "$(shctl fullname -l def say!! 2>&1)" == 'ydsh: shctl: require positive number (up to UINT16_MAX): def'

## module
shctl fullname -m 345 say!!
assert $? == 1
assert "$(shctl fullname -m 345 say!! 2>&1)" == 'ydsh: shctl: invalid module object: 345'

shctl fullname -m 'module(Float)' say!!
assert $? == 1
assert "$(shctl fullname -m 'module(Float)' say!! 2>&1)" == 'ydsh: shctl: invalid module object: module(Float)'

shctl fullname -m 'module(%mod12)' say!!
assert $? == 1
assert "$(shctl fullname -m 'module(%mod12)' say!! 2>&1)" == 'ydsh: shctl: invalid module object: module(%mod12)'

true