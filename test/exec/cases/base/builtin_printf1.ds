# for printf command

## no format
assert "$(printf 2>&1)" == "${$SCRIPT_NAME.basename()}:4: printf: need format string
printf: printf [-v var] format [arguments]"
assert $? == 2

assert "$(printf -v tt 2>&1)" == "${$SCRIPT_NAME.basename()}:8: printf: need format string
printf: printf [-v var] format [arguments]"
assert $? == 2

## invalid option
assert "$(printf -w 2>&1)" == "${$SCRIPT_NAME.basename()}:13: printf: -w: invalid option
printf: printf [-v var] format [arguments]"
assert $? == 2

## -v option no-arg
assert "$(printf -v 2>&1)" == "${$SCRIPT_NAME.basename()}:18: printf: -v: option requires argument"
assert $? == 1

## -v option invalid name
assert "$(printf -v '' 2>&1)" == "${$SCRIPT_NAME.basename()}:22: printf: must be valid identifier"
assert $? == 1

## missing conversion specifier
assert "$(printf '12%' 2>&1)" == "${$SCRIPT_NAME.basename()}:26: printf: require at-least one directive after %
12"
assert $? == 1

assert "$(printf '12%#' 2>&1)" == "${$SCRIPT_NAME.basename()}:30: printf: \`%#': missing conversion specifier
12"
assert $? == 1

## invalid conversion specifier
printf -v val '23%y'
assert $? == 1
assert ! $reply.get('val')
assert "$(printf '@@%y' 2>&1)" == 
    "${$SCRIPT_NAME.basename()}:38: printf: \`y': invalid conversion specifier
@@"
assert $? == 1

assert "$(printf $'%\x00' 34 2>&1)" == 
    "${$SCRIPT_NAME.basename()}:43: printf: \`\x00': invalid conversion specifier"

## io error
if (test -e /dev/full) {
    assert "$(printf '%9999s' hello 2>&1 > /dev/full)" =~ $/: printf: format failed, .+/
    assert "$(printf '%9999d' 12 2>&1 > /dev/full)" =~ $/: printf: format failed, .+/
}

## just print
assert "$(printf 'hello')" == 'hello'
$reply.clear()
printf -v var 'hello'
assert $reply['var'] == 'hello'
printf -v varr 'world'
assert $reply['varr'] == 'world'
assert $reply.size() == 1

## print with escape sequence
assert "$(printf 'hello\tworld\n\\n!!')" == $'hello\tworld\n\\n!!'
$reply.clear()
printf -v var 'hello\tworld\n\\n!!'
assert $reply['var'] == $'hello\tworld\n\\n!!'

$reply.clear()
var pp = "$(printf '\hello\')"
printf -v var '\hello\'
assert $reply['var'] == '\hello\'
assert $reply['var'] == $pp

$reply.clear()
$pp = "$(printf '@@\chello\')"
printf -v var '@@\chello\'  # stop printing
assert $reply['var'] == '@@'
assert $reply['var'] == $pp

## print with directive
$reply.clear()
$pp = "$(printf 'hello%%' 1)"
printf -v var 'hello%%' 1   # %% directive
assert $reply['var'] == 'hello%'
assert $reply['var'] == $pp

$reply.clear()
$pp = "$(printf 'hello\%%' 1)"
printf -v var 'hello\%%' 1  # %% directive
assert $reply['var'] == 'hello\%'
assert $reply['var'] == $pp

$reply.clear()
$pp = "$(printf '%c=%c\n1' key あい)"
printf -v var '%c=%c\n1' key あい   # %c directive
assert $reply['var'] == $'k=あ\n1'
assert $reply['var'] == $pp

$reply.clear()
$pp = "$(printf '%c' $'\xFF\xFE')"
printf -v var '%c' $'\xFF\xFE'   # %c directive
assert $reply['var'] == $'\xFF'  # just print invalid utf8 byte
assert $reply['var'] == $pp

$reply.clear()
printf -v var '%s=%s\n' key 1   # %s directive
assert $reply['var'] == $'key=1\n'

$reply.clear()
printf -v var '%js=%ls\n' key 1   # %s directive
assert $reply['var'] == $'key=1\n'

$reply.clear()
printf -v var '%s=%s\n' key   # %s directive
assert $reply['var'] == $'key=\n'

$reply.clear()
printf -v var '%s=%b\n' 'key\tvalue1' 'key\tvalue2'  # %b directive (interpret escape sequence)
assert $reply['var'] == 'key\tvalue1=' + $'key\tvalue2\n'

$reply.clear()
printf -v var '(%b)'  # %b directive (no-arg)
assert $reply['var'] == '()'

$reply.clear()
printf -v var '%s=%q\n' 'key\tvalue1' $'key\tvalue2'  # %q directive (quote as shell arg)
assert $reply['var'] == 'key\tvalue1=' + $'key\tvalue2'.quote() + $'\n'

$reply.clear()
$pp = "$(printf '(%q)')"
printf -v var '(%q)'  # %q directive (no-arg)
assert $reply['var'] == '()'
assert $reply['var'] == $pp


## multiple args with directive
$reply.clear()
$pp = "$(printf '%s' 1 2 3 4)"
printf -v var '%s' 1 2 3 4
assert $reply['var'] == '1234'
assert $reply['var'] == $pp

$reply.clear()
printf -v var '%s %s\n' 1 2 3 4 5
assert $reply['var'] == $'1 2\n3 4\n5 \n'

$reply.clear()
printf -v var '@\c %s\n' 1 2 3 4 5
assert $reply['var'] == '@'  # stop printing  even if multiple args

## multiple args with no-directive
$reply.clear()
printf -v var 'hello' 1
assert $reply['var'] == 'hello'

$reply.clear()
printf -v var 'hello' 1 2 3
assert $reply['var'] == 'hello'

$reply.clear()
printf -v var 'hello%%\n' 1 2 3
assert $reply['var'] == $'hello%\n'

$reply.clear()
printf -v var '%%hello%%\n' 1 2 3 4 5
assert $reply['var'] == $'%hello%\n'

## precision
### %s
$reply.clear()
printf -v var '%.0s' あいう
assert $reply['var'] == ''
assert $reply['var'] == "$(printf '%.0s' あいう)"

$reply.clear()
printf -v var '%.*s' 1 あいう
assert $reply['var'] == 'あ'
assert $reply['var'] == "$(printf '%.*s' 1 あいう)"

$reply.clear()
printf -v var '%.*s' 2 あいう
assert $reply['var'] == 'あい'
assert $reply['var'] == "$(printf '%.*s' 2 あいう)"

$reply.clear()
printf -v var '%.*s' 3 あいう
assert $reply['var'] == 'あいう'
assert $reply['var'] == "$(printf '%.*s' 3 あいう)"

$reply.clear()
printf -v var '%.*s' 30 あいう
assert $reply['var'] == 'あいう'
assert $reply['var'] == "$(printf '%.*s' 30 あいう)"

$reply.clear()
printf -v var '%.*s' -1 あいう
assert $reply['var'] == 'あいう'
assert $reply['var'] == "$(printf '%.*s' -1 あいう)"

### %c
$reply.clear()
printf -v var '%.*c' 0 あいう
assert $reply['var'] == 'あ'
assert $reply['var'] == "$(printf '%.*c' 0 あいう)"

$reply.clear()
printf -v var '%.*c' 1 あいう
assert $reply['var'] == 'あ'
assert $reply['var'] == "$(printf '%.*c' 1 あいう)"

$reply.clear()
printf -v var '%.*c' 2 あいう
assert $reply['var'] == 'あ'
assert $reply['var'] == "$(printf '%.*c' 2 あいう)"

$reply.clear()
printf -v var '%.*c' -3 あいう
assert $reply['var'] == 'あ'
assert $reply['var'] == "$(printf '%.*c' -3 あいう)"

### %b
$reply.clear()
printf -v var '%.*b' 2 'あ\tい'
assert $reply['var'] == $'あ\t'
assert $reply['var'] == "$(printf '%.*b' 2 'あ\tい')"

### %q
$reply.clear()
printf -v var '%.*q' -1 $'あ\tい'
assert $reply['var'] ==  $'あ\tい'.quote()
assert $reply['var'] == "$(printf '%.*q' -1 $'あ\tい')"

$reply.clear()
printf -v var '%.*q' 3 $'あ\tい'
assert $reply['var'] ==  "あ$'"
assert $reply['var'] == "$(printf '%.*q' 3 $'あ\tい')"

## width
$reply.clear()
printf -v var '%*c' 4 あいう
assert $reply['var'] == '   あ'
assert $reply['var'] == "$(printf '%*c' 4 あいう)"

$reply.clear()
printf -v var '%*s' 4 あいう
assert $reply['var'] == ' あいう'
assert $reply['var'] == "$(printf '%*s' 4 あいう)"

$reply.clear()
printf -v var '%*s' -4 あいう
assert $reply['var'] == 'あいう '
assert $reply['var'] == "$(printf '%*s' -4 あいう)"

$reply.clear()
printf -v var '%*b' -1 'あ\tいう'
assert $reply['var'] == $'あ\tいう'
assert $reply['var'] == "$(printf '%*b' -1 'あ\tいう')"

$reply.clear()
printf -v var '%*b' -10 'あ\tいう'
assert $reply['var'] == $'あ\tいう      '
assert $reply['var'] == "$(printf '%*b' -10 'あ\tいう')"

$reply.clear()
printf -v var '%-*q' 15 $'あ\tいう'
assert $reply['var'] == "あ$'\x09'いう     "
assert $reply['var'] == "$(printf '%-*q' 15 $'あ\tいう')"

$reply.clear()
printf -v var '%-*.8q' 15 $'あ\tいう'
assert $reply['var'] == "あ$'\x09'       "
assert $reply['var'] == "$(printf '%-*.8q' 15 $'あ\tいう')"

var expect = ""
for(var i = 0; $i < 999/8; $i++) {
    $expect += "        "
}
for(var i = 0; $i < 999%8; $i++) {
    $expect += " "
}

$reply.clear()
printf -v var '%-*.*s' 999 999 あいう
assert $reply['var'] == "あいう" + $expect.slice(3) : $reply['var'].count() as String
assert $reply['var'] == "$(printf '%-*.*s' 999 999 あいう)"