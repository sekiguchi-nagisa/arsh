#$test($status = 0)

function opt($v : Int) : Option<String> {
    return $v > -1 ? "hello" : new Option<String>()
}

# boolean cast
assert $opt(1)

assert ! $opt(-2)

if $opt(1) {
    assert $true
} else {
    assert $false
}

var c = 0
for(var i = 4; $opt($i); $i--) {
    $c++
}
assert $c == 5

assert $opt(5) ? $true : $false
assert $opt(-3) ? $false : $true

assert $opt(45) as Boolean
assert !($opt(-90) as Boolean)


# unwrap
assert $opt(45)! == "hello"
assert (34 as Option<Int>)! == 34

var in = $false
try {
    assert $opt(-43)! == "hello"
} catch $e {
    $in = $true
    assert $e is UnwrapError
}
assert $in


# null coalescing
assert $opt(3) ?? "de" == "hello"
assert $opt(-1) ?? "de" == "de"
assert new Float?() ?? 34.0 == 34.0


# assign
{
var o = $opt(45)
$o = "world"
assert $o! == "world"

$o = new String?()
$o = "34"
assert $o && $o! == "34"
assert ($o ? $o!.size() : 0) == 2
}

# collection with option value
assert [23 as Int?] as String == '[23]'
assert [34 : new Int?()] as String == "[34 : (invalid)]"
assert (34, new Bool?()) as String == "(34, (invalid))"
assert "${[3 as Int?]}" == '3'

var ex = 34 as Any
try { assert "${(2, $false, new Error?())}" == '2 false'; }  catch $e { $ex = $e}
# assert $ex is UnwrapError

assert "$(echo ${[$false as Boolean?]})" == 'false'
$ex = 34
try { echo ${['s' : new Float?()]}; }  catch $e { $ex = $e }
assert !($ex is UnwrapError)
$ex = 43
try { echo ${(new Float?(),)}; } catch $e { $ex = $e }
assert !($ex is UnwrapError)
assert $ex as Int == 43

# type
assert !(new Int?() is Int)
assert (23 as Int?) is Int
assert new Int?() is Int?
assert new Int?() is Any?
assert new Any?() is Int?

# nested option
var no = [34 as Int?].get(0)
assert $no is Int?
assert $no is Int??
assert $no is Option<Int?>??
assert $no! == 34
assert ! ([new Int??()].get(0))

# Nothing option
assert new Nothing?() is Int?
var dummy = new Nothing?()
assert $dummy is Nothing?
$no = $dummy
assert ! $no

assert $NONE is Nothing?
assert $None is Nothing?
assert $none is Nothing?

## special case of Nothing option
assert ($true ? 34 : $none) is Int?
assert ($true ? $none : "") is String?
assert ($true ? $none : $true ? new Error('') : new ArithmeticError('')) is Error?
assert ($true ? $none : $None) is Nothing?
assert ($true ? $none : "34".toInt()) is Int?