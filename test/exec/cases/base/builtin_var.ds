# for builtin variable or constant

# $, PID, PPID
assert $$ == $PID
assert $$ is Int
assert $PID != $PPID
assert $PID is Int
assert $PPID is Int

assert "$$" == "$(echo $$)"  # $$ is not changeed in subshell
assert "$PPID" == "$(echo $PPID)" # PPID is not changed in subshell
assert "$PID" != "$(echo $PID)"  # PID is changed in subshell
assert "$({ assert $$ != $PID; })".empty()  # in subshell, $$ is not equivalent to PID


# UID, EUID
assert $UID == $EUID
assert $UID as String == "$(id -u)"
assert $UID is Int  # uid and euid is Int
assert $EUID is Int

# uname
assert($OSTYPE == "$(uname -s)".lower() || $/cygwin/ =~ $OSTYPE || $/msys/ =~ $OSTYPE)
assert $OSTYPE == "linux" || $OSTYPE == 'darwin' || $OSTYPE == 'cygwin' || $OSTYPE == 'msys' || $OSTYPE == 'emscripten' : "$OSTYPE"
assert $MACHTYPE == "$(uname -m)" || $MACHTYPE =='i386' || $MACHTYPE =~ $/arm/ || $MACHTYPE =~ $/aarch/ : "$MACHTYPE"

# random number, at least 32767 (RAND_MAX)
{
    var r = $RANDOM
    assert $r != $RANDOM    # value of $RANDOM is random number
}
var rnds : [Int]
for(var i = 0; $i < 10; $i++) {
    var a = "$(echo $RANDOM)".toInt()!
    var b = $RANDOM
    assert $a != $b
    $rnds.add($a)
    $rnds.add($b)
}
$rnds.sort()
for(var i = 0; $i < $rnds.size(); $i++) {
    assert $rnds[$i] != $rnds[$i-1]
}


# seconds
$SECONDS = 0
var sec = $SECONDS
sleep 1

assert $SECONDS != $sec

# BIN_NAME
assert !$BIN_NAME.empty()
assert test -e "$BIN_NAME"

# EAW
assert $EAW == 1