
# anonymous function in toplevel scope

# single expression
assert (function() => 34 ) is () -> Int
var a1 = function ($a : Int)
   =>
    return "<$a>"

assert $a1 is (Int) => String
assert $a1(34) == "<34>"

assert (function($a : Int, $b : String) => {
    var r = ""
    for(var i = 0; $i < $a; $i++) {
        $r += $b
    }
    $r
} )(5, 'a') == 'aaaaa'

assert (function () -> {;}) is () -> Void
assert (function () -> {}) is () -> Void
assert (function () => 34 as Void) is ()->Void

# single expression with return
assert (function ($i : Int) => {
    if $i < 0 {
        return
    } elif $i > 0 {
        return
    }
    34.2
}) is (Int) ->
   Void


# single expression with return type
var a2 = function() : Void => 34
assert $a2 is () -> Void

var a3 = function ($s : String) : String! => $s
assert $a3 is (String) -> String!
assert $a3('hello')! == 'hello'

var a4 = (function ($a : Int) : Any => $a)
assert $a4 is (Int) => Any
assert $a4(34) is Any
assert $a4(-199) as Int == -199

# subtype
$a4 = $a1
assert $a4 is (Int) => String
assert $a4(333) is String
assert $a4(333) as String == '<333>'
assert ($a4 as (Int) -> String)(99) == '<99>'

assert (function() -> 23) is () -> Int
assert (function() -> 23) is () -> Int!
assert (function() -> 23) is () -> Any
assert (function() -> 23) is () -> Void
assert (function() => {}) is () => Void
assert ! (
    (function () -> {}) is () -> Any
)
assert ! (
    (function () -> {}) is () -> Any!
)

# subtype with more params
let b0 = function($a : String, $b : ArithmeticError) : Any => $a + "=" + $b.name() + ":" + $b.message()
assert $b0 is (String, ArithmeticError) -> Any
assert ! ($b0 is (Any, Error) -> String)
assert ! ($b0 is (Any, ArithmeticError) -> Any)
assert ! ($b0 is (ArithmeticError) -> Any)

assert $b0("a", new ArithmeticError("12345")) as String == "a=ArithmeticError:12345"

let b1 = function($a : Any, $b : Error) : String => $a + ">>" + $b.name() + "%" + $b.message()
assert $b1 is (Any, Error) -> String
assert $b1 is (String, ArithmeticError) -> Any
assert $b1 is (Float, OutOfRangeError) -> String!

assert $b1(12, new SystemError("AAA")) == "12>>SystemError%AAA"

var b2 = $b0
$b2 = $b1
assert $b2("hello", new ArithmeticError("ABCD")) as String == "hello>>ArithmeticError%ABCD"
assert ($b2 as (Any, Error) -> String)("hello", new OutOfRangeError("@@")) == "hello>>OutOfRangeError%@@"

assert (function($s : Any) : Any => $s) is (String) => Any
assert (function($s : Any) : Any => $s) is (String) => Any!
assert ! ((function($s : Any) : Any => $s) is (Any!) => Any)
assert ! ((function($s : String) : Any => $s) is (String) => String)