#$test($status = 0)

# Int
var i32 = 23
assert($i32 is Int)
assert($i32 is Int)
assert(+43 is Int)
assert(2147483647 is Int)
assert(+2147483647 is Int)
assert(-2147483647 is Int)

assert(0xFFFFFFFF is Int)
assert(0xfFFFfFfF == 4294967295)
assert(0x7fffffff is Int)
assert(0x7fffffff == 2147483647)
assert(0x80000000 is Int)
assert(0x80000000 == 2147483648)
assert(037777777777 is Int)
assert(0o37777777777 == 4294967295)
assert(0O17777777777 is Int)
assert(0o17777777777 == 2147483647)
assert(0o20000000000 is Int)
assert(0o20000000000 == 2147483648)

#Int64
var i64 = 63457
assert($i64 is Int)
assert(9223372036854775807 is Int)
assert(+9223372036854775807 is Int)
assert(-9223372036854775807 is Int)

assert(0xFFFFFFFFFFFFFFFF is Int)
assert(0xFFFFFFFFFFFFFFFF == -1)
assert(0X7FFFFFFFFFFFFFFF is Int)
assert(0x7FFFFFFFFFFFFFFF == 9223372036854775807)
assert(0x8000000000000000 is Int)
assert(0x8000000000000000 == -1 - 9223372036854775807)
assert(001777777777777777777777 is Int)
assert(00001777777777777777777777 == -1)
assert(0O777777777777777777777 is Int)
assert(0o777777777777777777777 == 9223372036854775807)
assert(0o1000000000000000000000 is Int)
assert(0o1000000000000000000000 == -1 - 9223372036854775807)

# Int op
assert((12 + 3) is Int)
assert(12 + 3 == 15)
var ex = 34 as Any
try { 9223372036854775807 + 1 } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((150 - 50) is Int)
assert(150 - 50 == 100)
$ex = 56
try { -2 - 9223372036854775807 } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((50 * 10) is Int)
assert(50 * 10 == 500)
$ex = 560
try { 9223372036854775807 * 2 } catch $e { $ex = $e; }
assert $ex is ArithmeticError

assert((99 / 33) is Int)
assert(99 / 33 == 3)
$ex = 33
try { 12/0 } catch($e) { $ex = $e}
assert($ex is ArithmeticError)

$ex = 34
try { (-9223372036854775807-1)/-1 } catch e { $ex = $e; }
assert ($ex as ArithmeticError).message() == 'integer overflow'

assert((99 % 33) is Int)
assert(99 % 33 == 0)
$ex = 5
try { 12%0 } catch($e) { $ex = $e}
assert($ex is ArithmeticError)

assert(12 == + 12)
assert(-12 == - 12)
assert((! 43) is Int)

$ex = 34
try {
    let INT_MIN = -1 - 9223372036854775807
    assert - $INT_MIN == $INT_MIN
} catch e { $ex = $e; }
assert $ex is ArithmeticError

assert(3456 != 345)
assert(3543 < 9999)
assert(32 > -999)
assert(43 <= 43)
assert(!(43 <= 0))
assert(55 >= 55)
assert(43 >= -353)

assert((1 or 2) is Int)
assert((1 or 2) == 3)

assert((3 and 3) is Int)
assert((3 and 3) == 3)

assert((1 xor 2) is Int)
assert((1 xor 2) == 3)

assert 1<<63 == -9223372036854775807-1
assert 2<<63 == 0
assert 3<<63 == -9223372036854775807-1
assert -54673<<50 == -6216093385678127104
assert -54673<<51 == 6014557302353297408

assert 9223372036854775807>>0 == 9223372036854775807
assert 9223372036854775807>>63 == 0
assert 9223372036854775807>>3 == 1152921504606846975
assert -9223372036854775807>>0 == -9223372036854775807
assert -9223372036854775807>>3 == -1152921504606846976
assert -9223372036854775807>>-377777 == -281474976710656
assert -9223372036854775807>>15 == -281474976710656

assert 9223372036854775807>>>63 == 0
assert 9223372036854775807>>>3 == 1152921504606846975
assert -9223372036854775807>>>3 == 1152921504606846976
assert -9223372036854775807>>0 == -9223372036854775807

assert (-23).abs() == 23
assert (+45).abs() == 45
assert 0.abs() == 0
assert (-0).abs() == 0

$ex = 34
try {
    let INT_MIN = -1 - 9223372036854775807
    assert $INT_MIN.abs() == $INT_MIN;
} catch e { $ex = $e; }
assert $ex is ArithmeticError

# to Float
$i64 = 1030792151049
assert($i64 is Int)

assert($i64 as Float is Float)
assert($i64 as Float as String == '1030792151049.0')
assert($i64.toFloat() as String == '1030792151049.0')
$i64 = 7865
assert($i64 as Float as String == '7865.0')
assert($i64.toFloat() as String == '7865.0')
$i64 = -12344
assert($i64 as Float as String == '-12344.0')
assert($i64.toFloat() as String == '-12344.0')

# compare
assert 1.compare(1) == 0
assert 1.compare(0) > 0
assert 1.compare(2) < 0
assert (-1).compare(-1) == 0
assert (-1).compare(0) < 0
assert (-1).compare(-2) > 0