
function assertArray($x : Array<String>, $y : Array<String>) {
    assert diff <(for $a in $x { echo $a; }) <(for $a in $y { echo $a; })
}

function assertEmptyComp($s : String) {
    assert complete $s > /dev/null
    assert $COMPREPLY.size() == 1
    assert $COMPREPLY[0].empty()
}

function comp($a : String, $path : String) : Array<String> {
    import-env PATH
    let old = $PATH
    $PATH = $path

    return try {
        $(complete $a)
    } finally {
        $PATH = $old
    }
}

function escape($s : String) : String {
    var c = 0
    var buf = ''
    for $ch in $s {
        if $c == 0 && '+-0123456789'.indexOf($ch) != -1 {
            $buf += '\'
        }
        if $ch == ' ' || $ch == '[' || $ch == ']'{
            $buf += '\'
        }
        $buf += $ch
        $c++
    }
    return $buf
}
function escape2($s : String) : String {
    var buf = ''
    for $ch in $s {
        if $ch == ' ' || $ch == '$' || $ch == '[' || $ch == ']'{
            $buf += '\'
        }
        $buf += $ch
    }
    return $buf
}

function eachEcho($list : [String]) {
    for $e in $list { echo $e; }
}

__cmd() {
    var type = new String!()

    echo cmd
    echo __cmd
    echo __file
    echo file
    echo files

    help | cut -d ' ' -f 1
    for $dir in $@ {
        if $dir.startsWith('--') { $type = $dir; continue; }
        for $a in $(ls $dir) {
            var name = $dir
            if $name[-1] != '/' {
                $name += '/'
            }
            $name += $a
            if(test -f $name && test -x $name) {
                echo ${$escape($a)};
            }
        }
    }

    # keywords
    case $type {
    '--expr' => $eachEcho(['new', '"', '$(', '>(', '@(', '<(', '(', '[', '{',
                           'do', 'for', 'if', 'case', 'try', 'while', 'function',
                           'break', 'continue', 'return', 'time',
                           '!', '+', '-', 'throw', 'coproc'])
    '--stmt' => $eachEcho(['new', '"', '$(', '>(', '<(', '@(', '(', '[', '{',
                           'do', 'for', 'if', 'case', 'try', 'while', 'function',
                           'break', 'continue', 'return', 'time',
                           '!', '+', '-', 'throw', 'coproc',

                            'assert', 'defer',
                           'exportenv', 'importenv',
                           'let', 'source', 'source!', 'typedef',
                           'var', ';'])
    }
}

cmd() {
    __cmd $@ | sort | uniq
}

## perform sort command with 'C' locale
export-env LC_ALL = 'C'
$IFS = $'\n'


# error
complete '-Q' 2> /dev/null
assert($? == 2)
assert complete -Q 2>&1 | grep 'ydsh: complete: -Q: invalid option'


# empty string
assert($(complete).empty())
assert($(complete '').empty())
assert($(complete '     ').empty())


# complete command name
$assertArray($(cmd /bin /usr/bin --stmt | grep '^l'), $comp('l', '/bin:/usr/bin'))
$assertArray($(cmd | grep '^p'), $comp('p', ''))
$assertArray($(cmd /bin /usr/bin --stmt), $comp('echo; ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('35 | ', '/bin:/usr/bin'))
if(test -d ~/bin) {
    var home = "$(echo ~)"
    $assertArray($(cmd /bin /usr/bin ~/bin --stmt), $comp('echo; ', "/bin:/usr/bin:$home/bin"))
}
$assertArray($(cmd /bin /usr/bin --stmt), $comp('{ ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --stmt), $comp('echo & ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --stmt), $comp('echo &! ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --stmt), $comp('echo &| ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --stmt| grep '^l'), $comp('{l', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('echo && ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('export-env HOGE = ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr | grep '^l'), $comp('export-env HOGE = l', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('34 and ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('34 or ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('34 xor ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('for $a in ', '/bin:/usr/bin'))
$assertArray($(cmd /bin /usr/bin --expr), $comp('if $true {} elif ', '/bin:/usr/bin'))

# complete file name
__file() {
    var type = $# > 1 && $2.startsWith('--') ? $@.pop() : new String!()

    let dir = $@[0]
    for $a in $(ls -A $dir) {
        var name = $dir
        if $name[-1] != '/' {
            $name += '/'
        }
        $name += $a
        if(test -d $name) {
            echo ${$escape2($a)}/
        } else {
            if($@.size() > 1) {
                if(test -f $name) {
                    if(test -x $name) {} else {
                        continue
                    }
                }
            }
            echo ${$escape2($a)}
        }
    }
}

file() {
    __file $@ | sort | uniq
}

files() {
    for $p in $@ {
        __file $p
    } | sort | uniq
}

$assertArray($(file '/bin' 1), $(complete '/bin/'))
$assertArray($(file '/usr/bin/' 1), $(complete '/usr/bin/'))
$assertArray($(file '.' 1), $(complete './'))
$assertArray($(file '.'), $(complete 'echo '))
$assertArray($(file '.'), $(complete 'echo hoge '))
$assertArray($(file '.'), $(complete 'echo hoge 34 '))
$assertArray($(file '.'), $(complete 'echo hoge 34='))
$assertArray($(file '.'), $(complete 'echo hoge 34=./'))
$assertArray($(file '.'), $(complete 'echo hoge \\=./'))
$assertArray(new [String](), $(complete 'echo if\=./'))
$assertArray(new [String](), $(complete 'echo =./'))
$assertArray(new [String](), $(complete 'echo ='))
$assertArray($(file '.'), $(complete 'echo \'))
$assertArray($(ls -pa . | grep '^\.' | sort | uniq), $(complete 'echo .'))
$assertArray($(file '/' | grep '^b'), $(complete 'echo /b'))
$assertArray($(file '/' | grep '^b'), $(complete 'echo if=/b'))
$assertArray($(file '/usr/bin'), $(complete 'echo > /usr/bin/'))
$assertArray($(file ~), $(complete 'echo 23 ~/'))
$assertArray($(file ~), $(complete 'echo 23=~/'))
$assertArray($(file ~), $(complete 'echo 23\\=~/'))
if !$OSTYPE.startsWith("CYGWIN") {
    assert "~$(cat /etc/passwd | grep ^root | cut -d : -f 1)/" == "$(complete 'echo ~' | grep '~root')"
    assert "~$(cat /etc/passwd | grep ^root | cut -d : -f 1)/" == "$(complete '~' | grep '~root')"
}
$assertArray(new [String](), $(complete 'echo \~root'))
$assertArray(new [String](), $(complete 'echo if\=~/'))
$assertArray(new [String](), $(complete 'echo if=\~/'))
$assertArray(new [String](), $(complete 'echo ${23}if=~/'))
$assertArray(new [String](), $(complete 'echo ~/=~/'))
$assertArray(new [String](), $(complete 'echo AA=AA/AA=~/'))
$assertArray(new [String](), $(complete 'echo \=~'))
$assertArray(new [String](), $(complete 'echo =~'))
$assertArray($(file '.'), $(complete '$(echo '))
$assertArray($(file '.'), $(complete '{echo hello '))
$assertArray($(file '.'), $(complete 'echo | echo < '))
$assertArray($(file '.'), $(complete 'echo > '))
$assertArray($(file '.'), $(complete 'echo >./'))
$assertArray($(file '.'), $(complete 'echo <<<./'))
$assertArray($(file '.'), $(complete 'echo <<< '))
$assertArray(new [String](), $(complete 'echo 2>&1./'))
$assertArray(new [String](), $(complete 'echo 1>&2./'))
$assertArray(new [String](), $(complete 'echo > if=./'))
$assertArray(new [String](), $(complete 'echo > if=~'))
$assertArray($(file '.'), $(complete 'echo | echo $TRUE '))
$assertArray($(file '.'), $(complete 'echo ${34} '))
$assertArray($(file '.'), $(complete '$(echo $TRUE '))
$assertArray(new [String](), $(complete 'echo ${34}'))
$assertArray(new [String](), $(complete 'echo ${34}./'))
$assertArray(new [String](), $(complete 'echo ${34}=./'))
$assertArray($(file '.'), $(complete '34 with < '))
$assertArray($(file '/bin'), $(complete '$true with >> /bin/'))
$assertArray($(file '.'), $(complete 'AAA='))
$assertArray($(file '.'), $(complete 'AAA=hoge:'))
$assertArray($(file '/bin'), $(complete 'AAA=hoge:/bin/'))
$assertArray($(file '/usr/bin'), $(complete 'AAA=${3434}:/usr/bin/'))
$assertArray($(file ~/), $(complete 'AAA=hoge\\:~/'))
$assertArray($(file ~/), $(complete 'AAA=~/'))
$assertArray($(file ~/), $(complete 'AAA=${1234}:~/'))
$assertArray($(file '.'), $(complete '@('))
$assertArray($(file '/usr/bin'), $(complete '@(34 /usr/bin/'))
$assertArray($(file ~/), $(complete '@(${45 + 45} ~/'))
$assertArray(new [String](), $(complete 'importenv home '))
$assertArray(new [String](), $(complete 'assert (ls) : "de" '))
$assertArray(new [String](), $(complete 'echo :'))
$assertArray(new [String](), $(complete 'echo 345:./'))
$assertArray(new [String](), $(complete 'AAA=345\:'))
$assertArray(new [String](), $(complete 'AAA=${3434}./'))

var CWD = "$(pwd -P)"

# complete module name from SCRIPT_DIR
$assertArray($(files $MODULE_DIR $MODULE_HOME $SCRIPT_DIR), $(complete 'source '))
$assertArray($(files $MODULE_DIR $MODULE_HOME $SCRIPT_DIR), $(complete 'source! '))

$assertArray($(file '/bin' | grep '^l'), $(complete 'source /bin/l'))
$assertArray($(file '/bin' | grep '^l'), $(complete 'source! /bin/l'))
$assertArray($(file ~), $(complete 'source ~/'))
$assertArray($(file ~), $(complete 'source! ~/'))
if !$OSTYPE.startsWith("CYGWIN") {
    assert "~$(cat /etc/passwd | grep ^root | cut -d : -f 1)/" == "$(complete 'source ~' | grep '~root')"
}
$assertArray(new [String](), $(complete 'source \~root'))
$assertArray(new [String](), $(complete 'source! \~root'))
$assertArray(new [String](), $(complete 'source! :'))
$assertArray(new [String](), $(complete 'source! /:'))
$assertArray(new [String](), $(complete 'source! if=/'))
$assertArray(new [String](), $(complete 'source! if=~/'))

true
