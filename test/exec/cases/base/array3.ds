

## map
#var sum = 0
#$(seq 1 10).map(function($a : String) => $a.toInt()!) \
#            .forEach(function($a : Int) => sum += $a)
#assert $sum == (1+2+3+4+5+6+7+8+9+10)

# indexOf
assert [2,34,-18].indexOf(34) == 1
assert [2,34,-18].indexOf(2) == 0
assert [2,34,-18].indexOf(343) == -1
assert [3,2,34,2,-18].indexOf(2) == 1
assert new [String]().indexOf('34') == -1

assert [3,2,34,2,-18].indexOf(2, 0) == 1
assert [3,2,34,2,-18].indexOf(2, 1) == 1
assert [3,2,34,2,-18].indexOf(2, 2) == 3
assert [3,2,34,2,-18].indexOf(2, 5) == -1
assert [3,2,34,2,-18].indexOf(2, -2) == 3
assert [3,2,34,2,-18].indexOf(2, -5) == 1

var ex = 34 as Any
try { [3,2,34,2,-18].indexOf(2, 6); } catch e { $ex = $e; }
assert $ex is OutOfRangeError
$ex = 34
try { [3,2,34,2,-18].indexOf(2, -6); } catch e { $ex = $e; }
assert $ex is OutOfRangeError

# lastIndexOf
assert [2,34,-18].lastIndexOf(34) == 1
assert [2,34,-18].lastIndexOf(2) == 0
assert [2,34,-18].lastIndexOf(343) == -1
assert [3,2,34,2,-18].lastIndexOf(2) == 3
assert new [String]().lastIndexOf('34') == -1

# contains
assert [45.0/0.0, 34.9, 3.000].contains(-90.0/-0.0)
assert ![45.0/0.0, 34.9, 3.000].contains(90.0/-0.0)
assert [-34.4,0.0/0.0, 34.9, 3.000].contains(0.0/-0.0)
assert ! new [Bool]().contains($true)
assert ! new [Bool]().contains($false)

# removeRange
var aa = @({1..10})
assert $aa.size() == 10
assert $aa.join(" ") == '1 2 3 4 5 6 7 8 9 10'

$aa.removeRange(1,1)  # no remove
assert $aa.size() == 10
assert $aa.join(" ") == '1 2 3 4 5 6 7 8 9 10'

$aa.removeRange(1,3)
assert $aa.size() == 8
assert $aa.join(" ") == '1 4 5 6 7 8 9 10'

$aa.removeRange(4,1)  # no remove
assert $aa.size() == 8
assert $aa.join(" ") == '1 4 5 6 7 8 9 10'

$aa.removeRange(-2)
assert $aa.size() == 6
assert $aa.join(" ") == '1 4 5 6 7 8'

$aa.removeRange(-2, -1)
assert $aa.size() == 5
assert $aa.join(" ") == '1 4 5 6 8'

$aa.removeRange($aa.size())
assert $aa.size() == 5
assert $aa.join(" ") == '1 4 5 6 8'

$aa.removeRange(99999)
assert $aa.size() == 5
assert $aa.join(" ") == '1 4 5 6 8'

$aa.removeRange(-699)  # 0
assert $aa.size() == 0

# searchSorted / searchSortedBy
var ii = [1,3,6,14]
for r in [
        (-199, -1), (0, -1), (1, 0), 
        (2, -2), (3,1), (4,-3), (5, -3), 
        (6,2), (7,-4), (8,-4), (13, -4), 
        (14, 3), (15, -5), (100, -5)] {
    for(var i = 0; $i < 2; $i++) {
        var index = $i == 0 ? $ii.searchSorted($r._0) : $ii.searchSortedBy($r._0, function(x,y) => $x.compare($y))
        assert $r._1 == $index: "at ${$r as String}"
        if $index < 0 {
            var tmp = $ii.copy()
            $tmp.insert(-($index + 1), $r._0)
            assert -($index + 1) == $tmp.searchSorted($r._0) : "at ${$r as String}, ${$tmp as String}"
        }
    }
}
assert (new [Int]()).searchSorted(1234) == -1
assert [3,3,3,3].searchSorted(0) == -1
assert [3].searchSorted(3) == 0
assert [3,3].searchSorted(3) == 0 # first occurred index
assert [3,3,3].searchSorted(3) == 0 # first occurred index
assert [3,3,3,3].searchSorted(3) == 0 # first occurred index
assert [3,3,3,3,3].searchSorted(3) == 0 # first occurred index

assert (new [Int]()).searchSortedBy(1234, function(x,y)=>$x.compare($y)) == -1
assert [3,3,3,3].searchSortedBy(0, function(x,y)=>$x.compare($y)) == -1
assert [3].searchSortedBy(3, function(x,y)=>$x.compare($y)) == 0
assert [3,3].searchSortedBy(3, function(x,y)=>$x.compare($y)) == 0 # first occurred index
assert [3,3,3].searchSortedBy(3, function(x,y)=>$x.compare($y)) == 0 # first occurred index
assert [3,3,3,3].searchSortedBy(3, function(x,y)=>$x.compare($y)) == 0 # first occurred index
assert [3,3,3,3,3].searchSortedBy(3, function(x,y)=>$x.compare($y)) == 0 # first occurred index

$ex = 23
try {  $(seq 1 100).searchSortedBy('80', function(x,y) => $x.size()/($x.size()-$y.size())); } catch e { $ex = $e; }
assert $ex is ArithmeticError

$ex = 23
try {
    var aaa = $(seq 1 200);
    var r = $aaa.searchSortedBy('88', function(x,y) => { $aaa.clear(); $x.compare($y); })
    assert $r == 100000
} catch e { $ex = $e; }
assert ($ex as InvalidOperationError).message() == 'cannot modify array object during searchSortedBy method'