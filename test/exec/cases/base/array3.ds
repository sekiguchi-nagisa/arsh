

## map
#var sum = 0
#$(seq 1 10).map(function($a : String) => $a.toInt()!) \
#            .forEach(function($a : Int) => sum += $a)
#assert $sum == (1+2+3+4+5+6+7+8+9+10)

# indexOf
assert [2,34,-18].indexOf(34) == 1
assert [2,34,-18].indexOf(2) == 0
assert [2,34,-18].indexOf(343) == -1
assert [3,2,34,2,-18].indexOf(2) == 1
assert new [String]().indexOf('34') == -1

assert [3,2,34,2,-18].indexOf(2, 0) == 1
assert [3,2,34,2,-18].indexOf(2, 1) == 1
assert [3,2,34,2,-18].indexOf(2, 2) == 3
assert [3,2,34,2,-18].indexOf(2, 5) == -1
assert [3,2,34,2,-18].indexOf(2, -2) == 3
assert [3,2,34,2,-18].indexOf(2, -5) == 1

var ex = 34 as Any
try { [3,2,34,2,-18].indexOf(2, 6); } catch e { $ex = $e; }
assert $ex is OutOfRangeError
$ex = 34
try { [3,2,34,2,-18].indexOf(2, -6); } catch e { $ex = $e; }
assert $ex is OutOfRangeError

# lastIndexOf
assert [2,34,-18].lastIndexOf(34) == 1
assert [2,34,-18].lastIndexOf(2) == 0
assert [2,34,-18].lastIndexOf(343) == -1
assert [3,2,34,2,-18].lastIndexOf(2) == 3
assert new [String]().lastIndexOf('34') == -1

# contains
assert [45.0/0.0, 34.9, 3.000].contains(-90.0/-0.0)
assert ![45.0/0.0, 34.9, 3.000].contains(90.0/-0.0)
assert [-34.4,0.0/0.0, 34.9, 3.000].contains(0.0/-0.0)
assert ! new [Bool]().contains($true)
assert ! new [Bool]().contains($false)