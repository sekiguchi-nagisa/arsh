
# for option query/setting
# show option setting
assert shctl set
assert shctl set | grep 'traceonexit.*  off'
assert shctl set | grep 'monitor.*  off'
shctl set | grep 'assert.*  on' || _exit

# set
shctl set traceonexit
assert shctl set | grep 'traceonexit.*  on'
shctl set traceonexit traceonexit
assert shctl set | grep 'traceonexit.*  on'

assert shctl set HUGA 2>&1 | grep 'ydsh: shctl: undefined runtime option: HUGA'
shctl set HUGA
assert $? == 1

# unset
shctl unset traceonexit
assert shctl set | grep 'traceonexit.*  off'
shctl unset traceonexit traceonexit
assert shctl set | grep 'traceonexit.*  off'

assert shctl unset 2>&1 | grep "ydsh: shctl: `unset' subcommand requires argument"
shctl unset
assert $? == 2

assert shctl unset HUGA 2>&1 | grep 'ydsh: shctl: undefined runtime option: HUGA'
shctl unset HUGA
assert $? == 1

## for `monitor' option
### in monitor off
assert $SIG[%'INT'] == $SIG_DFL : "${$SIG[%'INT']}"
assert $SIG[%'QUIT'] == $SIG_DFL
assert $SIG[%'TSTP'] == $SIG_DFL
assert $SIG[%'TTIN'] == $SIG_DFL
assert $SIG[%'TTOU'] == $SIG_DFL

assert fg 2>&1 | grep 'ydsh: fg: no job control in this shell'
assert bg 2>&1 | grep 'ydsh: bg: no job control in this shell'

### in monitor on
shctl set monitor
assert $SIG[%'INT'] != $SIG_IGN # set monitor, set internal sigint handler
assert $SIG[%'INT'] != $SIG_DFL
assert $SIG[%'QUIT'] == $SIG_IGN
assert $SIG[%'TSTP'] == $SIG_IGN
assert $SIG[%'TTIN'] == $SIG_IGN
assert $SIG[%'TTOU'] == $SIG_IGN

assert fg 2>&1 | grep 'ydsh: fg: current: no such job'
assert bg 2>&1 | grep 'ydsh: bg: current: no such job'

## for `xtrace` option
assert shctl set | grep 'xtrace.*  off'
shctl set xtrace
assert "$(echo hello 2>&1 > /dev/null)" == "+ $SCRIPT_NAME:59> echo hello"
shctl unset xtrace
assert "$(echo hello 2>&1 > /dev/null)" == ""


# dump/restore
shctl set -d
var oldOpt = $REPLY
var oldOut = "$(shctl set)"
shctl set dotglob nullglob traceonexit fastglob
shctl set -d
assert $oldOpt != $REPLY
assert $oldOut != "$(shctl set)"

shctl set -r $oldOpt
shctl set -d
assert $oldOpt == $REPLY
assert $oldOut == "$(shctl set)"

## invalid dump format
assert "$(shctl set -r fjrafia 2>&1)" == "ydsh: shctl: invalid option format: fjrafia" 
assert $? == 1

assert "$(shctl set -r 'dotglob=off 222= nullglob=off' 2>&1)" == 
        "ydsh: shctl: invalid option format: 222=" 
assert $? == 1

assert "$(shctl set -r dotglob=offf 2>&1)" == "ydsh: shctl: invalid option format: dotglob=offf" 
assert $? == 1

assert "$(shctl set -r fjrafia=off 2>&1)" == "ydsh: shctl: undefined runtime option: fjrafia" 
assert $? == 1

true