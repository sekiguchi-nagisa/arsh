#$test($status = 0)

var a = ["a" : 1]
assert($a["a"] is Int)
assert($a["a"] == 1)
var ex = 34 as Any
try { $a["b"]; assert($false) } catch($e) { $ex = $e }
assert($ex is KeyNotFoundError)

$a["a"] = 54
assert($a["a"] == 54)

$a["b"] = -456
assert($a["b"] == -456)

assert($a.size() is Int)
assert($a.size() == 2)
assert(!$a.empty())

assert($a.get("b"))
assert $a.get("b")! == -456
assert(! $a.get("c"))

assert(!$a.put("c", -19))
assert($a.put("c", 789)! == -19)

assert $a.putIfAbsent("1234", 100) == 100
assert $a.get("1234")! == 100
assert $a.putIfAbsent("1234", 10) == 100

{
    var rr = $a.remove("333")
    assert $rr is Int?
    assert ! $rr
    assert $a.remove("c")! == 789
    assert(!$a.get("c"))

    var aa = [1 : new String?()]
    var rrr = $aa.remove(2)
    assert $rrr is String?
    assert ! $aa.remove(1)

    var bb : [Signal : Int]
    assert ! $bb.remove($SIGINT)
    assert $bb.empty()
    $bb.clear()
    assert $bb.empty()
    assert ! $bb.remove($SIGHUP)
}


var b = new Map<Int, Float>()
assert($b.size() == 0)
assert($b.empty())

$b[34] = 34.56
assert($b.size() == 1)
assert($b[34] == 34.56)

assert($b.swap(34, 100.0) == 34.56)
assert($b[34] == 100.0)
$ex = 23
try { $b.swap(777, 23.0); assert($false) } catch($e) { $ex = $e}
assert($ex is KeyNotFoundError)

$b.clear()
assert($b.empty())
assert(!$b.get(34))

# copy
var bb = ["s" : 1, "a" : 100]
var bb2 = $bb.copy()
$bb.clear()
assert $bb.empty()
assert $bb2.size() == 2
assert $bb2["s"] == 1
assert $bb2["a"] == 100

# putAll
var cc1 = ["a" : 12, "b": 34]
var cc2 = ["c" : 56, "b": -199]
var cc3 = $cc1.putAll($cc2)
assert $cc1.size() == 3
assert $cc3.size() == 3
assert $cc2.size() == 2
assert $cc3["a"] == 12
assert $cc3['b'] == -199
assert $cc3['c'] == 56

var cc4 = $cc3.putAll($cc3)
assert $cc4.size() == 3
assert $cc3.size() == 3

# inheritance
assert([23 : $true] is Map<Int, Boolean>)
assert(["fre" : 32] is Any)

assert(new Map<Boolean, Any>() is Map<Boolean, Any>)

# toString
assert new [Int:Float]() as String == '[]'
assert [34: $false] as String == "[34 : false]"
assert [34: $false, -888: $true] as String == "[34 : false, -888 : true]"

{
    var m = [$SIGTTOU: $SIGTTOU.name(), $SIGCHLD: $SIGCHLD.name(), 
            $SIGINT: $SIGINT.name(), $SIGHUP: $SIGHUP.name()]
    $m.remove($SIGINT)
    assert $m as String == 
        "[$SIGTTOU : ${$SIGTTOU.name()}, $SIGCHLD : ${$SIGCHLD.name()}, $SIGHUP : ${$SIGHUP.name()}]"
}

$ex = 2345
var mm = [$SIGSTOP: $true as Any, $SIGHUP: 9.9]
$mm[$SIGTSTP] = $mm
try { $mm as String; } catch e { $ex = $e; }
assert $ex is StackOverflowError
$mm.clear()