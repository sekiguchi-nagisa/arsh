var str = "うずまきナルト"
assert($str == "うずまきナルト")
$str = 'hello world'
assert($str == 'hello world')
assert($str != "fer")

# string literal
assert('a\nb' == $'a\\nb')
assert('a\rb' == $'a\\rb')
assert('a\tb' == $'a\\tb')
assert('a\o' == $'a\o')
assert " $ " == ' $ '
assert "$" == '$'
assert($'\101\066' == "A6")     # octal
assert($'\x09\x7E' == $'\t~')  # hex
assert($'\x09\x7e' == $'\t~')  # hex
assert($'\r' == $'\x0D')    # hex
assert $'\x00' != ''        # nul character
assert $'\a' == $'\x07'
assert $'\b' == $'\x08'
assert $'\e' == $'\x1b'
assert $'\E' == $'\x1b'
assert $'\f' == $'\x0C'
assert $'\'' == "'"

assert $'\u7058' == '灘'
assert $'\U20118' == '𠄘'

assert('a
b' == "a
b")  # allow new line
assert('a\nb' == "a\nb")
assert('a\rb' == "a\rb")
assert "\
hello" == "hello"

# string concatenation
assert '12he' == 12 + 'h' + 'e'
assert 'he12' == 'he' + '' + 12 + ''

# string method
assert("".empty())
assert("".size() == 0)
assert("".size() is Int)
assert("hello".count() is Int)
assert("hello".count() == "hello".size())
assert "👨‍👨‍👦".count() == 1
assert("あい🌏うえお90🇯🇵".count() == 9)

$str = "はるのサクラ"
$str = $str.replace("はるの", "うずまき")
assert($str == "うずまきサクラ")

var a = "hello world"
assert($a.size() == 11)
assert($a == "hello" + ' ' + "world")

assert("12あ90灘"[0] == "1")
assert("12あ90灘"[1] == "2")
assert "12345"[-1] == '5'
assert "12345"[-2] == '4'
try { "12あ90灘"[123]; assert($false); } catch($e) { assert($e is OutOfRangeError); }
try { "12あ90灘"[-123]; assert($false); } catch($e) { assert($e is OutOfRangeError); }
assert("12あ90灘"[2] != 'あ')  # get ascii character encoding
assert("12あ90灘".charAt(2) == "あ")   # get UTF8 character
assert("12あ90灘"[5] != '灘')  # get get ascii character encoding
assert("12あ90灘".charAt(5) == '灘')   # get UTF8 character
try { "12あ90灘".charAt(6); assert($false); } catch($e) { assert($e is OutOfRangeError); }

assert($a.slice(0, 4) == "hell");
assert "1234".slice(4, 4).empty()
assert($a.slice(-3, -1) == "rl");
assert("01234".slice(4, 3) == "");
assert("01234".slice(2, 100) == "234");
assert("01234".slice(5, 6) == "");
assert("01234".slice(-1, 2) == "");
assert("01234".slice(-134, -4) == "0");

assert("012345".from(3) == "345")
assert("012345".from(-4) == "2345")
assert "01234".from(5) == ""
assert("012345".from(-9) == "012345");
assert("012345".from(7) == "");

assert("012345".to(3) == "012")
assert("012345".to(-4) == "01")
assert("012345".to(-9) == "");
assert("012345".to(9) == "012345");

assert(! $a.startsWith("hoge"))
assert("あ345".startsWith("あ"))
assert("".startsWith(""))
assert ! "".startsWith('a')
assert("a".startsWith(""))
assert ! $'a\x00b'.startsWith($'a\x00c')
assert ! "".startsWith($'\x00')

assert($a.endsWith("rld"))
assert("あ345空".endsWith("5空"))
assert("".endsWith(""))
assert !"".endsWith($'\x00')
assert("a".endsWith(""))
assert ! "a".endsWith($'\x00')

assert($a.indexOf("q") == -1)
assert("0123ああ".indexOf("あ") == 4)
assert("0123ああ".indexOf("") == 0)
assert $'a\x00b'.indexOf($'\x00') == 1
assert("".indexOf("") == 0)
assert("".indexOf($'\x00') == -1)
assert("".indexOf("aaa") == -1)

assert($a.lastIndexOf("l") == 9)
assert("00000".lastIndexOf("00") == 3)
assert("00000".lastIndexOf("6") == -1)
assert("0123".lastIndexOf("") == 3)
assert($'a\x00b'.lastIndexOf("") == 2)
assert($'a\x00b'.lastIndexOf($'\x00') == 1)
assert("".lastIndexOf("") == 0)
assert("".lastIndexOf("aaadd") == -1)
assert "".lastIndexOf($'\x00') == -1

assert "".contains("")
assert ! "".contains("a")
assert ! "".contains($'\0')
assert "aaa".contains("a")
assert ! "a12o0いs".contains("あ")
assert "a12o0いs".contains("")
assert "fer230👨‍👨‍👦ｆれｆ".contains("👨")
assert "fer230👨‍👨‍👦ｆれｆ".contains("👨‍👨‍👦")
assert 'aa🇯🇵ss'.contains('🇯')

var sa = "hello world !!".split(" ")
assert($sa.size() == 3)
assert($sa[0] == "hello")
assert($sa[1] == "world")
assert($sa[2] == "!!")

$sa = 'hell'.split('l')
assert $sa.size() == 3
assert $sa[0] == 'he'
assert $sa[1] == ''
assert $sa[2] == ''

$sa = 'hell'.split('h')
assert $sa.size() == 2
assert $sa[0] == ''
assert $sa[1] == 'ell'

$sa = "こんばんわ".split("ん")
assert($sa.size() == 3)
assert($sa[0] == "こ")
assert($sa[1] == "ば")
assert($sa[2] == "わ")

$sa = "hello".split("@")
assert($sa.size() == 1)
assert($sa[0] == "hello")

$sa = "hello".split("")
assert($sa.size() == 1)
assert($sa[0] == "hello")

$sa = "".split("")
assert($sa.size() == 1)
assert($sa[0] == "")

$sa = $'a\x00b\x00'.split($'\x00')
assert $sa.size() == 3
assert $sa[0] == 'a'
assert $sa[1] == 'b'
assert $sa[2] == ''

$sa = "".split($'\x00')
assert $sa.size() == 1
assert $sa[0] == ""

$sa = $'\x00'.split("")
assert $sa.size() == 1
assert $sa[0] == $'\x00'

$sa = $'a\x00b\x00c'.split('b')
assert $sa.size() == 2
assert $sa[0] == $'a\x00'
assert $sa[1] == $'\x00c'

assert "hello".replace("e", "@") == "h@llo"
assert "hello".replace("ll", "") == "heo"
assert "hello".replace("", "123") == "hello"

assert "あいあう2".replace("あ", "お") == "おいおう2"
assert "あいあう2".replace("い", "") == "ああう2"
assert "あいあう2".replace("", "間") == "あいあう2"

assert "".replace("a", "34") == ""
assert "".replace("", "") == ""
assert "".replace("", "hoge") == ""

var gca = "あ👨‍👨‍👦い🌏う90🇯🇵".chars()
assert $gca.size() == 8
assert $gca[0] == 'あ'
assert $gca[1] == '👨‍👨‍👦'
assert $gca[2] == 'い'
assert $gca[3] == '🌏'
assert $gca[4] == 'う'
assert $gca[5] == '9'
assert $gca[6] == '0'
assert $gca[7] == '🇯🇵'

assert '🇯🇵'.width() == 2
assert '4334 '.width() == 5
assert $'\n\t'.width() == 0
assert "あ2い".width() == 5
assert '👨‍👨‍👦'.width() == 2

## east-asian width
assert "$(LANG=ja_JP.UTF-8 LC_ALL=ja_JP.UTF-8 LC_CTYPE=ja_JP.UTF-8 eval $YDSH_BIN -c 'echo ${"○".width()}')" == "2"
assert "$(LANG=C LC_ALL=C LC_CTYPE=C eval $YDSH_BIN -c 'echo ${"○".width()}')" == "1"

assert("-2147483648".toInt()! == -1 - 2147483647)
assert("-2147483649".toInt())
assert("2147483647".toInt()! == 2147483647)
assert("2147483648".toInt())
assert "0xFFFFfaec".toInt()!  == 0xFFFFfaec
assert "0XFFFFfaec".toInt()!  == 0XFFFFfaec
assert "0XFFFFFFFF".toInt()!  == 0XFFFFFFFF
assert ! "-0XFa".toInt()
assert "0XFFFFFFFFa".toInt()
assert ! "-0xFFFFFFF".toInt()
assert "0012345".toInt()!  == 0012345
assert "0o12345".toInt()!  == 0o12345
assert "0O12345".toInt()!  == 0O12345
assert ! "-0O12345".toInt()

assert("-9223372036854775808".toInt()! == -1 - 9223372036854775807)
assert(! "-9223372036854775809".toInt())
assert("9223372036854775807".toInt()! == 9223372036854775807)
assert(!"9223372036854775808".toInt())
assert(!"9223372036854775L".toInt())
assert '0XFFFFFFFFFFFFFFFF'.toInt()! == -1
assert ! '-0O222222'.toInt()
assert '0222222'.toInt()! == 0222222
assert '0O2222234'.toInt()! == 02222234
assert '0o2222234'.toInt()! == 0o2222234

assert("3".toFloat()! == 3.0)
assert("-3.14e+3".toFloat()! == -3.14E+3)
assert("Nan".toFloat()!.isNan())
assert("NaN".toFloat()!.isNan())
assert("-nan".toFloat()!.isNan())
assert("INF".toFloat()!.isInf())
assert("Infinity".toFloat()!.isInf())
assert("-Infinity".toFloat()!.isInf())

assert "~".realpath()! == "$(echo ~)"
assert ! "fhafjeoirwae54".realpath()

# string compare
var b = "aaa"
var c = 'ccc'

assert($b < $c)
assert($b <= $c)
assert(!($b > $c))
assert(!($b >= $c))
assert !($'a\x00b' <= $'a\x00a')
assert $'a\x00b' != $'a\x00c'
assert $'a\x00b' != $'a'
assert "A" < "AB"
assert !("A" >= "AB")
assert "AB" > "A"
assert !("AB" <= "A")

# check empty
var icount = 0
function getstr() : String {
    $icount++;
    return "check empty"
}
assert $c :- $getstr() == 'ccc'
assert $icount == 0
$c = ''
assert $c :- $getstr() == 'check empty'
assert $icount == 1

# case
assert "AbcDEf".lower() == "abcdef"
assert "AbcDEf".upper() == "ABCDEF"

# string cast
assert(("fre" + 3.14) is String)
assert("hey" + $true == 'heytrue')
assert("" + $False == "false")