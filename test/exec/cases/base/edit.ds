
# key bind api
## get default keybindings
var editor = new LineEditor()
var bindings = $editor.bindings()  # get read-only view of current keybindings (modification of view does not affect actual keybindings)
assert $bindings is [String : String]

assert $bindings["^I"] == "complete"
assert $bindings["^E"] == "end-of-line"
assert $bindings["^?"] == "backward-delete-char"
assert $bindings["^[[D"] == "backward-char"
assert !$bindings.get("^[12") 

## change keybind
var ex = 34 as Any
try { $editor.bind("", "complete"); } catch e { $ex = $e;}
assert ($ex as ArgumentError).message() == "keycode must start with control character: \`'"

$ex = 34
try { $editor.bind("A", "complete"); } catch e { $ex = $e;}
assert ($ex as ArgumentError).message() == "keycode must start with control character: \`A'"

$ex = 34
try { $editor.bind("^Aあ", "complete"); } catch e { $ex = $e;}
assert ($ex as ArgumentError).message() == "keycode must be ascii characters: \`^Aあ'"

$ex = 34
try { $editor.bind("^A", "hogehogehuga"); } catch e { $ex = $e;}
assert ($ex as ArgumentError).message() == "undefined edit action: \`hogehogehuga'"

$ex = 34
try { $editor.bind("^[[200~", "complete"); } catch e { $ex = $e;}
assert ($ex as ArgumentError).message() == "cannot change binding of bracket start code \`^[[200~'"

$ex = 34
try { $editor.bind("^[D", "bracket-paste"); } catch e { $ex = $e;}
assert ($ex as ArgumentError).message() == "cannot bind to \`bracket-paste'"

$ex = 34
try { $editor.bind("^[[D", "complete"); } catch e { $ex = $e;}
assert ! ($ex is ArgumentError)  # change binding
assert $bindings["^[[D"] == "backward-char"  # keybind modification does not affect previous result of LineEditor#bindings
assert $editor.bindings()["^[[D"] == "complete"

$ex = 34
try { $editor.bind("^[12", "beginning-of-line"); } catch e { $ex = $e;}
assert ! ($ex is ArgumentError)  # add binding
assert !$bindings.get("^[12")  # keybind modification does not affect previous result of LineEditor#bindings
assert $editor.bindings()["^[12"] == "beginning-of-line"

## remove bind
$ex = 34
try { $editor.bind("^[[D", ""); } catch e { $ex = $e;}  # if action is empty string, remove keybind
assert ! ($ex is ArgumentError)  # change bindings
assert ! $editor.bindings().get("^[[D")

## re-add
$ex = 34
try { $editor.bind("^[[D", "end-of-line"); } catch e { $ex = $e;}  # if action is empty string, remove keybind
assert ! ($ex is ArgumentError)  # change bindings
assert $editor.bindings()["^[[D"] == "end-of-line"

## remove bind
$ex = 34
try { $editor.bind("^[[D"); } catch e { $ex = $e;}  # if action is empty string, remove keybind
assert ! ($ex is ArgumentError)  # change bindings
assert ! $editor.bindings().get("^[[D")

## limit
$ex = 45
try {
    for(var i = 0; $i < 10000; $i++) {
        $editor.bind("^[$i", "accept")
    }
} catch e : Error {
    $ex = $e
}
assert ($ex as ArgumentError).message() == "number of key bindings reaches limit (up to 255)"

# actions
assert $editor.actions() is [String]
assert $editor.actions()[0] == 'accept'
assert $editor.actions()[1] == 'backward-char'

# custom action
## define
$editor.bind('^[1', '')
$editor.bind('^[2', '')
assert ! $editor.actions().contains('action1')
$editor.action('action1', 'replace-whole', function(s, o) => $s)
assert $editor.actions().contains('action1')
assert !$editor.bindings().get('^]')
$editor.bind('^]', 'action1')
assert $editor.bindings()['^]'] == 'action1'

## re-define
$ex = 34
try { $editor.action('action1', 'replace-whole-accept', function(s, o)=> $s);  }
catch e { $ex = $e; }
assert $ex is ArgumentError
assert ($ex as ArgumentError).message() == "already defined action: \`action1'"

$ex = 34
try { $editor.action('backward-char', 'replace-whole-accept', function(s, o)=> $s);  }
catch e { $ex = $e; }
assert $ex is ArgumentError
assert ($ex as ArgumentError).message() == "already defined action: \`backward-char'"

## invalid
$ex = 34
try { $editor.action('%%%%fe', 'replace-whole-accept', function(s, o)=> $s);  }
catch e { $ex = $e; }
assert ($ex as ArgumentError).message() == "invalid action name, must [a-zA-Z_-]: \`%%%%fe'"

$ex = 34
try { $editor.action('', 'replace-whole-accept', function(s, o)=> $s);  }
catch e { $ex = $e; }
assert ($ex as ArgumentError).message() == "invalid action name, must [a-zA-Z_-]: \`'"

$ex = 34
try { $editor.action('who', 'replace-whole-accept1', function(s, o)=> $s);  }
catch e { $ex = $e; }
assert ($ex as ArgumentError).message() == "unsupported custom action type: \`replace-whole-accept1'"

## remove
$editor.action("hraufhaaer", "replace-whole-accept") # do noting
$editor.action("hraufhaaeraa", "replace-whole-accept11") # do nothing
$editor.action("", "replace-whole-accept") # do noting
$editor.action('backward-char', 'replace-whole-accept') # do nothing for builtin action
assert $editor.actions().contains("backward-char")

$editor.action('action2', 'replace-whole', function(s,o)=> $s)
$editor.action('action3', 'replace-line', function(s,o)=> $s)
$editor.action('action4', 'insert', function(s,o)=> $s)

assert $editor.actions().contains("action1")
assert $editor.actions().contains("action2")
assert $editor.actions().contains("action3")
assert $editor.actions().contains("action4")
$editor.action('action1', 'replace-whole-accept')
$editor.action('action3', 'replace-whole-accept')
assert ! $editor.actions().contains("action1")
assert ! $editor.actions().contains("action3")

$editor.action('action5', 'hist-select', function(s,o) => $s)
$editor.action('action6', 'kill-ring-select', function(s,o) => $s)
assert $editor.actions().contains("action5")
assert $editor.actions().contains("action6")
assert $editor.actions().contains("action2")
assert $editor.actions().contains("action4")

## limit
$ex = 34
try {
    for(var i = 0; $i < 1000; $i++) {
        $editor.action("action_$i", 'replace-line', function(s, o) => $s)
        $editor.action("action-$i", 'replace-line', function(s, o) => $s)
        $editor.action("Action-$i", 'replace-line', function(s, o) => $s)
    }
} catch e {
    $ex = $e
}
assert ($ex as ArgumentError).message() == "number of custom actions reaches limit (up to 255)"

# configuration
## config list
var configs = $editor.configs()
assert $configs.size() == 6
assert $configs['killring-size'] as Int == 15
assert $configs['eaw'] as Int == 0
assert $configs['bracketed-paste'] as Bool
assert ! ($configs['flow-control'] as Bool)
assert $configs['color'] as String == ''
assert !($configs["lang-extension"] as Bool)

## invalid config
$ex = 34
try { $editor.config('aaaa', 34); } catch e { $ex = $e; }
assert ($ex as ArgumentError).message() == "undefined config: \`aaaa'"

$ex = 34
try { $editor.config('killring-size', '222'); } catch e { $ex = $e; }
assert ($ex as ArgumentError).message() == "\`killring-size' config require \`Int' type value"

$ex = 34
try { $editor.config('killring-size', -34); } catch e { $ex = $e; }
assert ($ex as ArgumentError).message() == "\`killring-size' config only accept positive number"

## change config
$editor.config('killring-size', 18888888888888)
$editor.config('eaw', -1)
$editor.config('bracketed-paste', $false)
$editor.config('flow-control', $true)
$editor.config('color', $'comment=\e[31m hoge=\e[31m type=111')

## previous config list is not changed
assert $configs['killring-size'] as Int == 15
assert $configs['eaw'] as Int == 0
assert $configs['bracketed-paste'] as Bool
assert !($configs['flow-control'] as Bool)
assert $configs['color'] as String == ''

$configs = $editor.configs()
assert $configs['killring-size'] as Int == 255
assert $configs['eaw'] as Int == 0
assert ! ($configs['bracketed-paste'] as Bool)
assert ($configs['flow-control'] as Bool)
assert $configs['color'] as String == $'comment=\e[31m'

$editor.config('eaw', 1)
assert $editor.configs()['eaw'] as Int == 1
$editor.config('eaw', 2)
assert $editor.configs()['eaw'] as Int == 2
$editor.config('eaw', 0)
assert $editor.configs()['eaw'] as Int == 0