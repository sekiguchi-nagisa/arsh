function func($x: Int) : Int {
    return $x * 2
}

# type inheritance of function
assert($func is Func<Int, [Int]>)
assert($func is Any)
assert($func is Func) # function base type

# apply function object
function call() {
    var sub = $func
    assert($func(3) == 6)
    assert($sub(3) == 6)
}

assert($call is Func<Void>)

$call()

function caller() : Func<Void> {
    return $call
}
assert($caller is Func<Func<Void>>)
$caller()()

# void function
function void() {
    return
}
assert($void is Func<Void>)

function void2() : Void {
    return
}
assert($void2 is Func<Void>)

# empty function
function empty(){}
assert($empty is Func<Void>)

# complex function
function f($obj :
            Func<
               Int,
               [Int]>,
          $value : Int) : Int {
    return $obj($value)
}

assert($f is Func<Int, [Func<Int, [Int]>, Int]>)
assert($f($func, 12) == 24)

# optional arg

function max(a : Int, b : Int!) : Int {
   var r = ($b ?? return $a)
   return $a < $r ? $r : $a
}
assert $max is (Int, Int!) -> Int
assert $max(12) == 12
assert $max(12, -1) == 12
assert $max(12, 90) == 90