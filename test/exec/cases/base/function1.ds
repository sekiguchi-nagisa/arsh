function func($x: Int) : Int {
    return $x * 2
}

# type inheritance of function
assert($func is Func<Int, [Int]>)
assert($func is Any)
assert($func is Func) # function base type

# apply function object
function call() {
    var sub = $func
    assert($func(3) == 6)
    assert($sub(3) == 6)
}

assert($call is Func<Void>)

$call()

function caller() : Func<Void> {
    return $call
}
assert($caller is Func<Func<Void>>)
$caller()()

# void function
function void() {
    return
}
assert($void is Func<Void>)

function void2() : Void {
    return
}
assert($void2 is Func<Void>)

# empty function
function empty(){}
assert($empty is Func<Void>)

# complex function
function f($obj :
            Func<
               Int,
               [Int]>,
          $value : Int) : Int {
    return $obj($value)
}

assert($f is Func<Int, [Func<Int, [Int]>, Int]>)
assert($f($func, 12) == 24)

# multiple return type
function make_pair($a : Float) : String, Int {
    var str = $a as String
    return ($str, $str.size())
}

assert($make_pair is Func<Tuple<String, Int>, [Float]>)
assert $make_pair is
    (Float,
       )

          ->
              (String,
                  Int
                  ,
                 )


assert $void == $void
assert $void != $void2