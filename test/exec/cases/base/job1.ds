
#$test($status = 0, $out = $'hello\nworld\nAAA\nCONT\n')

# background job
var j = (/bin/sh -c 'echo world' && /bin/sh -c 'echo hello') | sort &
assert ! $j[0]
assert ! $j[1]
assert !$j.in()
assert ! $j.out()
assert $j.size() == 2

var ex = 34 as Any
try { $j[2]; } catch $e { $ex = $e; }
assert $ex is OutOfRangeError

$ex = 3400
try { $j.status(100); } catch $e { $ex = $e; }
assert $ex is OutOfRangeError

assert $j as String == "%1"
assert $j.wait() == 0
assert $j.status(0)! == 0
assert $j.status(1)! == 0


# disowned background job
$j = /bin/sh -c 'echo AAA' &!
assert ! $j[0]
assert ! $j[1]
assert !$j.in()
assert !$j.out()
assert $j.size() == 1
assert $j as String == "%1"
assert $j.wait() == 0


# co-process
$j = coproc { read; echo reply: $REPLY; }
assert $j[0]
assert $j[1]
assert $j.in()
assert $j.out()
assert $j.size() == 1
assert $j.pid(0)! > 0
assert !$j.status(0)

$ex = 34 as Any
try { $j.pid(1); } catch $e { $ex = $e; }
assert $ex is OutOfRangeError

echo hello > $j[0]
assert { read -u $j[1]; $REPLY; } == "reply: hello"

assert $j.wait() == 0
assert ! $j.in()
assert !$j.out()
assert $j.size() == 1
assert $j.status(0)! == 0

# jobs in child
$j = {
    var j = exit 3 &
    exit ${$j.wait()}
} &
assert $j.wait() == 3
assert $j.status(0)! == 3

var j2 = true &
$j = {
 assert !$j2.pid(0)
 assert !$j2.poll()
 var s = try { $j2.wait(); } catch $ex { assert $ex is SystemError; 100; }
 exit $s;
} &
assert !$j.status(0)
assert $j.wait() == 100 : "${$j.wait()}"  # raise system error
assert $j.status(0)! == 100
assert $j2.wait() == 0


# signal
$j = for(;;) { true; } &
assert $j.poll()
$j.raise(%'STOP')
assert $j.poll()

$j.raise(%'CONT')
assert $j.poll()
$j.raise(%'term')
assert $j.wait() == %'term'.value() + 128
assert $j.status(0)! == %'term'.value() + 128
assert !$j.poll()

## coredump
$j = for(;;) { true; } &
$j.raise(%'quit')
assert $j.wait() == %'quit'.value() + 128
assert !$j.poll()
$j.raise(%'term')   # do nothing

# handle SIGCONT
function handle($s : Signal) {
    echo ${$s.name()}
    exit $s
}
$j = { $SIG[%'cont'] = $handle; for(;;) { true; } } &
sleep 1
$j.raise(%'STOP')
$j.raise(%'CONT')
assert $j.wait() == %'cont'.value()
assert $j.status(0)! == %'cont'.value()

# detach
$j = coproc false
assert $j as String == '%1'
$j.detach()
assert $j as String == '%1'   # after detaching, still maintains valid job id
assert $j.wait() == 1
