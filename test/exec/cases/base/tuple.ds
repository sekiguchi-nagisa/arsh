var a = (12, "hello")
assert($a._0 is Int)
assert($a._0 == 12)
assert($a._1 is String)
assert($a._1 == "hello")
$a._0 = 100
assert($a._0 == 100)
$a._1 = "world"
assert($a._1 == "world")
assert $a as String == "(100, world)"

assert(! ($false,
		3.14)._0
		)


var b = ("hello",)
assert($b._0 == "hello")
assert $b is (String,)
assert !($b is (String) )
assert $b as String == "(hello,)"

var ex = 2345 as Any
var nn = (23, $none as Any?, (34,'hey'))
assert $nn as String == '(23, (invalid), (34, hey))'
$nn._1 = $nn
try { $nn as String; } catch e { $ex = $e; }
assert $ex is StackOverflowError
$nn._1 = $none


var c = ($true,
         23,
              "hello")

assert($c._0)
assert($c._1 == 23)
assert($c._2 == "hello")

var d = (234, $true, )
assert $d._0 == 234
assert $d._1


# inheritance
assert((23, "") is Tuple<Int, String>)
assert((23, "") is Any)

assert((12 as Any, $true) is Tuple<Any, Boolean>)

# super method
assert("(1, 2)" == (1, 2) as String)