
source ../../_module4test/command.ds as m

assert "$(command -V m)" == 'm is a user-defined command'
assert $? == 0

assert "$(m 2>&1)" == "${$SCRIPT_NAME.basename()}:7: m: require subcommand"
assert $? == 2

assert "$(m _huga 2>&1)" == "${$SCRIPT_NAME.basename()}:10: m: cannot resolve private subcommand: _huga"
assert $? == 1

assert "$(m huga 2>&1)" == "${$SCRIPT_NAME.basename()}:13: m: undefined subcommand: huga"
assert $? == 2

assert "$(m $'call_cmd\x00' 2>&1)" == 
    "${$SCRIPT_NAME.basename()}:16: m: undefined subcommand: call_cmd\x00"
assert $? == 2

assert "$(m call_cmd false)" == $'call false'
assert $? == 1

assert "$(m call_cmd echo world)" == $'call echo\nworld'
assert $? == 0

source ../../_module4test/command.ds as call_cmd
assert "$(call call_cmd call_cmd echo world)" == $'call echo\nworld'
assert $? == 0

# not found due to sub-command is udc
var ex = 23 as Any
try {
    command call_cmd call_cmd echo hello world!!
} catch $e {
    $ex = $e
}
assert $ex is SystemError
assert ($ex as SystemError).message() == 'execution error: call_cmd: command not found'

# not found due to sub-command is resolved from its own module
$ex = 1221
try {
    m call_cmd m hello world!!
} catch $e {
    $ex = $e
}
assert $ex is SystemError
assert ($ex as SystemError).message() == 'execution error: m: command not found'


d() {
    call_cmd call_cmd echo hey!!
}
assert "$(d)" == $'call echo\nhey!!'
assert $? == 0