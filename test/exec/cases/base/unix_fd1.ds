#$test($status = 0)

assert $STDIN is UnixFD
assert $STDIN is FD

assert $STDIN && $STDOUT && $STDERR
assert $STDIN as String == "/dev/fd/0"
assert $STDOUT as String == "/dev/fd/1"
assert $STDERR as String == '/dev/fd/2'

## method
assert $STDIN.value() == 0
assert $STDOUT.value() == 1
assert $STDERR.value() == 2

var fd = $STDIN.dup()
assert $fd as String  != "/dev/fd/0"
assert $fd
assert $fd as Boolean

$fd.close()
assert $fd as String == "/dev/fd/-1"
assert ! $fd
assert $false == $fd as Bool

var ex = 34 as Any
try {
    $fd.dup()
} catch $e {
    $ex = $e
}
assert $ex is SystemError

$ex = 34
try {
    $fd.close()
} catch $e {
    $ex = $e
}
assert $ex is SystemError

$ex = 34
try {
    $fd.lock()
} catch $e {
    $ex = $e
}
assert $ex is SystemError

$ex = 34
try {
    $fd.unlock()
} catch $e {
    $ex = $e
}
assert $ex is SystemError

## redirection
$ex = 34
try {
    cat <& $fd
} catch $e {
    $ex = $e
}
assert $ex is SystemError

$ex = 54
try {
    echo heyy >& $fd
} catch $e {
    $ex = $e
}
assert $ex is SystemError

## constructor
$ex = 23
try {
    new UnixFD("/hogehoge/hugaejfrie")
} catch $e {
    $ex = $e
}
assert ($ex as SystemError).message() =~ $/No such file or directory/

$ex = 23
try {
    new UnixFD($'./hogehoge\x0034')
} catch $e {
    $ex = $e
}
assert $ex is ArgumentError
assert ($ex as ArgumentError).message() == "file path contains null characters"

## close-on-exec
$fd = $STDIN.dup()
call $BIN_NAME -c 'test -r /dev/fd/$1' dummy ${$fd.value()}  # invalid fd (due to close-on-exec on)
assert $? == 1

$fd.cloexec($false)  # unset close-on-exec
call $BIN_NAME -c 'test -r /dev/fd/$1' dummy ${$fd.value()}  # valid fd (due to close-on-exec off)
assert $? == 0

$fd.cloexec()  # set close-on-exec
call $BIN_NAME -c 'test -r /dev/fd/$1' dummy ${$fd.value()}  # invalid fd (due to close-on-exec on)
assert $? == 1

$fd.cloexec($false)
call $BIN_NAME -c 'test -r /dev/fd/$1' dummy ${$fd.value()}  # valid fd (due to close-on-exec off)
assert $? == 0

$fd.cloexec($true)  # set close-on-exec
call $BIN_NAME -c 'test -r /dev/fd/$1' dummy ${$fd.value()}  # valid fd (due to close-on-exec off)
assert $? == 1

$ex = 34
$fd.close()
try {
    $fd.cloexec()
    assert false
} catch e { $ex = $e; }
assert ($ex as SystemError).message() == "change of close-on-exec flag failed, caused by \`Bad file descriptor'"

true