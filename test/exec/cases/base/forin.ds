# Array for-in
var a = [1, 2, 3, 5, 7]
var i = 0

for $val in $a {
    assert($val is Int)
	assert($val == $a[$i])
	$i = $i + 1
}
assert($i == 5)


# Map for-in
$i = 0;
var tt : [(String, Int)]
for e in ["0" : 1,
            "b" : 2,
            "d" : 3,
            "e" : 4] {
    assert($e is Tuple<String, Int>)
    $tt.add($e)
    $i = $i + 1
}
assert($i == 4)
assert $tt.size() == 4
assert $tt[0]._0 == '0'
assert $tt[1]._0 == 'b'
assert $tt[2]._0 == 'd'
assert $tt[3]._0 == 'e'
assert $tt[0]._1 == 1
assert $tt[1]._1 == 2
assert $tt[2]._1 == 3
assert $tt[3]._1 == 4

$i = 0;
var bb = ["a" : 1,
            "b" : 2,
            "c" : 3,
            "d" : 4]
for e in $bb {
    assert($e is Tuple<String, Int>)
    assert $bb[$e._0] == $e._1
    $i = $i + 1
}
assert($i == 4)

# String for-in
var r = ['あ', '0', '🇯🇵', '漢', '　']
$i = 0
for $a in "あ0🇯🇵漢　" {
    assert($a == $r[$i])
    $i = $i + 1
}
assert($i == $r.size())

var count = 0
for s in "" {
    $count++
}
assert $count == 0

var rr : [String]
var invalid = $'\xC2\x24\xE0\xA4\xC2\xE0\xB8\xB3'
var expects = $invalid.chars()
for a in $invalid {
    $rr.add($a)
}
assert $rr.size() == 6
assert $rr[0] == "�"
assert $rr[0] == $expects[0]
assert $rr[1] == "$"
assert $rr[1] == $expects[1]
assert $rr[2] == "�"
assert $rr[2] == $expects[2]
assert $rr[3] == "�"
assert $rr[3] == $expects[3]
assert $rr[4] == '�'
assert $rr[4] == $expects[4]
assert $rr[5] == $'\u0E33'
assert $rr[5] == $expects[5]

## for-in optional (check unwrap)
$rr.clear()
for e in $none as String? { $rr.add($e); }
assert $rr.empty()

for e in "123" as String? { $rr.add($e); }
assert $rr.size() == 3
assert $rr[0] == '1'
assert $rr[1] == '2'
assert $rr[2] == '3'