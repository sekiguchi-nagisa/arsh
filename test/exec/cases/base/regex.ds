#$test($status = 0)

assert $/a/ =~ 'bac'

assert $/abc/ !~ 'cdf'

assert $/\/s/ =~ 's/s'
assert $/\\/s/ !~ 's/s'
assert $/\\\/s/ !~ 's/s'
assert new Regex('\/s') =~ 's/s'
assert new Regex('\\/s') !~ 's/s'
assert new Regex("\/s") =~ 's/s'
assert new Regex("\\/s") =~ 's/s'

assert $/^.$/ =~ "あ"

assert $/\s/ =~ ' '
assert $/\s/ =~ "　"

assert $/\w/ =~ 'a'
assert $/\w/ =~ '感'

assert $/\p{Hiragana}/ =~ 'う'
assert $/\p{Hiragana}/ !~ '1'
assert $/\p{Hiragana}/ !~ 'ナ'

assert $/\p{Katakana}/ !~ 'う'
assert $/\p{Katakana}/ !~ '1'
assert $/\p{Katakana}/ =~ 'ナ'

assert $/^\X\X\X$/ =~ "🇯🇵🇯🇵🇯🇵"  # unicode 9 or later
assert $/^\X$/ !~ "🇯🇵🇯🇵🇯🇵"     # before unicode 9,  assert $/^\X$/ =~ "🇯🇵🇯🇵🇯🇵"

assert '/hoge' =~ $/\//

assert 'hoge' !~ $/hoge./

assert 'hfur' =~ $//

assert '' =~ $//

assert 'aBcDE' =~ $/abcde/i     # caseless
assert 'aBcDe' =~ new Regex("abcde", "i")

assert $'abcd\n123' !~ $/^123/  # "^" matches single line

assert $'abcd\n123' =~ $/^123/m # multi line
assert $'abcd\n123' =~ new Regex("^123", "m")

assert $'123\n4' !~ $/.....*/   # dot char dose not match newline
assert $'123\n4' =~ $/.....*/s
assert $'123\n4' =~ new Regex(".....*", "s")

assert $'AbCd\n123' =~ $/abcd$/mi # multi line + caseless
assert $'AbCd\n123' =~ $/abcd$/im # multi line + caseless
assert $'AbCd\n\n123' =~ $/abcd$..../sim # multi line + caseless + dotall
assert $'AbCd\n\n123' =~ new Regex('abcd$....', "msi")

assert new Regex(".*", "") =~ "a"

try {
    new Regex("**", "i")
    assert false
} catch $e {
    assert $e is RegexSyntaxError
}

try {
    new Regex("fe", "4")
    assert false
} catch $e {
    assert $e is RegexSyntaxError
}

try {
    new Regex($'hh\x00', "")
    assert false
} catch $e {
    assert $e is RegexSyntaxError
}

var a = $/hello (world)\(!!/.match("hello world(!!")
assert $a.size() == 2
assert $a[0]! == "hello world(!!"
assert $a[1]! == "world"

assert $/hufure/.match("").empty()

assert $/a|(b)/.match('a').size() == 1

$a = $/(a|(b))c/.match('ac')
assert $a.size() == 2
assert $a[0]! == 'ac'
assert $a[1]! == 'a'

$a = $/(a|(b))(c)()/.match('ac')
assert $a.size() == 5
assert $a[0]! == 'ac'
assert $a[1]! == 'a'
assert !$a[2]
assert $a[3]! == 'c'
assert $a[4]!.empty()

# toString
assert $/\/de/ as String == '\/de'

# replace
assert $/ /.replace(" hello world !! ", "") == "helloworld!!"
assert $/   /.replace("   hello world !! ", "") == "hello world !! "
assert $/ /.replace("hey", "!!") == "hey"
assert $/!/.replace("hello world!!", "?!") == 'hello world?!?!'
assert $/a/.replace('abc', "@") == '@bc'
assert $/a(a(bc))/.replace('aabc-', "1234") == '1234-'
assert $/(aa(bc))/.replace('aabcaabc', "1234") == '12341234'
assert $/^hello$/.replace('hello ', "@") == 'hello '
assert $/^hello$/.replace('hello', "@") == '@'

# internal error
var ex = 34 as Any
try {
    assert $/^(([a-z])+.)+[A-Z]([a-z])+$/ =~ 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    assert $false
} catch $e {
    $ex = $e
}
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'match limit exceeded'

$ex = 34 as Any
try {
    assert $/^(([a-z])+.)+[A-Z]([a-z])+$/ !~ 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    assert $false
} catch $e {
    $ex = $e
}
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'match limit exceeded'

$ex = 34 as Any
try {
    assert 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' =~ $/^(([a-z])+.)+[A-Z]([a-z])+$/
    assert $false
} catch $e {
    $ex = $e
}
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'match limit exceeded'

$ex = 34 as Any
try {
    assert 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' !~ $/^(([a-z])+.)+[A-Z]([a-z])+$/
    assert $false
} catch $e {
    $ex = $e
}
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'match limit exceeded'

$ex = 34 as Any
try {
    var m  = $/^(([a-z])+.)+[A-Z]([a-z])+$/.match('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
    assert $false
} catch $e {
    $ex = $e
}
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'match limit exceeded'

$ex = 34 as Any
try {
    var m  = $/^(([a-z])+.)+[A-Z]([a-z])+$/.replace('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', "@")
    assert $m != '@'
} catch $e {
    $ex = $e
}
assert $ex is InvalidOperationError
assert ($ex as InvalidOperationError).message() == 'match limit exceeded'