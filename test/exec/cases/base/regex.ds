#$test($status = 1)

assert $/a/ =~ 'bac'

assert $/abc/ !~ 'cdf'

assert $/^.$/ =~ "„ÅÇ"

assert '/hoge' =~ $/\//

assert 'hoge' !~ $/hoge./

assert 'hfur' =~ $//

assert '' =~ $//

assert 'aBcDE' =~ $/abcde/i     # caseless

assert $'abcd\n123' !~ $/^123/  # "^" matches single line

assert $'abcd\n123' =~ $/^123/m # multi line

assert $'123\n4' !~ $/.....*/   # dot char dose not match newline
assert $'123\n4' =~ $/.....*/s

assert $'AbCd\n123' =~ $/abcd$/mi # multi line + caseless
assert $'AbCd\n123' =~ $/abcd$/im # multi line + caseless
assert $'AbCd\n\n123' =~ $/abcd$..../sim # multi line + caseless + dotall

assert new Regex(".*") =~ "a"

try {
    new Regex("**")
    assert false
} catch $e {
    assert $e is RegexSyntaxError
}

var a = $/hello (world)\(!!/.match("hello world(!!")
assert $a.size() == 2
assert $a[0]! == "hello world(!!"
assert $a[1]! == "world"

assert $/hufure/.match("").empty()

assert $/a|(b)/.match('a').size() == 1

$a = $/(a|(b))c/.match('ac')
assert $a.size() == 2
assert $a[0]! == 'ac'
assert $a[1]! == 'a'

$a = $/(a|(b))(c)()/.match('ac')
assert $a.size() == 5
assert $a[0]! == 'ac'
assert $a[1]! == 'a'
assert !$a[2]
assert $a[3]! == 'c'
assert $a[4]!.empty()

# toString
assert $/\/de/ as String == '\/de'