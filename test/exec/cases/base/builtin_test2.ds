
# for complex expression
# ! expr
# ( expr )
# expr1 -a expr2
# expr1 -o expr2

## 2 arguments
assert ! (test '!' a)
assert $? == 1
assert (test '!' "")
assert $? == 0
assert "$(test '(' ')' 2>&1)" == "${$SCRIPT_NAME.basename()}:13: test: expect arguments within \`( )'"
assert $? == 2
assert "$(test '(' 'aaa' 2>&1)" == "${$SCRIPT_NAME.basename()}:15: test: expect: \`)'"
assert $? == 2

## 3 arguments
assert (test '(' a ')' )
assert $? == 0
assert ! (test '(' "" ')' )
assert $? == 1
assert "$(test '(' "a" 'a' 2>&1)" == "${$SCRIPT_NAME.basename()}:23: test: expect: \`)', but actual: a"
assert $? == 2

assert "$(test '!' a ')' 2>&1)" == "${$SCRIPT_NAME.basename()}:26: test: a: invalid unary operator"
assert $? == 2
assert (test '!' '!' ')' )
assert $? == 0
assert ! (test '!' '!' '' )
assert $? == 1
assert ! (test '!' '-z' '' )
assert $? == 1
assert  (test '!' '-z' '1' )
assert $? == 0
assert  (test '!' '-n' '' )
assert $? == 0

assert (test 'aa' -a 'aa')
assert $? == 0
assert ! (test '' -a 'aa')
assert $? == 1
assert ! (test 'aa' -a '')
assert $? == 1

assert (test '' -o 'aa')
assert $? == 0
assert (test 'a' -o '')
assert $? == 0
assert (test 'a' -o 'aa')
assert $? == 0
assert ! (test '' -o '')
assert $? == 1

## 4 arguments
assert ! (test '!' 12 '-lt' 34)
assert $? == 1
assert "$(test '!' 12 'lt' 34 2>&1)" == "${$SCRIPT_NAME.basename()}:58: test: lt: invalid binary operator"
assert $? == 2
assert (test '!' 12 '-gt' 34)
assert $? == 0

assert (test '(' -z "" ")")
assert $? == 0
assert "$(test '(' -n "33" "a" 2>&1)" == "${$SCRIPT_NAME.basename()}:65: test: expect: \`)', but actual: a"
assert $? == 2
assert (test '(' -n "33" ")")
assert $? == 0
assert "$(test '(' '(' ')' ')' 2>&1)" == "${$SCRIPT_NAME.basename()}:69: test: expect arguments within \`( )'"
assert $? == 2
assert "$(test '123' '==' 123 'aaa' 2>&1)" == "${$SCRIPT_NAME.basename()}:71: test: too many arguments"
assert $? == 2

## 5 or more arguments
assert (test '(' '(' 1234 ')' ')')
assert (test '(' '(' '(' 1234 ')' ')' ')')
assert ! (test '(' '(' '' ')' ')')
assert $? == 1
assert ! (test  '(' '(' '(' '' ')' ')' ')')
assert $? == 1

assert (test '(' '123' -eq '123' ')' -a 1234)
assert ! (test '(' '123' -eq '123' ')' -a )
assert $? == 1

assert "$(test '(' '(' -n ')' ')' 2>&1)" == "${$SCRIPT_NAME.basename()}:86: test: expect: \`)'"

## nest
var opens : [String]
for(var i = 0; $i < 20; $i++) {
    $opens.add('(')
}
var closes : [String]
for(var i = 0; $i < $opens.size(); $i++) {
    $closes.add(')')
}

assert "$(test $opens aaa $closes 2>&1)" == "${$SCRIPT_NAME.basename()}:98: test: too many nesting"
assert $? == 3

true