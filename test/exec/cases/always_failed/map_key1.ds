#$test($result = 'type', $lineNum = 261, $chars = 17, $errorKind = 'InvalidMapKey', $status = 1)

type T000{}
type T001 { let value: Int; let prev: T000; }
type T002 { let value: Int; let prev: T001; }
type T003 { let value: Int; let prev: T002; }
type T004 { let value: Int; let prev: T003; }
type T005 { let value: Int; let prev: T004; }
type T006 { let value: Int; let prev: T005; }
type T007 { let value: Int; let prev: T006; }
type T008 { let value: Int; let prev: T007; }
type T009 { let value: Int; let prev: T008; }
type T010 { let value: Int; let prev: T009; }
type T011 { let value: Int; let prev: T010; }
type T012 { let value: Int; let prev: T011; }
type T013 { let value: Int; let prev: T012; }
type T014 { let value: Int; let prev: T013; }
type T015 { let value: Int; let prev: T014; }
type T016 { let value: Int; let prev: T015; }
type T017 { let value: Int; let prev: T016; }
type T018 { let value: Int; let prev: T017; }
type T019 { let value: Int; let prev: T018; }
type T020 { let value: Int; let prev: T019; }
type T021 { let value: Int; let prev: T020; }
type T022 { let value: Int; let prev: T021; }
type T023 { let value: Int; let prev: T022; }
type T024 { let value: Int; let prev: T023; }
type T025 { let value: Int; let prev: T024; }
type T026 { let value: Int; let prev: T025; }
type T027 { let value: Int; let prev: T026; }
type T028 { let value: Int; let prev: T027; }
type T029 { let value: Int; let prev: T028; }
type T030 { let value: Int; let prev: T029; }
type T031 { let value: Int; let prev: T030; }
type T032 { let value: Int; let prev: T031; }
type T033 { let value: Int; let prev: T032; }
type T034 { let value: Int; let prev: T033; }
type T035 { let value: Int; let prev: T034; }
type T036 { let value: Int; let prev: T035; }
type T037 { let value: Int; let prev: T036; }
type T038 { let value: Int; let prev: T037; }
type T039 { let value: Int; let prev: T038; }
type T040 { let value: Int; let prev: T039; }
type T041 { let value: Int; let prev: T040; }
type T042 { let value: Int; let prev: T041; }
type T043 { let value: Int; let prev: T042; }
type T044 { let value: Int; let prev: T043; }
type T045 { let value: Int; let prev: T044; }
type T046 { let value: Int; let prev: T045; }
type T047 { let value: Int; let prev: T046; }
type T048 { let value: Int; let prev: T047; }
type T049 { let value: Int; let prev: T048; }
type T050 { let value: Int; let prev: T049; }
type T051 { let value: Int; let prev: T050; }
type T052 { let value: Int; let prev: T051; }
type T053 { let value: Int; let prev: T052; }
type T054 { let value: Int; let prev: T053; }
type T055 { let value: Int; let prev: T054; }
type T056 { let value: Int; let prev: T055; }
type T057 { let value: Int; let prev: T056; }
type T058 { let value: Int; let prev: T057; }
type T059 { let value: Int; let prev: T058; }
type T060 { let value: Int; let prev: T059; }
type T061 { let value: Int; let prev: T060; }
type T062 { let value: Int; let prev: T061; }
type T063 { let value: Int; let prev: T062; }
type T064 { let value: Int; let prev: T063; }
type T065 { let value: Int; let prev: T064; }
type T066 { let value: Int; let prev: T065; }
type T067 { let value: Int; let prev: T066; }
type T068 { let value: Int; let prev: T067; }
type T069 { let value: Int; let prev: T068; }
type T070 { let value: Int; let prev: T069; }
type T071 { let value: Int; let prev: T070; }
type T072 { let value: Int; let prev: T071; }
type T073 { let value: Int; let prev: T072; }
type T074 { let value: Int; let prev: T073; }
type T075 { let value: Int; let prev: T074; }
type T076 { let value: Int; let prev: T075; }
type T077 { let value: Int; let prev: T076; }
type T078 { let value: Int; let prev: T077; }
type T079 { let value: Int; let prev: T078; }
type T080 { let value: Int; let prev: T079; }
type T081 { let value: Int; let prev: T080; }
type T082 { let value: Int; let prev: T081; }
type T083 { let value: Int; let prev: T082; }
type T084 { let value: Int; let prev: T083; }
type T085 { let value: Int; let prev: T084; }
type T086 { let value: Int; let prev: T085; }
type T087 { let value: Int; let prev: T086; }
type T088 { let value: Int; let prev: T087; }
type T089 { let value: Int; let prev: T088; }
type T090 { let value: Int; let prev: T089; }
type T091 { let value: Int; let prev: T090; }
type T092 { let value: Int; let prev: T091; }
type T093 { let value: Int; let prev: T092; }
type T094 { let value: Int; let prev: T093; }
type T095 { let value: Int; let prev: T094; }
type T096 { let value: Int; let prev: T095; }
type T097 { let value: Int; let prev: T096; }
type T098 { let value: Int; let prev: T097; }
type T099 { let value: Int; let prev: T098; }
type T100 { let value: Int; let prev: T099; }
type T101 { let value: Int; let prev: T100; }
type T102 { let value: Int; let prev: T101; }
type T103 { let value: Int; let prev: T102; }
type T104 { let value: Int; let prev: T103; }
type T105 { let value: Int; let prev: T104; }
type T106 { let value: Int; let prev: T105; }
type T107 { let value: Int; let prev: T106; }
type T108 { let value: Int; let prev: T107; }
type T109 { let value: Int; let prev: T108; }
type T110 { let value: Int; let prev: T109; }
type T111 { let value: Int; let prev: T110; }
type T112 { let value: Int; let prev: T111; }
type T113 { let value: Int; let prev: T112; }
type T114 { let value: Int; let prev: T113; }
type T115 { let value: Int; let prev: T114; }
type T116 { let value: Int; let prev: T115; }
type T117 { let value: Int; let prev: T116; }
type T118 { let value: Int; let prev: T117; }
type T119 { let value: Int; let prev: T118; }
type T120 { let value: Int; let prev: T119; }
type T121 { let value: Int; let prev: T120; }
type T122 { let value: Int; let prev: T121; }
type T123 { let value: Int; let prev: T122; }
type T124 { let value: Int; let prev: T123; }
type T125 { let value: Int; let prev: T124; }
type T126 { let value: Int; let prev: T125; }
type T127 { let value: Int; let prev: T126; }
type T128 { let value: Int; let prev: T127; }
type T129 { let value: Int; let prev: T128; }
type T130 { let value: Int; let prev: T129; }
type T131 { let value: Int; let prev: T130; }
type T132 { let value: Int; let prev: T131; }
type T133 { let value: Int; let prev: T132; }
type T134 { let value: Int; let prev: T133; }
type T135 { let value: Int; let prev: T134; }
type T136 { let value: Int; let prev: T135; }
type T137 { let value: Int; let prev: T136; }
type T138 { let value: Int; let prev: T137; }
type T139 { let value: Int; let prev: T138; }
type T140 { let value: Int; let prev: T139; }
type T141 { let value: Int; let prev: T140; }
type T142 { let value: Int; let prev: T141; }
type T143 { let value: Int; let prev: T142; }
type T144 { let value: Int; let prev: T143; }
type T145 { let value: Int; let prev: T144; }
type T146 { let value: Int; let prev: T145; }
type T147 { let value: Int; let prev: T146; }
type T148 { let value: Int; let prev: T147; }
type T149 { let value: Int; let prev: T148; }
type T150 { let value: Int; let prev: T149; }
type T151 { let value: Int; let prev: T150; }
type T152 { let value: Int; let prev: T151; }
type T153 { let value: Int; let prev: T152; }
type T154 { let value: Int; let prev: T153; }
type T155 { let value: Int; let prev: T154; }
type T156 { let value: Int; let prev: T155; }
type T157 { let value: Int; let prev: T156; }
type T158 { let value: Int; let prev: T157; }
type T159 { let value: Int; let prev: T158; }
type T160 { let value: Int; let prev: T159; }
type T161 { let value: Int; let prev: T160; }
type T162 { let value: Int; let prev: T161; }
type T163 { let value: Int; let prev: T162; }
type T164 { let value: Int; let prev: T163; }
type T165 { let value: Int; let prev: T164; }
type T166 { let value: Int; let prev: T165; }
type T167 { let value: Int; let prev: T166; }
type T168 { let value: Int; let prev: T167; }
type T169 { let value: Int; let prev: T168; }
type T170 { let value: Int; let prev: T169; }
type T171 { let value: Int; let prev: T170; }
type T172 { let value: Int; let prev: T171; }
type T173 { let value: Int; let prev: T172; }
type T174 { let value: Int; let prev: T173; }
type T175 { let value: Int; let prev: T174; }
type T176 { let value: Int; let prev: T175; }
type T177 { let value: Int; let prev: T176; }
type T178 { let value: Int; let prev: T177; }
type T179 { let value: Int; let prev: T178; }
type T180 { let value: Int; let prev: T179; }
type T181 { let value: Int; let prev: T180; }
type T182 { let value: Int; let prev: T181; }
type T183 { let value: Int; let prev: T182; }
type T184 { let value: Int; let prev: T183; }
type T185 { let value: Int; let prev: T184; }
type T186 { let value: Int; let prev: T185; }
type T187 { let value: Int; let prev: T186; }
type T188 { let value: Int; let prev: T187; }
type T189 { let value: Int; let prev: T188; }
type T190 { let value: Int; let prev: T189; }
type T191 { let value: Int; let prev: T190; }
type T192 { let value: Int; let prev: T191; }
type T193 { let value: Int; let prev: T192; }
type T194 { let value: Int; let prev: T193; }
type T195 { let value: Int; let prev: T194; }
type T196 { let value: Int; let prev: T195; }
type T197 { let value: Int; let prev: T196; }
type T198 { let value: Int; let prev: T197; }
type T199 { let value: Int; let prev: T198; }
type T200 { let value: Int; let prev: T199; }
type T201 { let value: Int; let prev: T200; }
type T202 { let value: Int; let prev: T201; }
type T203 { let value: Int; let prev: T202; }
type T204 { let value: Int; let prev: T203; }
type T205 { let value: Int; let prev: T204; }
type T206 { let value: Int; let prev: T205; }
type T207 { let value: Int; let prev: T206; }
type T208 { let value: Int; let prev: T207; }
type T209 { let value: Int; let prev: T208; }
type T210 { let value: Int; let prev: T209; }
type T211 { let value: Int; let prev: T210; }
type T212 { let value: Int; let prev: T211; }
type T213 { let value: Int; let prev: T212; }
type T214 { let value: Int; let prev: T213; }
type T215 { let value: Int; let prev: T214; }
type T216 { let value: Int; let prev: T215; }
type T217 { let value: Int; let prev: T216; }
type T218 { let value: Int; let prev: T217; }
type T219 { let value: Int; let prev: T218; }
type T220 { let value: Int; let prev: T219; }
type T221 { let value: Int; let prev: T220; }
type T222 { let value: Int; let prev: T221; }
type T223 { let value: Int; let prev: T222; }
type T224 { let value: Int; let prev: T223; }
type T225 { let value: Int; let prev: T224; }
type T226 { let value: Int; let prev: T225; }
type T227 { let value: Int; let prev: T226; }
type T228 { let value: Int; let prev: T227; }
type T229 { let value: Int; let prev: T228; }
type T230 { let value: Int; let prev: T229; }
type T231 { let value: Int; let prev: T230; }
type T232 { let value: Int; let prev: T231; }
type T233 { let value: Int; let prev: T232; }
type T234 { let value: Int; let prev: T233; }
type T235 { let value: Int; let prev: T234; }
type T236 { let value: Int; let prev: T235; }
type T237 { let value: Int; let prev: T236; }
type T238 { let value: Int; let prev: T237; }
type T239 { let value: Int; let prev: T238; }
type T240 { let value: Int; let prev: T239; }
type T241 { let value: Int; let prev: T240; }
type T242 { let value: Int; let prev: T241; }
type T243 { let value: Int; let prev: T242; }
type T244 { let value: Int; let prev: T243; }
type T245 { let value: Int; let prev: T244; }
type T246 { let value: Int; let prev: T245; }
type T247 { let value: Int; let prev: T246; }
type T248 { let value: Int; let prev: T247; }
type T249 { let value: Int; let prev: T248; }
type T250 { let value: Int; let prev: T249; }
type T251 { let value: Int; let prev: T250; }
type T252 { let value: Int; let prev: T251; }
type T253 { let value: Int; let prev: T252; }
type T254 { let value: Int; let prev: T253; }
type T255 { let value: Int; let prev: T254; }

assert 2345 is [T126:Int]
assert 2345 is [T127:Int]