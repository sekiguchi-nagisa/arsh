#!/usr/bin/env arsh

if $# != 1 {
    echo "[usage] $0 [output]" 1>&2
    exit 1
}

command -v curl &> /dev/null || { echo require curl 1>&2; exit 1; }

let out = $1.startsWith("/") ? $1 : "../$1"
let work_dir = "word-temp"

test -d $work_dir || mkdir $work_dir

cd $work_dir

test -f WordBreakProperty.txt ||
    curl http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/WordBreakProperty.txt -o ./WordBreakProperty.txt

test -f emoji-data.txt ||
    curl https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt -o emoji-data.txt


typedef Range {
    let begin : Int         # begin codepoint (inclusive)
    let end : Int           # end codepoint (inclusive)
    let begin_str : String  # begin codepoint string
    let end_str : String    # end codepoint string
    let property : String   # property string
}

function compare(o : Range) : Int for Range {
    return $this.end.compare($o.begin)
}

function try_merge(o : Range) : Range? for Range {
    if $this.end + 1 == $o.begin && $this.property == $o.property {
        # merge range
        return new Range(
            $this.begin,
            $o.end,
            $this.begin_str,
            $o.end_str,
            $this.property
        )
    }
    return $none
}

function parse($line : String) : Range {
    var m = $/^([0-9A-F]+)(\.\.([0-9A-F]+))?[ ]+;[ ]+([a-zA-Z0-9_]+)[ ]*#.+$/.match($line)!
    var begin = "0x${$m.group(1)!}"
    var end = "0x${$m.group(3) ?? $m.group(1)!}"
    var p = $m.group(4)!

    return new Range(
        $begin.toInt()!,
        $end.toInt()!,
        $begin,
        $end,
        $p
    )
}

function validate($ranges : [Range]) {
    var prev : Range?
    for r in $ranges {
        if $prev {
            assert $prev!.begin < $r.begin: "prev:${$prev!}, cur:${$r}"
            assert $prev!.end < $r.end: "prev:${$prev!}, cur:${$r}"
        }
        $prev = $r
    }
}

function minimize($ranges : [Range]) : [Range] {
    $validate($ranges)
    var ret : [Range]
    for $r in $ranges {
        if $ret.empty() {
            $ret.add($r)
            continue
        }
        if let n = $ret.peek().try_merge($r) {
            $ret.pop()
            $ret.push($n)
            continue
        }
        $ret.add($r)
    }
    $validate($ret)
    return $ret
}


 {
    echo "/* Auto-generated by scripts/$(basename $0)  */"
    echo "/*"
 } with > $out

var ranges : [Range]

# WordBreakProperty.txt
cat ./WordBreakProperty.txt | for(var count = 0; read -f $'\n'; $count++) {
    if $count < 2 {
        echo $REPLY >> $out
        continue
    }

    if $REPLY.startsWith('#') || $REPLY.empty() {
        continue
    }
    try { $ranges.add($parse($REPLY)); } catch $e : Error { $e.show(); echo 1>&2 $count $REPLY; }
    echo $REPLY
} with > ./trimed_WordBreakProperty.txt

$ranges.sortBy(function (x,y) => $x.compare($y))
$ranges = $minimize($ranges)

# emoji-data.txt
var ranges2: [Range]
cat ./emoji-data.txt | for(var count = 0; read -f $'\n'; $count++) {
    if $count < 2 {
        echo $REPLY >> $out
        continue
    }

    if $REPLY.startsWith('#') || $REPLY.empty() || $REPLY.indexOf("Extended_Pictographic") == -1 {
        continue
    }
    try { $ranges2.add($parse($REPLY)); } catch $e : Error { $e.show(); echo 1>&2 $count $REPLY; }
    echo $REPLY
} with > ./trimed_emoji-data.txt

$ranges2.sortBy(function (x,y) => $x.compare($y))
$ranges2 = $minimize($ranges2)

# final output
{
    echo "*/"
    echo
    echo // clang-format off
    echo "#ifdef USE_WORD_BREAK_PROPERTY"
    echo
    echo "static constexpr UNICODE_PROPERTY_RANGE word_break_property_table[] = {"
} with >> $out

for $r in $ranges {
    echo "    { ${$r.begin_str}, ${$r.end_str}, PROPERTY(${$r.property}) },"
} with >> $out

{
    echo -e "};"
    echo
    echo "#endif"
} with >> $out


{
    echo
    echo "#ifdef USE_EMOJI_PROPERTY"
    echo
    echo "static constexpr UNICODE_PROPERTY_RANGE emoji_property_table[] = {"
} with >> $out

for $r in $ranges2 {
    echo "    { ${r.begin_str}, ${r.end_str}, PROPERTY(${r.property}) },"
} with >> $out

{
echo -e "};"
echo
echo "#endif"
} with >> $out
